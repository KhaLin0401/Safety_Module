
Safety_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008668  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08008778  08008778  00009778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800883c  0800883c  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800883c  0800883c  0000a060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800883c  0800883c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800883c  0800883c  0000983c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008840  08008840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008844  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c4  20000060  080088a4  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002124  080088a4  0000a124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018359  00000000  00000000  0000a089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d3  00000000  00000000  000223e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00025db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fe  00000000  00000000  00027388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003301  00000000  00000000  00028486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018292  00000000  00000000  0002b787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a81d  00000000  00000000  00043a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de236  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006064  00000000  00000000  000de27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e42e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08008760 	.word	0x08008760

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08008760 	.word	0x08008760

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmpun>:
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	d102      	bne.n	800070c <__aeabi_fcmpun+0x14>
 8000706:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800070a:	d108      	bne.n	800071e <__aeabi_fcmpun+0x26>
 800070c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000710:	d102      	bne.n	8000718 <__aeabi_fcmpun+0x20>
 8000712:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000716:	d102      	bne.n	800071e <__aeabi_fcmpun+0x26>
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	4770      	bx	lr
 800071e:	f04f 0001 	mov.w	r0, #1
 8000722:	4770      	bx	lr

08000724 <__aeabi_f2uiz>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	d20e      	bcs.n	8000746 <__aeabi_f2uiz+0x22>
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800072c:	d30b      	bcc.n	8000746 <__aeabi_f2uiz+0x22>
 800072e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d409      	bmi.n	800074c <__aeabi_f2uiz+0x28>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	4770      	bx	lr
 8000746:	f04f 0000 	mov.w	r0, #0
 800074a:	4770      	bx	lr
 800074c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000750:	d101      	bne.n	8000756 <__aeabi_f2uiz+0x32>
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	d102      	bne.n	800075c <__aeabi_f2uiz+0x38>
 8000756:	f04f 30ff 	mov.w	r0, #4294967295
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <Safety_Monitor_Init>:
Digital_Sensor_t g_digital_sensors[DIGITAL_SENSOR_COUNT];

uint16_t adc_buffer[4];

// Khởi tạo các giá trị mặc định cho các cảm biến
HAL_StatusTypeDef Safety_Monitor_Init(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
    // Khởi tạo giá trị mặc định cho cảm biến analog
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 4);
 800076a:	2204      	movs	r2, #4
 800076c:	4947      	ldr	r1, [pc, #284]	@ (800088c <Safety_Monitor_Init+0x128>)
 800076e:	4848      	ldr	r0, [pc, #288]	@ (8000890 <Safety_Monitor_Init+0x12c>)
 8000770:	f001 fda4 	bl	80022bc <HAL_ADC_Start_DMA>
    // g_analog_sensors[1].raw_value = DEFAULT_ANALOG_INPUT_2; 
    // g_analog_sensors[2].raw_value = DEFAULT_ANALOG_INPUT_3;
    // g_analog_sensors[3].raw_value = DEFAULT_ANALOG_INPUT_4;
    
    // Khởi tạo trạng thái hoạt động cho cảm biến analog
    g_analog_sensors[0].sensor_active = DEFAULT_ANALOG_1_ENABLE;
 8000774:	4b47      	ldr	r3, [pc, #284]	@ (8000894 <Safety_Monitor_Init+0x130>)
 8000776:	2200      	movs	r2, #0
 8000778:	705a      	strb	r2, [r3, #1]
    g_analog_sensors[1].sensor_active = DEFAULT_ANALOG_2_ENABLE;
 800077a:	4b46      	ldr	r3, [pc, #280]	@ (8000894 <Safety_Monitor_Init+0x130>)
 800077c:	2200      	movs	r2, #0
 800077e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    g_analog_sensors[2].sensor_active = DEFAULT_ANALOG_3_ENABLE;
 8000782:	4b44      	ldr	r3, [pc, #272]	@ (8000894 <Safety_Monitor_Init+0x130>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    g_analog_sensors[3].sensor_active = DEFAULT_ANALOG_4_ENABLE;
 800078a:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <Safety_Monitor_Init+0x130>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5

    // Khởi tạo các thông số cân chỉnh cho cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	71fb      	strb	r3, [r7, #7]
 8000796:	e020      	b.n	80007da <Safety_Monitor_Init+0x76>
        g_analog_sensors[i].calibration_gain = DEFAULT_ANALOG_COEFFICIENT;
 8000798:	79fa      	ldrb	r2, [r7, #7]
 800079a:	493e      	ldr	r1, [pc, #248]	@ (8000894 <Safety_Monitor_Init+0x130>)
 800079c:	4613      	mov	r3, r2
 800079e:	011b      	lsls	r3, r3, #4
 80007a0:	1a9b      	subs	r3, r3, r2
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	440b      	add	r3, r1
 80007a6:	3328      	adds	r3, #40	@ 0x28
 80007a8:	4a3b      	ldr	r2, [pc, #236]	@ (8000898 <Safety_Monitor_Init+0x134>)
 80007aa:	601a      	str	r2, [r3, #0]
        g_analog_sensors[i].calibration_offset = DEFAULT_ANALOG_CALIBRATION;
 80007ac:	79fa      	ldrb	r2, [r7, #7]
 80007ae:	4939      	ldr	r1, [pc, #228]	@ (8000894 <Safety_Monitor_Init+0x130>)
 80007b0:	4613      	mov	r3, r2
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	1a9b      	subs	r3, r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	440b      	add	r3, r1
 80007ba:	3324      	adds	r3, #36	@ 0x24
 80007bc:	4a37      	ldr	r2, [pc, #220]	@ (800089c <Safety_Monitor_Init+0x138>)
 80007be:	601a      	str	r2, [r3, #0]
        g_analog_sensors[i].error_count = 0;
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	4934      	ldr	r1, [pc, #208]	@ (8000894 <Safety_Monitor_Init+0x130>)
 80007c4:	4613      	mov	r3, r2
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	1a9b      	subs	r3, r3, r2
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	440b      	add	r3, r1
 80007ce:	3338      	adds	r3, #56	@ 0x38
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	3301      	adds	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d9db      	bls.n	8000798 <Safety_Monitor_Init+0x34>
    }

    // Khởi tạo giá trị mặc định cho cảm biến digital  
    g_digital_sensors[0].sensor_value = DEFAULT_DI1_STATUS;
 80007e0:	4b2f      	ldr	r3, [pc, #188]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	709a      	strb	r2, [r3, #2]
    g_digital_sensors[1].sensor_value = DEFAULT_DI2_STATUS;
 80007e6:	4b2e      	ldr	r3, [pc, #184]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    g_digital_sensors[2].sensor_value = DEFAULT_DI3_STATUS;
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    g_digital_sensors[3].sensor_value = DEFAULT_DI4_STATUS;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

    // Khởi tạo trạng thái hoạt động cho cảm biến digital
    g_digital_sensors[0].sensor_active = DEFAULT_DI1_ENABLE;
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 8000800:	2200      	movs	r2, #0
 8000802:	705a      	strb	r2, [r3, #1]
    g_digital_sensors[1].sensor_active = DEFAULT_DI2_ENABLE;
 8000804:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    g_digital_sensors[2].sensor_active = DEFAULT_DI3_ENABLE;
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    g_digital_sensors[3].sensor_active = DEFAULT_DI4_ENABLE;
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

    // Khởi tạo các thông số bổ sung cho cảm biến digital
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	71bb      	strb	r3, [r7, #6]
 8000820:	e02c      	b.n	800087c <Safety_Monitor_Init+0x118>
        g_digital_sensors[i].error_count = 0;
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	4a1e      	ldr	r2, [pc, #120]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 8000826:	015b      	lsls	r3, r3, #5
 8000828:	4413      	add	r3, r2
 800082a:	3318      	adds	r3, #24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
        g_digital_sensors[i].state_change_count = 0;
 8000830:	79bb      	ldrb	r3, [r7, #6]
 8000832:	4a1b      	ldr	r2, [pc, #108]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 8000834:	015b      	lsls	r3, r3, #5
 8000836:	4413      	add	r3, r2
 8000838:	3314      	adds	r3, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
        g_digital_sensors[i].last_edge_time = 0;
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	4a17      	ldr	r2, [pc, #92]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 8000842:	015b      	lsls	r3, r3, #5
 8000844:	4413      	add	r3, r2
 8000846:	330c      	adds	r3, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
        g_digital_sensors[i].previous_state = 0;
 800084c:	79bb      	ldrb	r3, [r7, #6]
 800084e:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 8000850:	015b      	lsls	r3, r3, #5
 8000852:	4413      	add	r3, r2
 8000854:	3303      	adds	r3, #3
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].debounced_state = 0;
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 800085e:	015b      	lsls	r3, r3, #5
 8000860:	4413      	add	r3, r2
 8000862:	3304      	adds	r3, #4
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].debounce_time_ms = DEFAULT_SAFETY_RESPONSE_TIME;
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <Safety_Monitor_Init+0x13c>)
 800086c:	015b      	lsls	r3, r3, #5
 800086e:	4413      	add	r3, r2
 8000870:	3308      	adds	r3, #8
 8000872:	2232      	movs	r2, #50	@ 0x32
 8000874:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	3301      	adds	r3, #1
 800087a:	71bb      	strb	r3, [r7, #6]
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d9cf      	bls.n	8000822 <Safety_Monitor_Init+0xbe>
    }
    
    return HAL_OK;
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000208 	.word	0x20000208
 8000890:	2000058c 	.word	0x2000058c
 8000894:	20000098 	.word	0x20000098
 8000898:	452e2000 	.word	0x452e2000
 800089c:	42e60000 	.word	0x42e60000
 80008a0:	20000188 	.word	0x20000188

080008a4 <Safety_Monitor_Process>:

// Xử lý dữ liệu từ các cảm biến
Safety_Monitor_Status_t Safety_Monitor_Process(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80008aa:	f001 fc25 	bl	80020f8 <HAL_GetTick>
 80008ae:	6038      	str	r0, [r7, #0]
    Safety_Monitor_Status_t system_status = SAFETY_MONITOR_OK;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]

    // Xử lý tất cả các cảm biến
    Safety_Process_Analog_Sensors();
 80008b4:	f000 fa74 	bl	8000da0 <Safety_Process_Analog_Sensors>
    Safety_Process_Digital_Sensors();
 80008b8:	f000 fb3c 	bl	8000f34 <Safety_Process_Digital_Sensors>

    // Kiểm tra trạng thái của các cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	71bb      	strb	r3, [r7, #6]
 80008c0:	e047      	b.n	8000952 <Safety_Monitor_Process+0xae>
        if(g_analog_sensors[i].sensor_active) {
 80008c2:	79ba      	ldrb	r2, [r7, #6]
 80008c4:	496a      	ldr	r1, [pc, #424]	@ (8000a70 <Safety_Monitor_Process+0x1cc>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	440b      	add	r3, r1
 80008d0:	3301      	adds	r3, #1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d039      	beq.n	800094c <Safety_Monitor_Process+0xa8>
            // Kiểm tra theo thứ tự ưu tiên từ cao đến thấp
            if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_CRITICAL) {
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4965      	ldr	r1, [pc, #404]	@ (8000a70 <Safety_Monitor_Process+0x1cc>)
 80008dc:	4613      	mov	r3, r2
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	1a9b      	subs	r3, r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	440b      	add	r3, r1
 80008e6:	332c      	adds	r3, #44	@ 0x2c
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d105      	bne.n	80008fa <Safety_Monitor_Process+0x56>
                system_status = SAFETY_MONITOR_CRITICAL;
 80008ee:	2302      	movs	r3, #2
 80008f0:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_CRITICAL;
 80008f2:	4b60      	ldr	r3, [pc, #384]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
                break; // Thoát ngay khi phát hiện lỗi nghiêm trọng
 80008f8:	e02e      	b.n	8000958 <Safety_Monitor_Process+0xb4>
            }
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 80008fa:	79ba      	ldrb	r2, [r7, #6]
 80008fc:	495c      	ldr	r1, [pc, #368]	@ (8000a70 <Safety_Monitor_Process+0x1cc>)
 80008fe:	4613      	mov	r3, r2
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	1a9b      	subs	r3, r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	332c      	adds	r3, #44	@ 0x2c
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d109      	bne.n	8000924 <Safety_Monitor_Process+0x80>
                    g_safety_system.system_status != SAFETY_MONITOR_CRITICAL) {
 8000910:	4b58      	ldr	r3, [pc, #352]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 8000912:	781b      	ldrb	r3, [r3, #0]
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 8000914:	2b02      	cmp	r3, #2
 8000916:	d005      	beq.n	8000924 <Safety_Monitor_Process+0x80>
                system_status = SAFETY_MONITOR_WARNING;
 8000918:	2301      	movs	r3, #1
 800091a:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_WARNING;
 800091c:	4b55      	ldr	r3, [pc, #340]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e013      	b.n	800094c <Safety_Monitor_Process+0xa8>
            }
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 8000924:	79ba      	ldrb	r2, [r7, #6]
 8000926:	4952      	ldr	r1, [pc, #328]	@ (8000a70 <Safety_Monitor_Process+0x1cc>)
 8000928:	4613      	mov	r3, r2
 800092a:	011b      	lsls	r3, r3, #4
 800092c:	1a9b      	subs	r3, r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	332c      	adds	r3, #44	@ 0x2c
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b04      	cmp	r3, #4
 8000938:	d108      	bne.n	800094c <Safety_Monitor_Process+0xa8>
                    g_safety_system.system_status < SAFETY_MONITOR_CRITICAL) {
 800093a:	4b4e      	ldr	r3, [pc, #312]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 800093c:	781b      	ldrb	r3, [r3, #0]
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 800093e:	2b01      	cmp	r3, #1
 8000940:	d804      	bhi.n	800094c <Safety_Monitor_Process+0xa8>
                system_status = SAFETY_MONITOR_ERROR;
 8000942:	2304      	movs	r3, #4
 8000944:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_ERROR;
 8000946:	4b4b      	ldr	r3, [pc, #300]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 8000948:	2204      	movs	r2, #4
 800094a:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 800094c:	79bb      	ldrb	r3, [r7, #6]
 800094e:	3301      	adds	r3, #1
 8000950:	71bb      	strb	r3, [r7, #6]
 8000952:	79bb      	ldrb	r3, [r7, #6]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d9b4      	bls.n	80008c2 <Safety_Monitor_Process+0x1e>
            }
        }
    }

    // Kiểm tra trạng thái của các cảm biến digital 
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000958:	2300      	movs	r3, #0
 800095a:	717b      	strb	r3, [r7, #5]
 800095c:	e03b      	b.n	80009d6 <Safety_Monitor_Process+0x132>
        if(g_digital_sensors[i].sensor_active) {
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	4a45      	ldr	r2, [pc, #276]	@ (8000a78 <Safety_Monitor_Process+0x1d4>)
 8000962:	015b      	lsls	r3, r3, #5
 8000964:	4413      	add	r3, r2
 8000966:	3301      	adds	r3, #1
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d030      	beq.n	80009d0 <Safety_Monitor_Process+0x12c>
            if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_CRITICAL) {
 800096e:	797b      	ldrb	r3, [r7, #5]
 8000970:	4a41      	ldr	r2, [pc, #260]	@ (8000a78 <Safety_Monitor_Process+0x1d4>)
 8000972:	015b      	lsls	r3, r3, #5
 8000974:	4413      	add	r3, r2
 8000976:	3310      	adds	r3, #16
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d105      	bne.n	800098a <Safety_Monitor_Process+0xe6>
                system_status = SAFETY_MONITOR_CRITICAL;
 800097e:	2302      	movs	r3, #2
 8000980:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_CRITICAL;
 8000982:	4b3c      	ldr	r3, [pc, #240]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 8000984:	2202      	movs	r2, #2
 8000986:	701a      	strb	r2, [r3, #0]
                break;
 8000988:	e028      	b.n	80009dc <Safety_Monitor_Process+0x138>
            }
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 800098a:	797b      	ldrb	r3, [r7, #5]
 800098c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a78 <Safety_Monitor_Process+0x1d4>)
 800098e:	015b      	lsls	r3, r3, #5
 8000990:	4413      	add	r3, r2
 8000992:	3310      	adds	r3, #16
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d109      	bne.n	80009ae <Safety_Monitor_Process+0x10a>
                    g_safety_system.system_status != SAFETY_MONITOR_CRITICAL) {
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 800099c:	781b      	ldrb	r3, [r3, #0]
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d005      	beq.n	80009ae <Safety_Monitor_Process+0x10a>
                system_status = SAFETY_MONITOR_WARNING;  
 80009a2:	2301      	movs	r3, #1
 80009a4:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_WARNING;  
 80009a6:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	e010      	b.n	80009d0 <Safety_Monitor_Process+0x12c>
            }
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 80009ae:	797b      	ldrb	r3, [r7, #5]
 80009b0:	4a31      	ldr	r2, [pc, #196]	@ (8000a78 <Safety_Monitor_Process+0x1d4>)
 80009b2:	015b      	lsls	r3, r3, #5
 80009b4:	4413      	add	r3, r2
 80009b6:	3310      	adds	r3, #16
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d108      	bne.n	80009d0 <Safety_Monitor_Process+0x12c>
                    g_safety_system.system_status < SAFETY_MONITOR_CRITICAL) {
 80009be:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d804      	bhi.n	80009d0 <Safety_Monitor_Process+0x12c>
                system_status = SAFETY_MONITOR_ERROR;
 80009c6:	2304      	movs	r3, #4
 80009c8:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_ERROR;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80009cc:	2204      	movs	r2, #4
 80009ce:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 80009d0:	797b      	ldrb	r3, [r7, #5]
 80009d2:	3301      	adds	r3, #1
 80009d4:	717b      	strb	r3, [r7, #5]
 80009d6:	797b      	ldrb	r3, [r7, #5]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d9c0      	bls.n	800095e <Safety_Monitor_Process+0xba>
            }
        }
    }

    // Cập nhật trạng thái hệ thống
    g_safety_system.last_safety_check = current_time;
 80009dc:	4a25      	ldr	r2, [pc, #148]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	6093      	str	r3, [r2, #8]

    // Cập nhật bộ đếm cảnh báo
    if(system_status == SAFETY_MONITOR_WARNING) {
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d105      	bne.n	80009f4 <Safety_Monitor_Process+0x150>
        g_safety_system.warning_count++;
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80009f0:	60d3      	str	r3, [r2, #12]
 80009f2:	e010      	b.n	8000a16 <Safety_Monitor_Process+0x172>
    }
    else if(system_status == SAFETY_MONITOR_CRITICAL) {
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d105      	bne.n	8000a06 <Safety_Monitor_Process+0x162>
        g_safety_system.critical_count++;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	3301      	adds	r3, #1
 8000a00:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 8000a02:	6113      	str	r3, [r2, #16]
 8000a04:	e007      	b.n	8000a16 <Safety_Monitor_Process+0x172>
    }
    else if(system_status == SAFETY_MONITOR_EMERGENCY) {
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d104      	bne.n	8000a16 <Safety_Monitor_Process+0x172>
        g_safety_system.emergency_count++;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a18      	ldr	r2, [pc, #96]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 8000a14:	6153      	str	r3, [r2, #20]
    }
    
    if(system_status == SAFETY_MONITOR_CRITICAL) { 
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d10e      	bne.n	8000a3a <Safety_Monitor_Process+0x196>
        HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4816      	ldr	r0, [pc, #88]	@ (8000a7c <Safety_Monitor_Process+0x1d8>)
 8000a22:	f002 fc94 	bl	800334e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a2c:	4813      	ldr	r0, [pc, #76]	@ (8000a7c <Safety_Monitor_Process+0x1d8>)
 8000a2e:	f002 fc8e 	bl	800334e <HAL_GPIO_WritePin>
        g_holdingRegisters[REG_RESET_FLAG] = 1;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <Safety_Monitor_Process+0x1dc>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	811a      	strh	r2, [r3, #8]
 8000a38:	e011      	b.n	8000a5e <Safety_Monitor_Process+0x1ba>
    }
    else if(system_status == SAFETY_MONITOR_OK 
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10e      	bne.n	8000a5e <Safety_Monitor_Process+0x1ba>
        && g_holdingRegisters[REG_RESET_FLAG] == 0) {
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <Safety_Monitor_Process+0x1dc>)
 8000a42:	891b      	ldrh	r3, [r3, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10a      	bne.n	8000a5e <Safety_Monitor_Process+0x1ba>
        HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <Safety_Monitor_Process+0x1d8>)
 8000a4e:	f002 fc7e 	bl	800334e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a58:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <Safety_Monitor_Process+0x1d8>)
 8000a5a:	f002 fc78 	bl	800334e <HAL_GPIO_WritePin>
    }
    g_safety_system.system_status = system_status;
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <Safety_Monitor_Process+0x1d0>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	7013      	strb	r3, [r2, #0]

    return system_status;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000098 	.word	0x20000098
 8000a74:	2000007c 	.word	0x2000007c
 8000a78:	20000188 	.word	0x20000188
 8000a7c:	40010c00 	.word	0x40010c00
 8000a80:	20000210 	.word	0x20000210

08000a84 <Safety_Register_Load>:

// Đọc cấu hình từ Modbus registers
HAL_StatusTypeDef Safety_Register_Load(void){
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
    // Đọc cấu hình cho cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e030      	b.n	8000af2 <Safety_Register_Load+0x6e>
        g_analog_sensors[i].sensor_active = g_holdingRegisters[REG_ANALOG_1_ENABLE + i];
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	331a      	adds	r3, #26
 8000a94:	4a30      	ldr	r2, [pc, #192]	@ (8000b58 <Safety_Register_Load+0xd4>)
 8000a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	492f      	ldr	r1, [pc, #188]	@ (8000b5c <Safety_Register_Load+0xd8>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	011b      	lsls	r3, r3, #4
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3301      	adds	r3, #1
 8000aac:	4602      	mov	r2, r0
 8000aae:	701a      	strb	r2, [r3, #0]
        g_analog_sensors[i].calibration_gain = 
            (float)g_holdingRegisters[REG_ANALOG_COEFFICIENT];
 8000ab0:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <Safety_Register_Load+0xd4>)
 8000ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        g_analog_sensors[i].calibration_gain = 
 8000ab4:	79fc      	ldrb	r4, [r7, #7]
            (float)g_holdingRegisters[REG_ANALOG_COEFFICIENT];
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fc00 	bl	80002bc <__aeabi_ui2f>
 8000abc:	4602      	mov	r2, r0
        g_analog_sensors[i].calibration_gain = 
 8000abe:	4927      	ldr	r1, [pc, #156]	@ (8000b5c <Safety_Register_Load+0xd8>)
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	1b1b      	subs	r3, r3, r4
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	440b      	add	r3, r1
 8000aca:	3328      	adds	r3, #40	@ 0x28
 8000acc:	601a      	str	r2, [r3, #0]
        g_analog_sensors[i].calibration_offset = 
            (float)g_holdingRegisters[REG_ANALOG_CALIBRATION];
 8000ace:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <Safety_Register_Load+0xd4>)
 8000ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
        g_analog_sensors[i].calibration_offset = 
 8000ad2:	79fc      	ldrb	r4, [r7, #7]
            (float)g_holdingRegisters[REG_ANALOG_CALIBRATION];
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fbf1 	bl	80002bc <__aeabi_ui2f>
 8000ada:	4602      	mov	r2, r0
        g_analog_sensors[i].calibration_offset = 
 8000adc:	491f      	ldr	r1, [pc, #124]	@ (8000b5c <Safety_Register_Load+0xd8>)
 8000ade:	4623      	mov	r3, r4
 8000ae0:	011b      	lsls	r3, r3, #4
 8000ae2:	1b1b      	subs	r3, r3, r4
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3324      	adds	r3, #36	@ 0x24
 8000aea:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	3301      	adds	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b03      	cmp	r3, #3
 8000af6:	d9cb      	bls.n	8000a90 <Safety_Register_Load+0xc>
    }
    
    // Đọc cấu hình cho cảm biến digital
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	71bb      	strb	r3, [r7, #6]
 8000afc:	e023      	b.n	8000b46 <Safety_Register_Load+0xc2>
        g_digital_sensors[i].sensor_active = g_holdingRegisters[REG_DI1_ENABLE + i];
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	3326      	adds	r3, #38	@ 0x26
 8000b02:	4a15      	ldr	r2, [pc, #84]	@ (8000b58 <Safety_Register_Load+0xd4>)
 8000b04:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b08:	79bb      	ldrb	r3, [r7, #6]
 8000b0a:	b2d1      	uxtb	r1, r2
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <Safety_Register_Load+0xdc>)
 8000b0e:	015b      	lsls	r3, r3, #5
 8000b10:	4413      	add	r3, r2
 8000b12:	3301      	adds	r3, #1
 8000b14:	460a      	mov	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].active_level = g_holdingRegisters[REG_DI1_ACTIVE_LEVEL + i];
 8000b18:	79bb      	ldrb	r3, [r7, #6]
 8000b1a:	332a      	adds	r3, #42	@ 0x2a
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <Safety_Register_Load+0xd4>)
 8000b1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b22:	79bb      	ldrb	r3, [r7, #6]
 8000b24:	b2d1      	uxtb	r1, r2
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <Safety_Register_Load+0xdc>)
 8000b28:	015b      	lsls	r3, r3, #5
 8000b2a:	4413      	add	r3, r2
 8000b2c:	3305      	adds	r3, #5
 8000b2e:	460a      	mov	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].debounce_time_ms = DEFAULT_SAFETY_RESPONSE_TIME;
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <Safety_Register_Load+0xdc>)
 8000b36:	015b      	lsls	r3, r3, #5
 8000b38:	4413      	add	r3, r2
 8000b3a:	3308      	adds	r3, #8
 8000b3c:	2232      	movs	r2, #50	@ 0x32
 8000b3e:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000b40:	79bb      	ldrb	r3, [r7, #6]
 8000b42:	3301      	adds	r3, #1
 8000b44:	71bb      	strb	r3, [r7, #6]
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d9d8      	bls.n	8000afe <Safety_Register_Load+0x7a>
    }
    
    return HAL_OK;
 8000b4c:	2300      	movs	r3, #0

}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd90      	pop	{r4, r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000210 	.word	0x20000210
 8000b5c:	20000098 	.word	0x20000098
 8000b60:	20000188 	.word	0x20000188

08000b64 <Safety_Register_Save>:

// Lưu dữ liệu vào Modbus registers
HAL_StatusTypeDef Safety_Register_Save(void) {
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0

    // Lưu dữ liệu cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e025      	b.n	8000bbc <Safety_Register_Save+0x58>
        // Lưu giá trị điện áp đã được xử lý (mV)
        g_holdingRegisters[REG_ANALOG_INPUT_1 + i] = 
            (uint16_t)(g_analog_sensors[i].filtered_value);
 8000b70:	79fa      	ldrb	r2, [r7, #7]
 8000b72:	4929      	ldr	r1, [pc, #164]	@ (8000c18 <Safety_Register_Save+0xb4>)
 8000b74:	4613      	mov	r3, r2
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	3308      	adds	r3, #8
 8000b80:	681a      	ldr	r2, [r3, #0]
        g_holdingRegisters[REG_ANALOG_INPUT_1 + i] = 
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f103 0410 	add.w	r4, r3, #16
            (uint16_t)(g_analog_sensors[i].filtered_value);
 8000b88:	4610      	mov	r0, r2
 8000b8a:	f7ff fdcb 	bl	8000724 <__aeabi_f2uiz>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
        g_holdingRegisters[REG_ANALOG_INPUT_1 + i] = 
 8000b92:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <Safety_Register_Save+0xb8>)
 8000b94:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        
        // Lưu trạng thái kích hoạt của cảm biến
        g_holdingRegisters[REG_ANALOG_1_ENABLE + i] = 
            g_analog_sensors[i].sensor_active;
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	491f      	ldr	r1, [pc, #124]	@ (8000c18 <Safety_Register_Save+0xb4>)
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	781a      	ldrb	r2, [r3, #0]
        g_holdingRegisters[REG_ANALOG_1_ENABLE + i] = 
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	331a      	adds	r3, #26
            g_analog_sensors[i].sensor_active;
 8000bae:	4611      	mov	r1, r2
        g_holdingRegisters[REG_ANALOG_1_ENABLE + i] = 
 8000bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c1c <Safety_Register_Save+0xb8>)
 8000bb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	71fb      	strb	r3, [r7, #7]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	2b03      	cmp	r3, #3
 8000bc0:	d9d6      	bls.n	8000b70 <Safety_Register_Save+0xc>
        // g_holdingRegisters[REG_ANALOG_CALIBRATION + i] = 
        //     (uint16_t)(g_analog_sensors[i].calibration_offset);
    }
    
    // Lưu dữ liệu cảm biến digital 
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	71bb      	strb	r3, [r7, #6]
 8000bc6:	e01a      	b.n	8000bfe <Safety_Register_Save+0x9a>
        // Lưu trạng thái và cấu hình của cảm biến digital
        g_holdingRegisters[REG_DI1_STATUS + i] = 
            g_digital_sensors[i].sensor_state;
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <Safety_Register_Save+0xbc>)
 8000bcc:	015b      	lsls	r3, r3, #5
 8000bce:	4413      	add	r3, r2
 8000bd0:	3306      	adds	r3, #6
 8000bd2:	781a      	ldrb	r2, [r3, #0]
        g_holdingRegisters[REG_DI1_STATUS + i] = 
 8000bd4:	79bb      	ldrb	r3, [r7, #6]
 8000bd6:	3322      	adds	r3, #34	@ 0x22
            g_digital_sensors[i].sensor_state;
 8000bd8:	4611      	mov	r1, r2
        g_holdingRegisters[REG_DI1_STATUS + i] = 
 8000bda:	4a10      	ldr	r2, [pc, #64]	@ (8000c1c <Safety_Register_Save+0xb8>)
 8000bdc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_holdingRegisters[REG_DI1_ENABLE + i] = 
            g_digital_sensors[i].sensor_active;
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c20 <Safety_Register_Save+0xbc>)
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	4413      	add	r3, r2
 8000be8:	3301      	adds	r3, #1
 8000bea:	781a      	ldrb	r2, [r3, #0]
        g_holdingRegisters[REG_DI1_ENABLE + i] = 
 8000bec:	79bb      	ldrb	r3, [r7, #6]
 8000bee:	3326      	adds	r3, #38	@ 0x26
            g_digital_sensors[i].sensor_active;
 8000bf0:	4611      	mov	r1, r2
        g_holdingRegisters[REG_DI1_ENABLE + i] = 
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c1c <Safety_Register_Save+0xb8>)
 8000bf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	71bb      	strb	r3, [r7, #6]
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d9e1      	bls.n	8000bc8 <Safety_Register_Save+0x64>
    }
    g_holdingRegisters[REG_SAFETY_SYSTEM_STATUS] = g_safety_system.system_status;
 8000c04:	4b07      	ldr	r3, [pc, #28]	@ (8000c24 <Safety_Register_Save+0xc0>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <Safety_Register_Save+0xb8>)
 8000c0c:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	20000098 	.word	0x20000098
 8000c1c:	20000210 	.word	0x20000210
 8000c20:	20000188 	.word	0x20000188
 8000c24:	2000007c 	.word	0x2000007c

08000c28 <Safety_Get_Digital_State>:


uint8_t Safety_Get_Digital_State(uint8_t sensor_id){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
    
    switch (sensor_id)
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	d841      	bhi.n	8000cbc <Safety_Get_Digital_State+0x94>
 8000c38:	a201      	add	r2, pc, #4	@ (adr r2, 8000c40 <Safety_Get_Digital_State+0x18>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c51 	.word	0x08000c51
 8000c44:	08000c69 	.word	0x08000c69
 8000c48:	08000c85 	.word	0x08000c85
 8000c4c:	08000ca1 	.word	0x08000ca1
    {
    case 0:
        g_digital_sensors[0].sensor_value = HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8000c50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c54:	481c      	ldr	r0, [pc, #112]	@ (8000cc8 <Safety_Get_Digital_State+0xa0>)
 8000c56:	f002 fb63 	bl	8003320 <HAL_GPIO_ReadPin>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000c60:	709a      	strb	r2, [r3, #2]
        return g_digital_sensors[0].sensor_value;
 8000c62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000c64:	789b      	ldrb	r3, [r3, #2]
 8000c66:	e02a      	b.n	8000cbe <Safety_Get_Digital_State+0x96>
        break;
    case 1:
        g_digital_sensors[1].sensor_value = HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 8000c68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c6c:	4816      	ldr	r0, [pc, #88]	@ (8000cc8 <Safety_Get_Digital_State+0xa0>)
 8000c6e:	f002 fb57 	bl	8003320 <HAL_GPIO_ReadPin>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000c78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return g_digital_sensors[1].sensor_value;
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000c7e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000c82:	e01c      	b.n	8000cbe <Safety_Get_Digital_State+0x96>
        break;
    case 2:
        g_digital_sensors[2].sensor_value = HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8000c84:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c88:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <Safety_Get_Digital_State+0xa0>)
 8000c8a:	f002 fb49 	bl	8003320 <HAL_GPIO_ReadPin>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        return g_digital_sensors[2].sensor_value;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000c9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000c9e:	e00e      	b.n	8000cbe <Safety_Get_Digital_State+0x96>
        break;
    case 3:
        g_digital_sensors[3].sensor_value = HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 8000ca0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ca4:	4808      	ldr	r0, [pc, #32]	@ (8000cc8 <Safety_Get_Digital_State+0xa0>)
 8000ca6:	f002 fb3b 	bl	8003320 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000cb0:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
        return g_digital_sensors[3].sensor_value;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <Safety_Get_Digital_State+0xa4>)
 8000cb6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8000cba:	e000      	b.n	8000cbe <Safety_Get_Digital_State+0x96>
        break;
    default:
        return 0;
 8000cbc:	2300      	movs	r3, #0
    }
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40010c00 	.word	0x40010c00
 8000ccc:	20000188 	.word	0x20000188

08000cd0 <Safety_Convert_To_Distance>:
 * @param sensor_id: Sensor ID (0-3) 
 * @return uint16_t Raw ADC value (0-4095)
 * @note Đọc giá trị cảm biến analog từ ADC với xử lý lỗi toàn diện
 */

float Safety_Convert_To_Distance(uint8_t sensor_id){
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    float distance, voltage;
    voltage = adc_buffer[sensor_id] * 3.3f / 4095.0f;
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	4a29      	ldr	r2, [pc, #164]	@ (8000d84 <Safety_Convert_To_Distance+0xb4>)
 8000cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff faee 	bl	80002c4 <__aeabi_i2f>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4927      	ldr	r1, [pc, #156]	@ (8000d88 <Safety_Convert_To_Distance+0xb8>)
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fb3d 	bl	800036c <__aeabi_fmul>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	4925      	ldr	r1, [pc, #148]	@ (8000d8c <Safety_Convert_To_Distance+0xbc>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fbec 	bl	80004d4 <__aeabi_fdiv>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60fb      	str	r3, [r7, #12]
    if(voltage < 0.1f) return 0;
 8000d00:	4923      	ldr	r1, [pc, #140]	@ (8000d90 <Safety_Convert_To_Distance+0xc0>)
 8000d02:	68f8      	ldr	r0, [r7, #12]
 8000d04:	f7ff fcd0 	bl	80006a8 <__aeabi_fcmplt>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <Safety_Convert_To_Distance+0x44>
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e032      	b.n	8000d7a <Safety_Convert_To_Distance+0xaa>

    distance = g_analog_sensors[sensor_id].calibration_gain/100.0f * powf(voltage, (g_analog_sensors[sensor_id].calibration_offset)/(-100.0f));
 8000d14:	79fa      	ldrb	r2, [r7, #7]
 8000d16:	491f      	ldr	r1, [pc, #124]	@ (8000d94 <Safety_Convert_To_Distance+0xc4>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	1a9b      	subs	r3, r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	3328      	adds	r3, #40	@ 0x28
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	491c      	ldr	r1, [pc, #112]	@ (8000d98 <Safety_Convert_To_Distance+0xc8>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fbd3 	bl	80004d4 <__aeabi_fdiv>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461c      	mov	r4, r3
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	4917      	ldr	r1, [pc, #92]	@ (8000d94 <Safety_Convert_To_Distance+0xc4>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	1a9b      	subs	r3, r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	440b      	add	r3, r1
 8000d40:	3324      	adds	r3, #36	@ 0x24
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4915      	ldr	r1, [pc, #84]	@ (8000d9c <Safety_Convert_To_Distance+0xcc>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fbc4 	bl	80004d4 <__aeabi_fdiv>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	4619      	mov	r1, r3
 8000d50:	68f8      	ldr	r0, [r7, #12]
 8000d52:	f007 f871 	bl	8007e38 <powf>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff fb06 	bl	800036c <__aeabi_fmul>
 8000d60:	4603      	mov	r3, r0
 8000d62:	60bb      	str	r3, [r7, #8]
    g_analog_sensors[sensor_id].filtered_value = distance;
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	490b      	ldr	r1, [pc, #44]	@ (8000d94 <Safety_Convert_To_Distance+0xc4>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	011b      	lsls	r3, r3, #4
 8000d6c:	1a9b      	subs	r3, r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	440b      	add	r3, r1
 8000d72:	3308      	adds	r3, #8
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	601a      	str	r2, [r3, #0]
    return distance;
 8000d78:	68bb      	ldr	r3, [r7, #8]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000208 	.word	0x20000208
 8000d88:	40533333 	.word	0x40533333
 8000d8c:	457ff000 	.word	0x457ff000
 8000d90:	3dcccccd 	.word	0x3dcccccd
 8000d94:	20000098 	.word	0x20000098
 8000d98:	42c80000 	.word	0x42c80000
 8000d9c:	c2c80000 	.word	0xc2c80000

08000da0 <Safety_Process_Analog_Sensors>:
 * @brief Process all analog sensors with comprehensive error handling
 * @param None
 * @return HAL_StatusTypeDef Overall processing status
 */
HAL_StatusTypeDef Safety_Process_Analog_Sensors(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef overall_status = HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	73bb      	strb	r3, [r7, #14]
    uint32_t current_time = HAL_GetTick();
 8000daa:	f001 f9a5 	bl	80020f8 <HAL_GetTick>
 8000dae:	60b8      	str	r0, [r7, #8]
    uint16_t distance;
    uint8_t i;
    
    // Process each analog sensor
    for (i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e0b0      	b.n	8000f18 <Safety_Process_Analog_Sensors+0x178>
        if (g_analog_sensors[i].sensor_active) {
 8000db6:	7bfa      	ldrb	r2, [r7, #15]
 8000db8:	495c      	ldr	r1, [pc, #368]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80a2 	beq.w	8000f12 <Safety_Process_Analog_Sensors+0x172>
            // Read sensor value
            distance = Safety_Convert_To_Distance(i);
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff7d 	bl	8000cd0 <Safety_Convert_To_Distance>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fca3 	bl	8000724 <__aeabi_f2uiz>
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
            
            // Kiểm tra các ngưỡng khoảng cách cho từng cảm biến
            if(distance == 0) {
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d114      	bne.n	8000e12 <Safety_Process_Analog_Sensors+0x72>
                // Cảm biến không hoạt động hoặc lỗi
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_ERROR;
 8000de8:	7bfa      	ldrb	r2, [r7, #15]
 8000dea:	4950      	ldr	r1, [pc, #320]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000dec:	4613      	mov	r3, r2
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	1a9b      	subs	r3, r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	440b      	add	r3, r1
 8000df6:	332c      	adds	r3, #44	@ 0x2c
 8000df8:	2204      	movs	r2, #4
 8000dfa:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x01;
 8000dfc:	7bfa      	ldrb	r2, [r7, #15]
 8000dfe:	494b      	ldr	r1, [pc, #300]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000e00:	4613      	mov	r3, r2
 8000e02:	011b      	lsls	r3, r3, #4
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	332d      	adds	r3, #45	@ 0x2d
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e07f      	b.n	8000f12 <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE1_THRESHOLD]) {
 8000e12:	4b47      	ldr	r3, [pc, #284]	@ (8000f30 <Safety_Process_Analog_Sensors+0x190>)
 8000e14:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8000e18:	88fa      	ldrh	r2, [r7, #6]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d814      	bhi.n	8000e48 <Safety_Process_Analog_Sensors+0xa8>
                // Vùng nguy hiểm 1 - Nguy hiểm cao nhất
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_CRITICAL;
 8000e1e:	7bfa      	ldrb	r2, [r7, #15]
 8000e20:	4942      	ldr	r1, [pc, #264]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000e22:	4613      	mov	r3, r2
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	332c      	adds	r3, #44	@ 0x2c
 8000e2e:	2202      	movs	r2, #2
 8000e30:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x08;
 8000e32:	7bfa      	ldrb	r2, [r7, #15]
 8000e34:	493d      	ldr	r1, [pc, #244]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000e36:	4613      	mov	r3, r2
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	332d      	adds	r3, #45	@ 0x2d
 8000e42:	2208      	movs	r2, #8
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e064      	b.n	8000f12 <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE2_THRESHOLD]) {
 8000e48:	4b39      	ldr	r3, [pc, #228]	@ (8000f30 <Safety_Process_Analog_Sensors+0x190>)
 8000e4a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d814      	bhi.n	8000e7e <Safety_Process_Analog_Sensors+0xde>
                // Vùng nguy hiểm 2 - Cảnh báo cao
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_WARNING;
 8000e54:	7bfa      	ldrb	r2, [r7, #15]
 8000e56:	4935      	ldr	r1, [pc, #212]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000e58:	4613      	mov	r3, r2
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	332c      	adds	r3, #44	@ 0x2c
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x04;
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	4930      	ldr	r1, [pc, #192]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	1a9b      	subs	r3, r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	332d      	adds	r3, #45	@ 0x2d
 8000e78:	2204      	movs	r2, #4
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e049      	b.n	8000f12 <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE3_THRESHOLD]) {
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f30 <Safety_Process_Analog_Sensors+0x190>)
 8000e80:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8000e84:	88fa      	ldrh	r2, [r7, #6]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d814      	bhi.n	8000eb4 <Safety_Process_Analog_Sensors+0x114>
                // Vùng nguy hiểm 3 - Cảnh báo trung bình
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_WARNING;
 8000e8a:	7bfa      	ldrb	r2, [r7, #15]
 8000e8c:	4927      	ldr	r1, [pc, #156]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000e8e:	4613      	mov	r3, r2
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	332c      	adds	r3, #44	@ 0x2c
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x02;
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	4922      	ldr	r1, [pc, #136]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	332d      	adds	r3, #45	@ 0x2d
 8000eae:	2202      	movs	r2, #2
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e02e      	b.n	8000f12 <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE4_THRESHOLD]) {
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <Safety_Process_Analog_Sensors+0x190>)
 8000eb6:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8000eba:	88fa      	ldrh	r2, [r7, #6]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d814      	bhi.n	8000eea <Safety_Process_Analog_Sensors+0x14a>
                // Vùng nguy hiểm 4 - Cảnh báo thấp
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_OK;
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	491a      	ldr	r1, [pc, #104]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	332c      	adds	r3, #44	@ 0x2c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x01;
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	4915      	ldr	r1, [pc, #84]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000ed8:	4613      	mov	r3, r2
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	1a9b      	subs	r3, r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	332d      	adds	r3, #45	@ 0x2d
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e013      	b.n	8000f12 <Safety_Process_Analog_Sensors+0x172>
            }
            else {
                // Khoảng cách an toàn
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_OK;
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	490f      	ldr	r1, [pc, #60]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000eee:	4613      	mov	r3, r2
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	332c      	adds	r3, #44	@ 0x2c
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0;
 8000efe:	7bfa      	ldrb	r2, [r7, #15]
 8000f00:	490a      	ldr	r1, [pc, #40]	@ (8000f2c <Safety_Process_Analog_Sensors+0x18c>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	011b      	lsls	r3, r3, #4
 8000f06:	1a9b      	subs	r3, r3, r2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	332d      	adds	r3, #45	@ 0x2d
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	3301      	adds	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	f67f af4b 	bls.w	8000db6 <Safety_Process_Analog_Sensors+0x16>
            }
        }
    }
    
    return overall_status;
 8000f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000098 	.word	0x20000098
 8000f30:	20000210 	.word	0x20000210

08000f34 <Safety_Process_Digital_Sensors>:

HAL_StatusTypeDef Safety_Process_Digital_Sensors(void){
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef overall_status = HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71bb      	strb	r3, [r7, #6]
    uint32_t current_time = HAL_GetTick();
 8000f3e:	f001 f8db 	bl	80020f8 <HAL_GetTick>
 8000f42:	6038      	str	r0, [r7, #0]
    uint8_t i;
    
    for (i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	e050      	b.n	8000fec <Safety_Process_Digital_Sensors+0xb8>
        if (g_digital_sensors[i].sensor_active) {
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000f4e:	015b      	lsls	r3, r3, #5
 8000f50:	4413      	add	r3, r2
 8000f52:	3301      	adds	r3, #1
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d045      	beq.n	8000fe6 <Safety_Process_Digital_Sensors+0xb2>
            // Read sensor value
            g_digital_sensors[i].sensor_value = Safety_Get_Digital_State(i);
 8000f5a:	79fc      	ldrb	r4, [r7, #7]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe62 	bl	8000c28 <Safety_Get_Digital_State>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4a24      	ldr	r2, [pc, #144]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000f6a:	0163      	lsls	r3, r4, #5
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3302      	adds	r3, #2
 8000f70:	460a      	mov	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]
            if(g_digital_sensors[i].sensor_value == g_digital_sensors[i].active_level) {
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000f78:	015b      	lsls	r3, r3, #5
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	781a      	ldrb	r2, [r3, #0]
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	491e      	ldr	r1, [pc, #120]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000f84:	015b      	lsls	r3, r3, #5
 8000f86:	440b      	add	r3, r1
 8000f88:	3305      	adds	r3, #5
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d115      	bne.n	8000fbc <Safety_Process_Digital_Sensors+0x88>
                g_digital_sensors[i].sensor_status = SENSOR_STATUS_CRITICAL;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4a1a      	ldr	r2, [pc, #104]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000f94:	015b      	lsls	r3, r3, #5
 8000f96:	4413      	add	r3, r2
 8000f98:	3310      	adds	r3, #16
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].sensor_state = 1;
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	4a16      	ldr	r2, [pc, #88]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000fa2:	015b      	lsls	r3, r3, #5
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3306      	adds	r3, #6
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].alarm_flags = 0x08;
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	4a13      	ldr	r2, [pc, #76]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000fb0:	015b      	lsls	r3, r3, #5
 8000fb2:	4413      	add	r3, r2
 8000fb4:	331c      	adds	r3, #28
 8000fb6:	2208      	movs	r2, #8
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e014      	b.n	8000fe6 <Safety_Process_Digital_Sensors+0xb2>
            }
            else {
                g_digital_sensors[i].sensor_status = SENSOR_STATUS_OK;
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	4413      	add	r3, r2
 8000fc4:	3310      	adds	r3, #16
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].sensor_state = 0;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000fce:	015b      	lsls	r3, r3, #5
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3306      	adds	r3, #6
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].alarm_flags = 0;
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <Safety_Process_Digital_Sensors+0xc8>)
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	4413      	add	r3, r2
 8000fe0:	331c      	adds	r3, #28
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	71fb      	strb	r3, [r7, #7]
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d9ab      	bls.n	8000f4a <Safety_Process_Digital_Sensors+0x16>
            }
        }
    }
    
    return overall_status;
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd90      	pop	{r4, r7, pc}
 8000ffc:	20000188 	.word	0x20000188

08001000 <initializeModbusRegisters>:
uint32_t g_corruptionCount = 0;
uint8_t g_receivedIndex = 0;



void initializeModbusRegisters(void) {
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
    // Initialize all registers to default values
    
    // System Registers (0x00F0-0x00F6)
    g_holdingRegisters[REG_DEVICE_ID] = DEFAULT_DEVICE_ID;  
 8001006:	4b57      	ldr	r3, [pc, #348]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001008:	2205      	movs	r2, #5
 800100a:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    g_holdingRegisters[REG_CONFIG_BAUDRATE] = DEFAULT_CONFIG_BAUDRATE;
 800100e:	4b55      	ldr	r3, [pc, #340]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001010:	2205      	movs	r2, #5
 8001012:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    g_holdingRegisters[REG_CONFIG_PARITY] = DEFAULT_CONFIG_PARITY;
 8001016:	4b53      	ldr	r3, [pc, #332]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001018:	2200      	movs	r2, #0
 800101a:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    g_holdingRegisters[REG_CONFIG_STOP_BIT] = DEFAULT_CONFIG_STOP_BIT;
 800101e:	4b51      	ldr	r3, [pc, #324]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001020:	2201      	movs	r2, #1
 8001022:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    g_holdingRegisters[REG_MODULE_TYPE] = DEFAULT_MODULE_TYPE;
 8001026:	4b4f      	ldr	r3, [pc, #316]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001028:	2206      	movs	r2, #6
 800102a:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
    g_holdingRegisters[REG_FIRMWARE_VERSION] = DEFAULT_FIRMWARE_VERSION;
 800102e:	4b4d      	ldr	r3, [pc, #308]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001030:	2201      	movs	r2, #1
 8001032:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
    g_holdingRegisters[REG_HARDWARE_VERSION] = DEFAULT_HARDWARE_VERSION;
 8001036:	4b4b      	ldr	r3, [pc, #300]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001038:	2201      	movs	r2, #1
 800103a:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
    g_holdingRegisters[REG_SYSTEM_STATUS] = DEFAULT_SYSTEM_STATUS;
 800103e:	4b49      	ldr	r3, [pc, #292]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001040:	2200      	movs	r2, #0
 8001042:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
    g_holdingRegisters[REG_SYSTEM_ERROR] = DEFAULT_SYSTEM_ERROR;
 8001046:	4b47      	ldr	r3, [pc, #284]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001048:	2200      	movs	r2, #0
 800104a:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    g_holdingRegisters[REG_RESET_ERROR_COMMAND] = DEFAULT_RESET_ERROR_COMMAND;
 800104e:	4b45      	ldr	r3, [pc, #276]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001050:	2200      	movs	r2, #0
 8001052:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
    
    // Safety Module Registers (0x0000-0x000C)
    g_holdingRegisters[REG_ANALOG_1_ENABLE] = DEFAULT_ANALOG_1_ENABLE;
 8001056:	4b43      	ldr	r3, [pc, #268]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001058:	2200      	movs	r2, #0
 800105a:	869a      	strh	r2, [r3, #52]	@ 0x34
    g_holdingRegisters[REG_ANALOG_2_ENABLE] = DEFAULT_ANALOG_2_ENABLE;
 800105c:	4b41      	ldr	r3, [pc, #260]	@ (8001164 <initializeModbusRegisters+0x164>)
 800105e:	2200      	movs	r2, #0
 8001060:	86da      	strh	r2, [r3, #54]	@ 0x36
    g_holdingRegisters[REG_ANALOG_3_ENABLE] = DEFAULT_ANALOG_3_ENABLE;
 8001062:	4b40      	ldr	r3, [pc, #256]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001064:	2200      	movs	r2, #0
 8001066:	871a      	strh	r2, [r3, #56]	@ 0x38
    g_holdingRegisters[REG_ANALOG_4_ENABLE] = DEFAULT_ANALOG_4_ENABLE;
 8001068:	4b3e      	ldr	r3, [pc, #248]	@ (8001164 <initializeModbusRegisters+0x164>)
 800106a:	2200      	movs	r2, #0
 800106c:	875a      	strh	r2, [r3, #58]	@ 0x3a
    g_holdingRegisters[REG_ANALOG_COEFFICIENT] = DEFAULT_ANALOG_COEFFICIENT;
 800106e:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001070:	f640 22e2 	movw	r2, #2786	@ 0xae2
 8001074:	851a      	strh	r2, [r3, #40]	@ 0x28
    g_holdingRegisters[REG_ANALOG_CALIBRATION] = DEFAULT_ANALOG_CALIBRATION;
 8001076:	4b3b      	ldr	r3, [pc, #236]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001078:	2273      	movs	r2, #115	@ 0x73
 800107a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    g_holdingRegisters[REG_DI1_ENABLE] = DEFAULT_DI1_ENABLE;
 800107c:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <initializeModbusRegisters+0x164>)
 800107e:	2200      	movs	r2, #0
 8001080:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    g_holdingRegisters[REG_DI2_ENABLE] = DEFAULT_DI2_ENABLE;
 8001084:	4b37      	ldr	r3, [pc, #220]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001086:	2200      	movs	r2, #0
 8001088:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    g_holdingRegisters[REG_DI3_ENABLE] = DEFAULT_DI3_ENABLE;
 800108c:	4b35      	ldr	r3, [pc, #212]	@ (8001164 <initializeModbusRegisters+0x164>)
 800108e:	2200      	movs	r2, #0
 8001090:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    g_holdingRegisters[REG_DI4_ENABLE] = DEFAULT_DI4_ENABLE;
 8001094:	4b33      	ldr	r3, [pc, #204]	@ (8001164 <initializeModbusRegisters+0x164>)
 8001096:	2200      	movs	r2, #0
 8001098:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    g_holdingRegisters[REG_RELAY1_CONTROL] = DEFAULT_RELAY1_CONTROL;
 800109c:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <initializeModbusRegisters+0x164>)
 800109e:	2200      	movs	r2, #0
 80010a0:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    g_holdingRegisters[REG_RELAY2_CONTROL] = DEFAULT_RELAY2_CONTROL;
 80010a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    g_holdingRegisters[REG_RELAY3_CONTROL] = DEFAULT_RELAY3_CONTROL;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
    g_holdingRegisters[REG_RELAY4_CONTROL] = DEFAULT_RELAY4_CONTROL;
 80010b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    g_holdingRegisters[REG_SAFETY_ZONE1_THRESHOLD] = DEFAULT_SAFETY_ZONE1_THRESHOLD;
 80010bc:	4b29      	ldr	r3, [pc, #164]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010be:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010c2:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    g_holdingRegisters[REG_SAFETY_ZONE2_THRESHOLD] = DEFAULT_SAFETY_ZONE2_THRESHOLD;
 80010c6:	4b27      	ldr	r3, [pc, #156]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010cc:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    g_holdingRegisters[REG_SAFETY_ZONE3_THRESHOLD] = DEFAULT_SAFETY_ZONE3_THRESHOLD;
 80010d0:	4b24      	ldr	r3, [pc, #144]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80010d6:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
    g_holdingRegisters[REG_SAFETY_ZONE4_THRESHOLD] = DEFAULT_SAFETY_ZONE4_THRESHOLD;
 80010da:	4b22      	ldr	r3, [pc, #136]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010dc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010e0:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
    g_holdingRegisters[REG_PROXIMITY_THRESHOLD] = DEFAULT_PROXIMITY_THRESHOLD;
 80010e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010e6:	2264      	movs	r2, #100	@ 0x64
 80010e8:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    g_holdingRegisters[REG_SAFETY_RESPONSE_TIME] = DEFAULT_SAFETY_RESPONSE_TIME;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010ee:	2232      	movs	r2, #50	@ 0x32
 80010f0:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
    g_holdingRegisters[REG_AUTO_RESET_ENABLE] = DEFAULT_AUTO_RESET_ENABLE;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
    g_holdingRegisters[REG_SAFETY_MODE] = DEFAULT_SAFETY_MODE;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <initializeModbusRegisters+0x164>)
 80010fe:	2201      	movs	r2, #1
 8001100:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
    

    // Initialize other arrays
    for (int i = 0; i < INPUT_REG_COUNT; i++) {
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e007      	b.n	800111a <initializeModbusRegisters+0x11a>
        g_inputRegisters[i] = 0;
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <initializeModbusRegisters+0x168>)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2100      	movs	r1, #0
 8001110:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < INPUT_REG_COUNT; i++) {
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b04      	cmp	r3, #4
 800111e:	ddf4      	ble.n	800110a <initializeModbusRegisters+0x10a>
    }
    
    for (int i = 0; i < COIL_COUNT; i++) {
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	e007      	b.n	8001136 <initializeModbusRegisters+0x136>
        g_coils[i] = 0;
 8001126:	4a11      	ldr	r2, [pc, #68]	@ (800116c <initializeModbusRegisters+0x16c>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	4413      	add	r3, r2
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < COIL_COUNT; i++) {
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b07      	cmp	r3, #7
 800113a:	ddf4      	ble.n	8001126 <initializeModbusRegisters+0x126>
    }
    
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	e007      	b.n	8001152 <initializeModbusRegisters+0x152>
        g_discreteInputs[i] = 0;
 8001142:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <initializeModbusRegisters+0x170>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4413      	add	r3, r2
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3301      	adds	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b03      	cmp	r3, #3
 8001156:	ddf4      	ble.n	8001142 <initializeModbusRegisters+0x142>
    }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20000210 	.word	0x20000210
 8001168:	20000468 	.word	0x20000468
 800116c:	20000474 	.word	0x20000474
 8001170:	2000047c 	.word	0x2000047c

08001174 <calcCRC>:


uint16_t calcCRC(uint8_t *buf, int len) {
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 800117e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001182:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	e026      	b.n	80011d8 <calcCRC+0x64>
        crc ^= (uint16_t)buf[pos];
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	4053      	eors	r3, r2
 8001198:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 800119a:	2308      	movs	r3, #8
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e015      	b.n	80011cc <calcCRC+0x58>
            if ((crc & 0x0001) != 0) {
 80011a0:	8afb      	ldrh	r3, [r7, #22]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d00a      	beq.n	80011c0 <calcCRC+0x4c>
                crc >>= 1;
 80011aa:	8afb      	ldrh	r3, [r7, #22]
 80011ac:	085b      	lsrs	r3, r3, #1
 80011ae:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80011b0:	8afb      	ldrh	r3, [r7, #22]
 80011b2:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80011b6:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80011ba:	43db      	mvns	r3, r3
 80011bc:	82fb      	strh	r3, [r7, #22]
 80011be:	e002      	b.n	80011c6 <calcCRC+0x52>
            } else {
                crc >>= 1;
 80011c0:	8afb      	ldrh	r3, [r7, #22]
 80011c2:	085b      	lsrs	r3, r3, #1
 80011c4:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1e6      	bne.n	80011a0 <calcCRC+0x2c>
    for (int pos = 0; pos < len; pos++) {
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	3301      	adds	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	dbd4      	blt.n	800118a <calcCRC+0x16>
            }
        }
    }
    return crc;
 80011e0:	8afb      	ldrh	r3, [r7, #22]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	371c      	adds	r7, #28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a2d      	ldr	r2, [pc, #180]	@ (80012b0 <HAL_UART_RxCpltCallback+0xc4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d154      	bne.n	80012a8 <HAL_UART_RxCpltCallback+0xbc>
        g_lastUARTActivity = HAL_GetTick();
 80011fe:	f000 ff7b 	bl	80020f8 <HAL_GetTick>
 8001202:	4603      	mov	r3, r0
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <HAL_UART_RxCpltCallback+0xc8>)
 8001206:	6013      	str	r3, [r2, #0]
        
        if (rxIndex < RX_BUFFER_SIZE - 1) {
 8001208:	4b2b      	ldr	r3, [pc, #172]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2bff      	cmp	r3, #255	@ 0xff
 800120e:	d03b      	beq.n	8001288 <HAL_UART_RxCpltCallback+0x9c>
            rxBuffer[rxIndex++] = huart->Instance->DR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6859      	ldr	r1, [r3, #4]
 8001216:	4b28      	ldr	r3, [pc, #160]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	b2d0      	uxtb	r0, r2
 800121e:	4a26      	ldr	r2, [pc, #152]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 8001220:	7010      	strb	r0, [r2, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	b2c9      	uxtb	r1, r1
 8001226:	4b25      	ldr	r3, [pc, #148]	@ (80012bc <HAL_UART_RxCpltCallback+0xd0>)
 8001228:	5499      	strb	r1, [r3, r2]
            frameReceived = 1;
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <HAL_UART_RxCpltCallback+0xd4>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
            
            if (rxIndex >= 6) {
 8001230:	4b21      	ldr	r3, [pc, #132]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b05      	cmp	r3, #5
 8001236:	d92d      	bls.n	8001294 <HAL_UART_RxCpltCallback+0xa8>
                uint8_t expectedLength = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
                if (rxBuffer[1] == 3 || rxBuffer[1] == 6) {
 800123c:	4b1f      	ldr	r3, [pc, #124]	@ (80012bc <HAL_UART_RxCpltCallback+0xd0>)
 800123e:	785b      	ldrb	r3, [r3, #1]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d003      	beq.n	800124c <HAL_UART_RxCpltCallback+0x60>
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <HAL_UART_RxCpltCallback+0xd0>)
 8001246:	785b      	ldrb	r3, [r3, #1]
 8001248:	2b06      	cmp	r3, #6
 800124a:	d102      	bne.n	8001252 <HAL_UART_RxCpltCallback+0x66>
                    expectedLength = 8;
 800124c:	2308      	movs	r3, #8
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e012      	b.n	8001278 <HAL_UART_RxCpltCallback+0x8c>
                } else if (rxBuffer[1] == 4) {
 8001252:	4b1a      	ldr	r3, [pc, #104]	@ (80012bc <HAL_UART_RxCpltCallback+0xd0>)
 8001254:	785b      	ldrb	r3, [r3, #1]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d102      	bne.n	8001260 <HAL_UART_RxCpltCallback+0x74>
                    expectedLength = 8;
 800125a:	2308      	movs	r3, #8
 800125c:	73fb      	strb	r3, [r7, #15]
 800125e:	e00b      	b.n	8001278 <HAL_UART_RxCpltCallback+0x8c>
                } else if (rxBuffer[1] == 16) {
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <HAL_UART_RxCpltCallback+0xd0>)
 8001262:	785b      	ldrb	r3, [r3, #1]
 8001264:	2b10      	cmp	r3, #16
 8001266:	d107      	bne.n	8001278 <HAL_UART_RxCpltCallback+0x8c>
                    if (rxIndex >= 7) {
 8001268:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b06      	cmp	r3, #6
 800126e:	d903      	bls.n	8001278 <HAL_UART_RxCpltCallback+0x8c>
                        expectedLength = 9 + rxBuffer[6];
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <HAL_UART_RxCpltCallback+0xd0>)
 8001272:	799b      	ldrb	r3, [r3, #6]
 8001274:	3309      	adds	r3, #9
 8001276:	73fb      	strb	r3, [r7, #15]
                    }
                }
                
                if (rxIndex >= expectedLength) {
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	7bfa      	ldrb	r2, [r7, #15]
 800127e:	429a      	cmp	r2, r3
 8001280:	d808      	bhi.n	8001294 <HAL_UART_RxCpltCallback+0xa8>
                    processModbusFrame();
 8001282:	f000 f865 	bl	8001350 <processModbusFrame>
 8001286:	e005      	b.n	8001294 <HAL_UART_RxCpltCallback+0xa8>
                }
            }
        } else {
            rxIndex = 0;
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
            frameReceived = 0;
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <HAL_UART_RxCpltCallback+0xd4>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_UART_RxCpltCallback+0xcc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <HAL_UART_RxCpltCallback+0xd0>)
 800129c:	4413      	add	r3, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	4619      	mov	r1, r3
 80012a2:	4808      	ldr	r0, [pc, #32]	@ (80012c4 <HAL_UART_RxCpltCallback+0xd8>)
 80012a4:	f003 f9cd 	bl	8004642 <HAL_UART_Receive_IT>
    }
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40004400 	.word	0x40004400
 80012b4:	20000588 	.word	0x20000588
 80012b8:	20000584 	.word	0x20000584
 80012bc:	20000484 	.word	0x20000484
 80012c0:	20000585 	.word	0x20000585
 80012c4:	20000648 	.word	0x20000648

080012c8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <HAL_UART_ErrorCallback+0x40>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d112      	bne.n	8001300 <HAL_UART_ErrorCallback+0x38>
        rxIndex = 0;
 80012da:	4b0c      	ldr	r3, [pc, #48]	@ (800130c <HAL_UART_ErrorCallback+0x44>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
        frameReceived = 0;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_UART_ErrorCallback+0x48>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
        HAL_UART_Abort(&huart2);
 80012e6:	480b      	ldr	r0, [pc, #44]	@ (8001314 <HAL_UART_ErrorCallback+0x4c>)
 80012e8:	f003 f9d0 	bl	800468c <HAL_UART_Abort>
        HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 80012ec:	4b07      	ldr	r3, [pc, #28]	@ (800130c <HAL_UART_ErrorCallback+0x44>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_UART_ErrorCallback+0x50>)
 80012f4:	4413      	add	r3, r2
 80012f6:	2201      	movs	r2, #1
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <HAL_UART_ErrorCallback+0x4c>)
 80012fc:	f003 f9a1 	bl	8004642 <HAL_UART_Receive_IT>
    }
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40004400 	.word	0x40004400
 800130c:	20000584 	.word	0x20000584
 8001310:	20000585 	.word	0x20000585
 8001314:	20000648 	.word	0x20000648
 8001318:	20000484 	.word	0x20000484

0800131c <resetUARTCommunication>:

void resetUARTCommunication(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart2);
 8001320:	4807      	ldr	r0, [pc, #28]	@ (8001340 <resetUARTCommunication+0x24>)
 8001322:	f003 f9b3 	bl	800468c <HAL_UART_Abort>
    rxIndex = 0;
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <resetUARTCommunication+0x28>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
    frameReceived = 0;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <resetUARTCommunication+0x2c>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, &rxBuffer[0], 1);
 8001332:	2201      	movs	r2, #1
 8001334:	4905      	ldr	r1, [pc, #20]	@ (800134c <resetUARTCommunication+0x30>)
 8001336:	4802      	ldr	r0, [pc, #8]	@ (8001340 <resetUARTCommunication+0x24>)
 8001338:	f003 f983 	bl	8004642 <HAL_UART_Receive_IT>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000648 	.word	0x20000648
 8001344:	20000584 	.word	0x20000584
 8001348:	20000585 	.word	0x20000585
 800134c:	20000484 	.word	0x20000484

08001350 <processModbusFrame>:

void processModbusFrame(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b0ca      	sub	sp, #296	@ 0x128
 8001354:	af00      	add	r7, sp, #0
    if (rxIndex < 6) return;
 8001356:	4ba2      	ldr	r3, [pc, #648]	@ (80015e0 <processModbusFrame+0x290>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b05      	cmp	r3, #5
 800135c:	f240 8299 	bls.w	8001892 <processModbusFrame+0x542>
    if (rxBuffer[0] != MODBUS_SLAVE_ADDRESS) return;
 8001360:	4ba0      	ldr	r3, [pc, #640]	@ (80015e4 <processModbusFrame+0x294>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b05      	cmp	r3, #5
 8001366:	f040 8296 	bne.w	8001896 <processModbusFrame+0x546>

    uint16_t crc = calcCRC(rxBuffer, rxIndex - 2);
 800136a:	4b9d      	ldr	r3, [pc, #628]	@ (80015e0 <processModbusFrame+0x290>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	3b02      	subs	r3, #2
 8001370:	4619      	mov	r1, r3
 8001372:	489c      	ldr	r0, [pc, #624]	@ (80015e4 <processModbusFrame+0x294>)
 8001374:	f7ff fefe 	bl	8001174 <calcCRC>
 8001378:	4603      	mov	r3, r0
 800137a:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    if (rxBuffer[rxIndex - 2] != (crc & 0xFF) || rxBuffer[rxIndex - 1] != (crc >> 8)) {
 800137e:	4b98      	ldr	r3, [pc, #608]	@ (80015e0 <processModbusFrame+0x290>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	3b02      	subs	r3, #2
 8001384:	4a97      	ldr	r2, [pc, #604]	@ (80015e4 <processModbusFrame+0x294>)
 8001386:	5cd3      	ldrb	r3, [r2, r3]
 8001388:	461a      	mov	r2, r3
 800138a:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800138e:	b2db      	uxtb	r3, r3
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8282 	bne.w	800189a <processModbusFrame+0x54a>
 8001396:	4b92      	ldr	r3, [pc, #584]	@ (80015e0 <processModbusFrame+0x290>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	3b01      	subs	r3, #1
 800139c:	4a91      	ldr	r2, [pc, #580]	@ (80015e4 <processModbusFrame+0x294>)
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	461a      	mov	r2, r3
 80013a2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80013a6:	0a1b      	lsrs	r3, r3, #8
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f040 8275 	bne.w	800189a <processModbusFrame+0x54a>
        return;
    }

    uint8_t funcCode = rxBuffer[1];
 80013b0:	4b8c      	ldr	r3, [pc, #560]	@ (80015e4 <processModbusFrame+0x294>)
 80013b2:	785b      	ldrb	r3, [r3, #1]
 80013b4:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
    uint8_t txBuffer[256];
    uint8_t txIndex = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    txBuffer[0] = MODBUS_SLAVE_ADDRESS;
 80013be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013c6:	2205      	movs	r2, #5
 80013c8:	701a      	strb	r2, [r3, #0]
    txBuffer[1] = funcCode;
 80013ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013d2:	f897 2115 	ldrb.w	r2, [r7, #277]	@ 0x115
 80013d6:	705a      	strb	r2, [r3, #1]

    if (funcCode == 3) {
 80013d8:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d17d      	bne.n	80014dc <processModbusFrame+0x18c>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 80013e0:	4b80      	ldr	r3, [pc, #512]	@ (80015e4 <processModbusFrame+0x294>)
 80013e2:	789b      	ldrb	r3, [r3, #2]
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	4b7e      	ldr	r3, [pc, #504]	@ (80015e4 <processModbusFrame+0x294>)
 80013ec:	78db      	ldrb	r3, [r3, #3]
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 80013f8:	4b7a      	ldr	r3, [pc, #488]	@ (80015e4 <processModbusFrame+0x294>)
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21a      	sxth	r2, r3
 8001402:	4b78      	ldr	r3, [pc, #480]	@ (80015e4 <processModbusFrame+0x294>)
 8001404:	795b      	ldrb	r3, [r3, #5]
 8001406:	b21b      	sxth	r3, r3
 8001408:	4313      	orrs	r3, r2
 800140a:	b21b      	sxth	r3, r3
 800140c:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
        if (addr + qty <= HOLDING_REG_COUNT) {
 8001410:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8001414:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001418:	4413      	add	r3, r2
 800141a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800141e:	dc46      	bgt.n	80014ae <processModbusFrame+0x15e>
            txBuffer[2] = qty * 2;
 8001420:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001424:	b2db      	uxtb	r3, r3
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800142e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001432:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001434:	2303      	movs	r3, #3
 8001436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            for (int i = 0; i < qty; i++) {
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001440:	e02e      	b.n	80014a0 <processModbusFrame+0x150>
                txBuffer[txIndex++] = g_holdingRegisters[addr + i] >> 8;
 8001442:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8001446:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800144a:	4413      	add	r3, r2
 800144c:	4a66      	ldr	r2, [pc, #408]	@ (80015e8 <processModbusFrame+0x298>)
 800144e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b299      	uxth	r1, r3
 8001456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001460:	461a      	mov	r2, r3
 8001462:	b2c9      	uxtb	r1, r1
 8001464:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001468:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800146c:	5499      	strb	r1, [r3, r2]
                txBuffer[txIndex++] = g_holdingRegisters[addr + i] & 0xFF;
 800146e:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8001472:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001476:	4413      	add	r3, r2
 8001478:	4a5b      	ldr	r2, [pc, #364]	@ (80015e8 <processModbusFrame+0x298>)
 800147a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800147e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001488:	461a      	mov	r2, r3
 800148a:	b2c9      	uxtb	r1, r1
 800148c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001490:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001494:	5499      	strb	r1, [r3, r2]
            for (int i = 0; i < qty; i++) {
 8001496:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800149a:	3301      	adds	r3, #1
 800149c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80014a0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 80014a4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbca      	blt.n	8001442 <processModbusFrame+0xf2>
 80014ac:	e1b4      	b.n	8001818 <processModbusFrame+0x4c8>
            }
        } else {
            txBuffer[1] |= 0x80;
 80014ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014b6:	785b      	ldrb	r3, [r3, #1]
 80014b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014c6:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 80014c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014d0:	2202      	movs	r2, #2
 80014d2:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80014d4:	2303      	movs	r3, #3
 80014d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80014da:	e19d      	b.n	8001818 <processModbusFrame+0x4c8>
        }
    } else if (funcCode == 4) {
 80014dc:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	f040 8085 	bne.w	80015f0 <processModbusFrame+0x2a0>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 80014e6:	4b3f      	ldr	r3, [pc, #252]	@ (80015e4 <processModbusFrame+0x294>)
 80014e8:	789b      	ldrb	r3, [r3, #2]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	4b3c      	ldr	r3, [pc, #240]	@ (80015e4 <processModbusFrame+0x294>)
 80014f2:	78db      	ldrb	r3, [r3, #3]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 80014fe:	4b39      	ldr	r3, [pc, #228]	@ (80015e4 <processModbusFrame+0x294>)
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	b21b      	sxth	r3, r3
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	4b36      	ldr	r3, [pc, #216]	@ (80015e4 <processModbusFrame+0x294>)
 800150a:	795b      	ldrb	r3, [r3, #5]
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        if (addr + qty <= INPUT_REG_COUNT) {
 8001516:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 800151a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800151e:	4413      	add	r3, r2
 8001520:	2b05      	cmp	r3, #5
 8001522:	dc46      	bgt.n	80015b2 <processModbusFrame+0x262>
            txBuffer[2] = qty * 2;
 8001524:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001528:	b2db      	uxtb	r3, r3
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001532:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001536:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001538:	2303      	movs	r3, #3
 800153a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            for (int i = 0; i < qty; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001544:	e02e      	b.n	80015a4 <processModbusFrame+0x254>
                txBuffer[txIndex++] = g_inputRegisters[addr + i] >> 8;
 8001546:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 800154a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800154e:	4413      	add	r3, r2
 8001550:	4a26      	ldr	r2, [pc, #152]	@ (80015ec <processModbusFrame+0x29c>)
 8001552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	b299      	uxth	r1, r3
 800155a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001564:	461a      	mov	r2, r3
 8001566:	b2c9      	uxtb	r1, r1
 8001568:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800156c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001570:	5499      	strb	r1, [r3, r2]
                txBuffer[txIndex++] = g_inputRegisters[addr + i] & 0xFF;
 8001572:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 8001576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800157a:	4413      	add	r3, r2
 800157c:	4a1b      	ldr	r2, [pc, #108]	@ (80015ec <processModbusFrame+0x29c>)
 800157e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001586:	1c5a      	adds	r2, r3, #1
 8001588:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 800158c:	461a      	mov	r2, r3
 800158e:	b2c9      	uxtb	r1, r1
 8001590:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001594:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001598:	5499      	strb	r1, [r3, r2]
            for (int i = 0; i < qty; i++) {
 800159a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800159e:	3301      	adds	r3, #1
 80015a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80015a4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80015a8:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbca      	blt.n	8001546 <processModbusFrame+0x1f6>
 80015b0:	e132      	b.n	8001818 <processModbusFrame+0x4c8>
            }
        } else {
            txBuffer[1] |= 0x80;
 80015b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80015b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80015c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ca:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 80015cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80015d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015d4:	2202      	movs	r2, #2
 80015d6:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80015d8:	2303      	movs	r3, #3
 80015da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80015de:	e11b      	b.n	8001818 <processModbusFrame+0x4c8>
 80015e0:	20000584 	.word	0x20000584
 80015e4:	20000484 	.word	0x20000484
 80015e8:	20000210 	.word	0x20000210
 80015ec:	20000468 	.word	0x20000468
        }
    } else if (funcCode == 6) {
 80015f0:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80015f4:	2b06      	cmp	r3, #6
 80015f6:	d168      	bne.n	80016ca <processModbusFrame+0x37a>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 80015f8:	4baa      	ldr	r3, [pc, #680]	@ (80018a4 <processModbusFrame+0x554>)
 80015fa:	789b      	ldrb	r3, [r3, #2]
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	b21a      	sxth	r2, r3
 8001602:	4ba8      	ldr	r3, [pc, #672]	@ (80018a4 <processModbusFrame+0x554>)
 8001604:	78db      	ldrb	r3, [r3, #3]
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21b      	sxth	r3, r3
 800160c:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
        uint16_t value = (rxBuffer[4] << 8) | rxBuffer[5];
 8001610:	4ba4      	ldr	r3, [pc, #656]	@ (80018a4 <processModbusFrame+0x554>)
 8001612:	791b      	ldrb	r3, [r3, #4]
 8001614:	b21b      	sxth	r3, r3
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	4ba2      	ldr	r3, [pc, #648]	@ (80018a4 <processModbusFrame+0x554>)
 800161c:	795b      	ldrb	r3, [r3, #5]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        if (addr < HOLDING_REG_COUNT) {
 8001628:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 800162c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001630:	d234      	bcs.n	800169c <processModbusFrame+0x34c>
            g_holdingRegisters[addr] = value;
 8001632:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8001636:	499c      	ldr	r1, [pc, #624]	@ (80018a8 <processModbusFrame+0x558>)
 8001638:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 800163c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            
            // Handle special register writes
            if (addr == REG_RESET_ERROR_COMMAND && value == 1) {
 8001640:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8001644:	f240 1209 	movw	r2, #265	@ 0x109
 8001648:	4293      	cmp	r3, r2
 800164a:	d107      	bne.n	800165c <processModbusFrame+0x30c>
 800164c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8001650:	2b01      	cmp	r3, #1
 8001652:	d103      	bne.n	800165c <processModbusFrame+0x30c>
                g_holdingRegisters[REG_SYSTEM_ERROR] = 0;
 8001654:	4b94      	ldr	r3, [pc, #592]	@ (80018a8 <processModbusFrame+0x558>)
 8001656:	2200      	movs	r2, #0
 8001658:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
            }
            
            txBuffer[2] = rxBuffer[2];
 800165c:	4b91      	ldr	r3, [pc, #580]	@ (80018a4 <processModbusFrame+0x554>)
 800165e:	789a      	ldrb	r2, [r3, #2]
 8001660:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001664:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001668:	709a      	strb	r2, [r3, #2]
            txBuffer[3] = rxBuffer[3];
 800166a:	4b8e      	ldr	r3, [pc, #568]	@ (80018a4 <processModbusFrame+0x554>)
 800166c:	78da      	ldrb	r2, [r3, #3]
 800166e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001672:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001676:	70da      	strb	r2, [r3, #3]
            txBuffer[4] = rxBuffer[4];
 8001678:	4b8a      	ldr	r3, [pc, #552]	@ (80018a4 <processModbusFrame+0x554>)
 800167a:	791a      	ldrb	r2, [r3, #4]
 800167c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001680:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001684:	711a      	strb	r2, [r3, #4]
            txBuffer[5] = rxBuffer[5];
 8001686:	4b87      	ldr	r3, [pc, #540]	@ (80018a4 <processModbusFrame+0x554>)
 8001688:	795a      	ldrb	r2, [r3, #5]
 800168a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800168e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001692:	715a      	strb	r2, [r3, #5]
            txIndex = 6;
 8001694:	2306      	movs	r3, #6
 8001696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800169a:	e0bd      	b.n	8001818 <processModbusFrame+0x4c8>
        } else {
            txBuffer[1] |= 0x80;
 800169c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016a4:	785b      	ldrb	r3, [r3, #1]
 80016a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016b4:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 80016b6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016be:	2202      	movs	r2, #2
 80016c0:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80016c2:	2303      	movs	r3, #3
 80016c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80016c8:	e0a6      	b.n	8001818 <processModbusFrame+0x4c8>
        }
    } else if (funcCode == 16) {
 80016ca:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 80016ce:	2b10      	cmp	r3, #16
 80016d0:	f040 808c 	bne.w	80017ec <processModbusFrame+0x49c>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 80016d4:	4b73      	ldr	r3, [pc, #460]	@ (80018a4 <processModbusFrame+0x554>)
 80016d6:	789b      	ldrb	r3, [r3, #2]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4b71      	ldr	r3, [pc, #452]	@ (80018a4 <processModbusFrame+0x554>)
 80016e0:	78db      	ldrb	r3, [r3, #3]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21b      	sxth	r3, r3
 80016e8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 80016ec:	4b6d      	ldr	r3, [pc, #436]	@ (80018a4 <processModbusFrame+0x554>)
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b6b      	ldr	r3, [pc, #428]	@ (80018a4 <processModbusFrame+0x554>)
 80016f8:	795b      	ldrb	r3, [r3, #5]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	4313      	orrs	r3, r2
 80016fe:	b21b      	sxth	r3, r3
 8001700:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        uint8_t byteCount = rxBuffer[6];
 8001704:	4b67      	ldr	r3, [pc, #412]	@ (80018a4 <processModbusFrame+0x554>)
 8001706:	799b      	ldrb	r3, [r3, #6]
 8001708:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        if (addr + qty <= HOLDING_REG_COUNT && byteCount == qty * 2) {
 800170c:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8001710:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8001714:	4413      	add	r3, r2
 8001716:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800171a:	dc50      	bgt.n	80017be <processModbusFrame+0x46e>
 800171c:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 8001720:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	429a      	cmp	r2, r3
 8001728:	d149      	bne.n	80017be <processModbusFrame+0x46e>
            for (int i = 0; i < qty; i++) {
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001730:	e01f      	b.n	8001772 <processModbusFrame+0x422>
                g_holdingRegisters[addr + i] = (rxBuffer[7 + i*2] << 8) | rxBuffer[8 + i*2];
 8001732:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	3307      	adds	r3, #7
 800173a:	4a5a      	ldr	r2, [pc, #360]	@ (80018a4 <processModbusFrame+0x554>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	b21b      	sxth	r3, r3
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	b21a      	sxth	r2, r3
 8001744:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001748:	3304      	adds	r3, #4
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4955      	ldr	r1, [pc, #340]	@ (80018a4 <processModbusFrame+0x554>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	b219      	sxth	r1, r3
 8001756:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 800175a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800175e:	4413      	add	r3, r2
 8001760:	b289      	uxth	r1, r1
 8001762:	4a51      	ldr	r2, [pc, #324]	@ (80018a8 <processModbusFrame+0x558>)
 8001764:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int i = 0; i < qty; i++) {
 8001768:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800176c:	3301      	adds	r3, #1
 800176e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001772:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8001776:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800177a:	429a      	cmp	r2, r3
 800177c:	dbd9      	blt.n	8001732 <processModbusFrame+0x3e2>
            }
            txBuffer[2] = rxBuffer[2];
 800177e:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <processModbusFrame+0x554>)
 8001780:	789a      	ldrb	r2, [r3, #2]
 8001782:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001786:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800178a:	709a      	strb	r2, [r3, #2]
            txBuffer[3] = rxBuffer[3];
 800178c:	4b45      	ldr	r3, [pc, #276]	@ (80018a4 <processModbusFrame+0x554>)
 800178e:	78da      	ldrb	r2, [r3, #3]
 8001790:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001794:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001798:	70da      	strb	r2, [r3, #3]
            txBuffer[4] = rxBuffer[4];
 800179a:	4b42      	ldr	r3, [pc, #264]	@ (80018a4 <processModbusFrame+0x554>)
 800179c:	791a      	ldrb	r2, [r3, #4]
 800179e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017a6:	711a      	strb	r2, [r3, #4]
            txBuffer[5] = rxBuffer[5];
 80017a8:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <processModbusFrame+0x554>)
 80017aa:	795a      	ldrb	r2, [r3, #5]
 80017ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017b4:	715a      	strb	r2, [r3, #5]
            txIndex = 6;
 80017b6:	2306      	movs	r3, #6
 80017b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80017bc:	e02c      	b.n	8001818 <processModbusFrame+0x4c8>
        } else {
            txBuffer[1] |= 0x80;
 80017be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017d6:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 80017d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017e0:	2202      	movs	r2, #2
 80017e2:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80017e4:	2303      	movs	r3, #3
 80017e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80017ea:	e015      	b.n	8001818 <processModbusFrame+0x4c8>
        }
    } else {
        txBuffer[1] |= 0x80;
 80017ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001800:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001804:	705a      	strb	r2, [r3, #1]
        txBuffer[2] = 0x01;
 8001806:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800180a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800180e:	2201      	movs	r2, #1
 8001810:	709a      	strb	r2, [r3, #2]
        txIndex = 3;
 8001812:	2303      	movs	r3, #3
 8001814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    }

    crc = calcCRC(txBuffer, txIndex);
 8001818:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 800181c:	463b      	mov	r3, r7
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fca7 	bl	8001174 <calcCRC>
 8001826:	4603      	mov	r3, r0
 8001828:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    txBuffer[txIndex++] = crc & 0xFF;
 800182c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001836:	461a      	mov	r2, r3
 8001838:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800183c:	b2d9      	uxtb	r1, r3
 800183e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001842:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001846:	5499      	strb	r1, [r3, r2]
    txBuffer[txIndex++] = crc >> 8;
 8001848:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	b299      	uxth	r1, r3
 8001850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 800185a:	461a      	mov	r2, r3
 800185c:	b2c9      	uxtb	r1, r1
 800185e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001862:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001866:	5499      	strb	r1, [r3, r2]
    
    if (HAL_UART_Transmit(&huart2, txBuffer, txIndex, 100) != HAL_OK) {
 8001868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800186c:	b29a      	uxth	r2, r3
 800186e:	4639      	mov	r1, r7
 8001870:	2364      	movs	r3, #100	@ 0x64
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <processModbusFrame+0x55c>)
 8001874:	f002 fe5a 	bl	800452c <HAL_UART_Transmit>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <processModbusFrame+0x534>
        HAL_UART_Abort(&huart2);
 800187e:	480b      	ldr	r0, [pc, #44]	@ (80018ac <processModbusFrame+0x55c>)
 8001880:	f002 ff04 	bl	800468c <HAL_UART_Abort>

    } else {
    }
    
    rxIndex = 0;
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <processModbusFrame+0x560>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
    frameReceived = 0;
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <processModbusFrame+0x564>)
 800188c:	2200      	movs	r2, #0
 800188e:	701a      	strb	r2, [r3, #0]
 8001890:	e004      	b.n	800189c <processModbusFrame+0x54c>
    if (rxIndex < 6) return;
 8001892:	bf00      	nop
 8001894:	e002      	b.n	800189c <processModbusFrame+0x54c>
    if (rxBuffer[0] != MODBUS_SLAVE_ADDRESS) return;
 8001896:	bf00      	nop
 8001898:	e000      	b.n	800189c <processModbusFrame+0x54c>
        return;
 800189a:	bf00      	nop
 800189c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000484 	.word	0x20000484
 80018a8:	20000210 	.word	0x20000210
 80018ac:	20000648 	.word	0x20000648
 80018b0:	20000584 	.word	0x20000584
 80018b4:	20000585 	.word	0x20000585

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018bc:	f000 fbc4 	bl	8002048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c0:	f000 f830 	bl	8001924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018c4:	f000 f970 	bl	8001ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c8:	f000 f950 	bl	8001b6c <MX_DMA_Init>
  MX_TIM2_Init();
 80018cc:	f000 f8d8 	bl	8001a80 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80018d0:	f000 f922 	bl	8001b18 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80018d4:	f000 f880 	bl	80019d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initializeModbusRegisters();
 80018d8:	f7ff fb92 	bl	8001000 <initializeModbusRegisters>
  Safety_Monitor_Init();
 80018dc:	f7fe ff42 	bl	8000764 <Safety_Monitor_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018e0:	f003 fd56 	bl	8005390 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80018e4:	4a09      	ldr	r2, [pc, #36]	@ (800190c <main+0x54>)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4809      	ldr	r0, [pc, #36]	@ (8001910 <main+0x58>)
 80018ea:	f003 fd99 	bl	8005420 <osThreadNew>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <main+0x5c>)
 80018f2:	6013      	str	r3, [r2, #0]

  /* creation of modbusTask */
  modbusTaskHandle = osThreadNew(StartModbusTask, NULL, &modbusTask_attributes);
 80018f4:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <main+0x60>)
 80018f6:	2100      	movs	r1, #0
 80018f8:	4808      	ldr	r0, [pc, #32]	@ (800191c <main+0x64>)
 80018fa:	f003 fd91 	bl	8005420 <osThreadNew>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a07      	ldr	r2, [pc, #28]	@ (8001920 <main+0x68>)
 8001902:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001904:	f003 fd66 	bl	80053d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <main+0x50>
 800190c:	080087a8 	.word	0x080087a8
 8001910:	08001c59 	.word	0x08001c59
 8001914:	20000690 	.word	0x20000690
 8001918:	080087cc 	.word	0x080087cc
 800191c:	08001c79 	.word	0x08001c79
 8001920:	20000694 	.word	0x20000694

08001924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b094      	sub	sp, #80	@ 0x50
 8001928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192e:	2228      	movs	r2, #40	@ 0x28
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f006 fa40 	bl	8007db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001954:	2301      	movs	r3, #1
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001958:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001962:	2301      	movs	r3, #1
 8001964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2302      	movs	r3, #2
 8001968:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800196a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800196e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001978:	4618      	mov	r0, r3
 800197a:	f001 fd19 	bl	80033b0 <HAL_RCC_OscConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001984:	f000 f9aa 	bl	8001cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001988:	230f      	movs	r3, #15
 800198a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001998:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f001 ff85 	bl	80038b4 <HAL_RCC_ClockConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019b0:	f000 f994 	bl	8001cdc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019b4:	2302      	movs	r3, #2
 80019b6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 f906 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80019ca:	f000 f987 	bl	8001cdc <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3750      	adds	r7, #80	@ 0x50
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019e8:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 80019ea:	4a24      	ldr	r2, [pc, #144]	@ (8001a7c <MX_ADC1_Init+0xa4>)
 80019ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019ee:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a02:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001a06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a14:	4818      	ldr	r0, [pc, #96]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a16:	f000 fb79 	bl	800210c <HAL_ADC_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001a20:	f000 f95c 	bl	8001cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001a24:	2305      	movs	r3, #5
 8001a26:	60fb      	str	r3, [r7, #12]

  sConfig.Channel = ADC_CHANNEL_0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4810      	ldr	r0, [pc, #64]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a36:	f000 fd3b 	bl	80024b0 <HAL_ADC_ConfigChannel>

  sConfig.Channel = ADC_CHANNEL_1;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a48:	f000 fd32 	bl	80024b0 <HAL_ADC_ConfigChannel>

  sConfig.Channel = ADC_CHANNEL_4;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a50:	2303      	movs	r3, #3
 8001a52:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a5a:	f000 fd29 	bl	80024b0 <HAL_ADC_ConfigChannel>

  sConfig.Channel = ADC_CHANNEL_8;
 8001a5e:	2308      	movs	r3, #8
 8001a60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a62:	2304      	movs	r3, #4
 8001a64:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001a66:	1d3b      	adds	r3, r7, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <MX_ADC1_Init+0xa0>)
 8001a6c:	f000 fd20 	bl	80024b0 <HAL_ADC_ConfigChannel>
 /* USER CODE BEGIN ADC1_Init 2 */

 /* USER CODE END ADC1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	2000058c 	.word	0x2000058c
 8001a7c:	40012400 	.word	0x40012400

08001a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a94:	463b      	mov	r3, r7
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001a9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ac4:	4813      	ldr	r0, [pc, #76]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001ac6:	f002 f939 	bl	8003d3c <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ad0:	f000 f904 	bl	8001cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001ae2:	f002 fa6a 	bl	8003fba <HAL_TIM_ConfigClockSource>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001aec:	f000 f8f6 	bl	8001cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af0:	2300      	movs	r3, #0
 8001af2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001af8:	463b      	mov	r3, r7
 8001afa:	4619      	mov	r1, r3
 8001afc:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <MX_TIM2_Init+0x94>)
 8001afe:	f002 fc55 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b08:	f000 f8e8 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000600 	.word	0x20000600

08001b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	4a12      	ldr	r2, [pc, #72]	@ (8001b68 <MX_USART2_UART_Init+0x50>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	220c      	movs	r2, #12
 8001b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	4b08      	ldr	r3, [pc, #32]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4e:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f002 fc9c 	bl	800448c <HAL_UART_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b5a:	f000 f8bf 	bl	8001cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000648 	.word	0x20000648
 8001b68:	40004400 	.word	0x40004400

08001b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <MX_DMA_Init+0x38>)
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba4 <MX_DMA_Init+0x38>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6153      	str	r3, [r2, #20]
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <MX_DMA_Init+0x38>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	200b      	movs	r0, #11
 8001b90:	f000 ff5f 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b94:	200b      	movs	r0, #11
 8001b96:	f000 ff78 	bl	8002a8a <HAL_NVIC_EnableIRQ>

}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbc:	4b24      	ldr	r3, [pc, #144]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a23      	ldr	r2, [pc, #140]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bc2:	f043 0320 	orr.w	r3, r3, #32
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b21      	ldr	r3, [pc, #132]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0320 	and.w	r3, r3, #32
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a17      	ldr	r2, [pc, #92]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bf2:	f043 0308 	orr.w	r3, r3, #8
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <MX_GPIO_Init+0xa8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|RELAY2_Pin|RELAY1_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8001c0a:	4812      	ldr	r0, [pc, #72]	@ (8001c54 <MX_GPIO_Init+0xac>)
 8001c0c:	f001 fb9f 	bl	800334e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin RELAY2_Pin RELAY1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|RELAY2_Pin|RELAY1_Pin;
 8001c10:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8001c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4619      	mov	r1, r3
 8001c28:	480a      	ldr	r0, [pc, #40]	@ (8001c54 <MX_GPIO_Init+0xac>)
 8001c2a:	f001 f9f5 	bl	8003018 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin;
 8001c2e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001c32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4619      	mov	r1, r3
 8001c42:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <MX_GPIO_Init+0xac>)
 8001c44:	f001 f9e8 	bl	8003018 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010c00 	.word	0x40010c00

08001c58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  { 
    Safety_Register_Load();
 8001c60:	f7fe ff10 	bl	8000a84 <Safety_Register_Load>
    Safety_Monitor_Process();
 8001c64:	f7fe fe1e 	bl	80008a4 <Safety_Monitor_Process>
    Safety_Register_Save();
 8001c68:	f7fe ff7c 	bl	8000b64 <Safety_Register_Save>
    osDelay(1);
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f003 fc69 	bl	8005544 <osDelay>
    Safety_Register_Load();
 8001c72:	bf00      	nop
 8001c74:	e7f4      	b.n	8001c60 <StartDefaultTask+0x8>
	...

08001c78 <StartModbusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void *argument)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModbusTask */
  /* Infinite loop */
  for(;;)
  {
    // Update Modbus counter
    g_modbusCounter++;
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <StartModbusTask+0x54>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a11      	ldr	r2, [pc, #68]	@ (8001ccc <StartModbusTask+0x54>)
 8001c88:	6013      	str	r3, [r2, #0]
    
    // Check for UART timeout (10 seconds)
    if (HAL_GetTick() - g_lastUARTActivity > 10000) {
 8001c8a:	f000 fa35 	bl	80020f8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd0 <StartModbusTask+0x58>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d906      	bls.n	8001cac <StartModbusTask+0x34>
      resetUARTCommunication();
 8001c9e:	f7ff fb3d 	bl	800131c <resetUARTCommunication>
      g_lastUARTActivity = HAL_GetTick();
 8001ca2:	f000 fa29 	bl	80020f8 <HAL_GetTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <StartModbusTask+0x58>)
 8001caa:	6013      	str	r3, [r2, #0]
    }
    
    // Process Modbus frame if received
    if (frameReceived) {
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <StartModbusTask+0x5c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <StartModbusTask+0x40>
      processModbusFrame();
 8001cb4:	f7ff fb4c 	bl	8001350 <processModbusFrame>
    }
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001cb8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001cbc:	4806      	ldr	r0, [pc, #24]	@ (8001cd8 <StartModbusTask+0x60>)
 8001cbe:	f001 fb5e 	bl	800337e <HAL_GPIO_TogglePin>
    osDelay(100); // 100ms delay
 8001cc2:	2064      	movs	r0, #100	@ 0x64
 8001cc4:	f003 fc3e 	bl	8005544 <osDelay>
    g_modbusCounter++;
 8001cc8:	e7da      	b.n	8001c80 <StartModbusTask+0x8>
 8001cca:	bf00      	nop
 8001ccc:	20000480 	.word	0x20000480
 8001cd0:	20000588 	.word	0x20000588
 8001cd4:	20000585 	.word	0x20000585
 8001cd8:	40010c00 	.word	0x40010c00

08001cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <Error_Handler+0x8>

08001ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cee:	4b1c      	ldr	r3, [pc, #112]	@ (8001d60 <HAL_MspInit+0x78>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d60 <HAL_MspInit+0x78>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_MspInit+0x78>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b16      	ldr	r3, [pc, #88]	@ (8001d60 <HAL_MspInit+0x78>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <HAL_MspInit+0x78>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <HAL_MspInit+0x78>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	210f      	movs	r1, #15
 8001d22:	f06f 0001 	mvn.w	r0, #1
 8001d26:	f000 fe94 	bl	8002a52 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	2005      	movs	r0, #5
 8001d30:	f000 fe8f 	bl	8002a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001d34:	2005      	movs	r0, #5
 8001d36:	f000 fea8 	bl	8002a8a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_MspInit+0x7c>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <HAL_MspInit+0x7c>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010000 	.word	0x40010000

08001d68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0318 	add.w	r3, r7, #24
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a34      	ldr	r2, [pc, #208]	@ (8001e54 <HAL_ADC_MspInit+0xec>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d160      	bne.n	8001e4a <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d88:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a32      	ldr	r2, [pc, #200]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001d8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b30      	ldr	r3, [pc, #192]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a2c      	ldr	r2, [pc, #176]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b2a      	ldr	r3, [pc, #168]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db8:	4b27      	ldr	r3, [pc, #156]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a26      	ldr	r2, [pc, #152]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <HAL_ADC_MspInit+0xf0>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AI4_Pin|AI3_Pin|AI2_Pin;
 8001dd0:	2313      	movs	r3, #19
 8001dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	4619      	mov	r1, r3
 8001dde:	481f      	ldr	r0, [pc, #124]	@ (8001e5c <HAL_ADC_MspInit+0xf4>)
 8001de0:	f001 f91a 	bl	8003018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AI1_Pin;
 8001de4:	2301      	movs	r3, #1
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de8:	2303      	movs	r3, #3
 8001dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AI1_GPIO_Port, &GPIO_InitStruct);
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	4619      	mov	r1, r3
 8001df2:	481b      	ldr	r0, [pc, #108]	@ (8001e60 <HAL_ADC_MspInit+0xf8>)
 8001df4:	f001 f910 	bl	8003018 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001df8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <HAL_ADC_MspInit+0x100>)
 8001dfc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dfe:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e04:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e0c:	2280      	movs	r2, #128	@ 0x80
 8001e0e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e10:	4b14      	ldr	r3, [pc, #80]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e16:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e1e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e22:	2220      	movs	r2, #32
 8001e24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e26:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e2e:	480d      	ldr	r0, [pc, #52]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e30:	f000 fe46 	bl	8002ac0 <HAL_DMA_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001e3a:	f7ff ff4f 	bl	8001cdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a08      	ldr	r2, [pc, #32]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e42:	621a      	str	r2, [r3, #32]
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_ADC_MspInit+0xfc>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	@ 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40012400 	.word	0x40012400
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010800 	.word	0x40010800
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	200005bc 	.word	0x200005bc
 8001e68:	40020008 	.word	0x40020008

08001e6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e7c:	d113      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x44>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x44>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x44>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2105      	movs	r1, #5
 8001e9a:	201c      	movs	r0, #28
 8001e9c:	f000 fdd9 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea0:	201c      	movs	r0, #28
 8001ea2:	f000 fdf2 	bl	8002a8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1f      	ldr	r2, [pc, #124]	@ (8001f4c <HAL_UART_MspInit+0x98>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d137      	bne.n	8001f44 <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_UART_MspInit+0x9c>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f50 <HAL_UART_MspInit+0x9c>)
 8001eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ede:	61d3      	str	r3, [r2, #28]
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_UART_MspInit+0x9c>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_UART_MspInit+0x9c>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <HAL_UART_MspInit+0x9c>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	6193      	str	r3, [r2, #24]
 8001ef8:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <HAL_UART_MspInit+0x9c>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f04:	2304      	movs	r3, #4
 8001f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	4619      	mov	r1, r3
 8001f16:	480f      	ldr	r0, [pc, #60]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001f18:	f001 f87e 	bl	8003018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f107 0310 	add.w	r3, r7, #16
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4809      	ldr	r0, [pc, #36]	@ (8001f54 <HAL_UART_MspInit+0xa0>)
 8001f30:	f001 f872 	bl	8003018 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2105      	movs	r1, #5
 8001f38:	2026      	movs	r0, #38	@ 0x26
 8001f3a:	f000 fd8a 	bl	8002a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f3e:	2026      	movs	r0, #38	@ 0x26
 8001f40:	f000 fda3 	bl	8002a8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40010800 	.word	0x40010800

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <NMI_Handler+0x4>

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <MemManage_Handler+0x4>

08001f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f90:	f000 f8a0 	bl	80020d4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f94:	f004 fef4 	bl	8006d80 <xTaskGetSchedulerState>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001f9e:	f005 fc9b 	bl	80078d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fb8:	4802      	ldr	r0, [pc, #8]	@ (8001fc4 <DMA1_Channel1_IRQHandler+0x10>)
 8001fba:	f000 feef 	bl	8002d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200005bc 	.word	0x200005bc

08001fc8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <TIM2_IRQHandler+0x10>)
 8001fce:	f001 ff04 	bl	8003dda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000600 	.word	0x20000600

08001fdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <USART2_IRQHandler+0x10>)
 8001fe2:	f002 fc3f 	bl	8004864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000648 	.word	0x20000648

08001ff0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ffc:	f7ff fff8 	bl	8001ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002000:	480b      	ldr	r0, [pc, #44]	@ (8002030 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002002:	490c      	ldr	r1, [pc, #48]	@ (8002034 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002004:	4a0c      	ldr	r2, [pc, #48]	@ (8002038 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a09      	ldr	r2, [pc, #36]	@ (800203c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002018:	4c09      	ldr	r4, [pc, #36]	@ (8002040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002026:	f005 fed5 	bl	8007dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202a:	f7ff fc45 	bl	80018b8 <main>
  bx lr
 800202e:	4770      	bx	lr
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002038:	08008844 	.word	0x08008844
  ldr r2, =_sbss
 800203c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002040:	20002124 	.word	0x20002124

08002044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC1_2_IRQHandler>
	...

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <HAL_Init+0x28>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a07      	ldr	r2, [pc, #28]	@ (8002070 <HAL_Init+0x28>)
 8002052:	f043 0310 	orr.w	r3, r3, #16
 8002056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002058:	2003      	movs	r0, #3
 800205a:	f000 fcef 	bl	8002a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800205e:	200f      	movs	r0, #15
 8002060:	f000 f808 	bl	8002074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002064:	f7ff fe40 	bl	8001ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000

08002074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <HAL_InitTick+0x54>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <HAL_InitTick+0x58>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fd07 	bl	8002aa6 <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e00e      	b.n	80020c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2b0f      	cmp	r3, #15
 80020a6:	d80a      	bhi.n	80020be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a8:	2200      	movs	r2, #0
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	f04f 30ff 	mov.w	r0, #4294967295
 80020b0:	f000 fccf 	bl	8002a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020b4:	4a06      	ldr	r2, [pc, #24]	@ (80020d0 <HAL_InitTick+0x5c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e000      	b.n	80020c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20000000 	.word	0x20000000
 80020cc:	20000008 	.word	0x20000008
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_IncTick+0x1c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b05      	ldr	r3, [pc, #20]	@ (80020f4 <HAL_IncTick+0x20>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	4a03      	ldr	r2, [pc, #12]	@ (80020f4 <HAL_IncTick+0x20>)
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	20000008 	.word	0x20000008
 80020f4:	20000698 	.word	0x20000698

080020f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return uwTick;
 80020fc:	4b02      	ldr	r3, [pc, #8]	@ (8002108 <HAL_GetTick+0x10>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	20000698 	.word	0x20000698

0800210c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e0be      	b.n	80022ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	2b00      	cmp	r3, #0
 800213a:	d109      	bne.n	8002150 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fe0c 	bl	8001d68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 faff 	bl	8002754 <ADC_ConversionStop_Disable>
 8002156:	4603      	mov	r3, r0
 8002158:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b00      	cmp	r3, #0
 8002164:	f040 8099 	bne.w	800229a <HAL_ADC_Init+0x18e>
 8002168:	7dfb      	ldrb	r3, [r7, #23]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f040 8095 	bne.w	800229a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002174:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002178:	f023 0302 	bic.w	r3, r3, #2
 800217c:	f043 0202 	orr.w	r2, r3, #2
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800218c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	7b1b      	ldrb	r3, [r3, #12]
 8002192:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002194:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	4313      	orrs	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a4:	d003      	beq.n	80021ae <HAL_ADC_Init+0xa2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_ADC_Init+0xa8>
 80021ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_Init+0xaa>
 80021b4:	2300      	movs	r3, #0
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	7d1b      	ldrb	r3, [r3, #20]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d119      	bne.n	80021f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	7b1b      	ldrb	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	035a      	lsls	r2, r3, #13
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	e00b      	b.n	80021f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	4b28      	ldr	r3, [pc, #160]	@ (80022b4 <HAL_ADC_Init+0x1a8>)
 8002214:	4013      	ands	r3, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	430b      	orrs	r3, r1
 800221e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002228:	d003      	beq.n	8002232 <HAL_ADC_Init+0x126>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d104      	bne.n	800223c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	3b01      	subs	r3, #1
 8002238:	051b      	lsls	r3, r3, #20
 800223a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002242:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	430a      	orrs	r2, r1
 800224e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_ADC_Init+0x1ac>)
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	429a      	cmp	r2, r3
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002276:	e018      	b.n	80022aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227c:	f023 0312 	bic.w	r3, r3, #18
 8002280:	f043 0210 	orr.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002298:	e007      	b.n	80022aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229e:	f043 0210 	orr.w	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	ffe1f7fd 	.word	0xffe1f7fd
 80022b8:	ff1f0efe 	.word	0xff1f0efe

080022bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a64      	ldr	r2, [pc, #400]	@ (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_ADC_Start_DMA+0x24>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a63      	ldr	r2, [pc, #396]	@ (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d106      	bne.n	80022ee <HAL_ADC_Start_DMA+0x32>
 80022e0:	4b60      	ldr	r3, [pc, #384]	@ (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f040 80b3 	bne.w	8002454 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_Start_DMA+0x40>
 80022f8:	2302      	movs	r3, #2
 80022fa:	e0ae      	b.n	800245a <HAL_ADC_Start_DMA+0x19e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f9cb 	bl	80026a0 <ADC_Enable>
 800230a:	4603      	mov	r3, r0
 800230c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 809a 	bne.w	800244a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4e      	ldr	r2, [pc, #312]	@ (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d105      	bne.n	8002340 <HAL_ADC_Start_DMA+0x84>
 8002334:	4b4b      	ldr	r3, [pc, #300]	@ (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d115      	bne.n	800236c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d026      	beq.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002362:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800236a:	e01d      	b.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002370:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a39      	ldr	r2, [pc, #228]	@ (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d004      	beq.n	800238c <HAL_ADC_Start_DMA+0xd0>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a38      	ldr	r2, [pc, #224]	@ (8002468 <HAL_ADC_Start_DMA+0x1ac>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d10d      	bne.n	80023a8 <HAL_ADC_Start_DMA+0xec>
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <HAL_ADC_Start_DMA+0x1a8>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002394:	2b00      	cmp	r3, #0
 8002396:	d007      	beq.n	80023a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d006      	beq.n	80023c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023b8:	f023 0206 	bic.w	r2, r3, #6
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023c0:	e002      	b.n	80023c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	4a25      	ldr	r2, [pc, #148]	@ (800246c <HAL_ADC_Start_DMA+0x1b0>)
 80023d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4a24      	ldr	r2, [pc, #144]	@ (8002470 <HAL_ADC_Start_DMA+0x1b4>)
 80023de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a23      	ldr	r2, [pc, #140]	@ (8002474 <HAL_ADC_Start_DMA+0x1b8>)
 80023e6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0202 	mvn.w	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002400:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6a18      	ldr	r0, [r3, #32]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	334c      	adds	r3, #76	@ 0x4c
 800240c:	4619      	mov	r1, r3
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f000 fbaf 	bl	8002b74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002420:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002424:	d108      	bne.n	8002438 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002434:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002436:	e00f      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002446:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002448:	e006      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002452:	e001      	b.n	8002458 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002458:	7dfb      	ldrb	r3, [r7, #23]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40012400 	.word	0x40012400
 8002468:	40012800 	.word	0x40012800
 800246c:	080027d7 	.word	0x080027d7
 8002470:	08002853 	.word	0x08002853
 8002474:	0800286f 	.word	0x0800286f

08002478 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr

0800249c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
	...

080024b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x20>
 80024cc:	2302      	movs	r3, #2
 80024ce:	e0dc      	b.n	800268a <HAL_ADC_ConfigChannel+0x1da>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b06      	cmp	r3, #6
 80024de:	d81c      	bhi.n	800251a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3b05      	subs	r3, #5
 80024f2:	221f      	movs	r2, #31
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4019      	ands	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	3b05      	subs	r3, #5
 800250c:	fa00 f203 	lsl.w	r2, r0, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	635a      	str	r2, [r3, #52]	@ 0x34
 8002518:	e03c      	b.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d81c      	bhi.n	800255c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	3b23      	subs	r3, #35	@ 0x23
 8002534:	221f      	movs	r2, #31
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	4019      	ands	r1, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	3b23      	subs	r3, #35	@ 0x23
 800254e:	fa00 f203 	lsl.w	r2, r0, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
 800255a:	e01b      	b.n	8002594 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685a      	ldr	r2, [r3, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	3b41      	subs	r3, #65	@ 0x41
 800256e:	221f      	movs	r2, #31
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	4019      	ands	r1, r3
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	3b41      	subs	r3, #65	@ 0x41
 8002588:	fa00 f203 	lsl.w	r2, r0, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b09      	cmp	r3, #9
 800259a:	d91c      	bls.n	80025d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68d9      	ldr	r1, [r3, #12]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	3b1e      	subs	r3, #30
 80025ae:	2207      	movs	r2, #7
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	4019      	ands	r1, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6898      	ldr	r0, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4413      	add	r3, r2
 80025c6:	3b1e      	subs	r3, #30
 80025c8:	fa00 f203 	lsl.w	r2, r0, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	e019      	b.n	800260a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6919      	ldr	r1, [r3, #16]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	2207      	movs	r2, #7
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	4019      	ands	r1, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	6898      	ldr	r0, [r3, #8]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2b10      	cmp	r3, #16
 8002610:	d003      	beq.n	800261a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002616:	2b11      	cmp	r3, #17
 8002618:	d132      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a1d      	ldr	r2, [pc, #116]	@ (8002694 <HAL_ADC_ConfigChannel+0x1e4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d125      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d126      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002640:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b10      	cmp	r3, #16
 8002648:	d11a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800264a:	4b13      	ldr	r3, [pc, #76]	@ (8002698 <HAL_ADC_ConfigChannel+0x1e8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a13      	ldr	r2, [pc, #76]	@ (800269c <HAL_ADC_ConfigChannel+0x1ec>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9a      	lsrs	r2, r3, #18
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002660:	e002      	b.n	8002668 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x1b2>
 800266e:	e007      	b.n	8002680 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002674:	f043 0220 	orr.w	r2, r3, #32
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr
 8002694:	40012400 	.word	0x40012400
 8002698:	20000000 	.word	0x20000000
 800269c:	431bde83 	.word	0x431bde83

080026a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d040      	beq.n	8002740 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026ce:	4b1f      	ldr	r3, [pc, #124]	@ (800274c <ADC_Enable+0xac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1f      	ldr	r2, [pc, #124]	@ (8002750 <ADC_Enable+0xb0>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026dc:	e002      	b.n	80026e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026ea:	f7ff fd05 	bl	80020f8 <HAL_GetTick>
 80026ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026f0:	e01f      	b.n	8002732 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026f2:	f7ff fd01 	bl	80020f8 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d918      	bls.n	8002732 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d011      	beq.n	8002732 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002712:	f043 0210 	orr.w	r2, r3, #16
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e007      	b.n	8002742 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d1d8      	bne.n	80026f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000000 	.word	0x20000000
 8002750:	431bde83 	.word	0x431bde83

08002754 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b01      	cmp	r3, #1
 800276c:	d12e      	bne.n	80027cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800277e:	f7ff fcbb 	bl	80020f8 <HAL_GetTick>
 8002782:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002784:	e01b      	b.n	80027be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002786:	f7ff fcb7 	bl	80020f8 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d914      	bls.n	80027be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d10d      	bne.n	80027be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a6:	f043 0210 	orr.w	r2, r3, #16
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e007      	b.n	80027ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d0dc      	beq.n	8002786 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b084      	sub	sp, #16
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d127      	bne.n	8002840 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002806:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800280a:	d115      	bne.n	8002838 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002824:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fe1d 	bl	8002478 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800283e:	e004      	b.n	800284a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
}
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fe12 	bl	800248a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002880:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288c:	f043 0204 	orr.w	r2, r3, #4
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fe01 	bl	800249c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	@ (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bc80      	pop	{r7}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	@ (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4906      	ldr	r1, [pc, #24]	@ (800293c <__NVIC_EnableIRQ+0x34>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e000e100 	.word	0xe000e100

08002940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	6039      	str	r1, [r7, #0]
 800294a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db0a      	blt.n	800296a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b2da      	uxtb	r2, r3
 8002958:	490c      	ldr	r1, [pc, #48]	@ (800298c <__NVIC_SetPriority+0x4c>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	0112      	lsls	r2, r2, #4
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	440b      	add	r3, r1
 8002964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002968:	e00a      	b.n	8002980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	b2da      	uxtb	r2, r3
 800296e:	4908      	ldr	r1, [pc, #32]	@ (8002990 <__NVIC_SetPriority+0x50>)
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	3b04      	subs	r3, #4
 8002978:	0112      	lsls	r2, r2, #4
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	440b      	add	r3, r1
 800297e:	761a      	strb	r2, [r3, #24]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	@ 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f1c3 0307 	rsb	r3, r3, #7
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	bf28      	it	cs
 80029b2:	2304      	movcs	r3, #4
 80029b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2b06      	cmp	r3, #6
 80029bc:	d902      	bls.n	80029c4 <NVIC_EncodePriority+0x30>
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3b03      	subs	r3, #3
 80029c2:	e000      	b.n	80029c6 <NVIC_EncodePriority+0x32>
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c8:	f04f 32ff 	mov.w	r2, #4294967295
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	401a      	ands	r2, r3
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029dc:	f04f 31ff 	mov.w	r1, #4294967295
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa01 f303 	lsl.w	r3, r1, r3
 80029e6:	43d9      	mvns	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	4313      	orrs	r3, r2
         );
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3724      	adds	r7, #36	@ 0x24
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a08:	d301      	bcc.n	8002a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00f      	b.n	8002a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <SysTick_Config+0x40>)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a16:	210f      	movs	r1, #15
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f7ff ff90 	bl	8002940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <SysTick_Config+0x40>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a26:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <SysTick_Config+0x40>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	e000e010 	.word	0xe000e010

08002a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff2d 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	4603      	mov	r3, r0
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a64:	f7ff ff42 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	6978      	ldr	r0, [r7, #20]
 8002a70:	f7ff ff90 	bl	8002994 <NVIC_EncodePriority>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff5f 	bl	8002940 <__NVIC_SetPriority>
}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff ff35 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff ffa2 	bl	80029f8 <SysTick_Config>
 8002ab4:	4603      	mov	r3, r0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e043      	b.n	8002b5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b22      	ldr	r3, [pc, #136]	@ (8002b68 <HAL_DMA_Init+0xa8>)
 8002ade:	4413      	add	r3, r2
 8002ae0:	4a22      	ldr	r2, [pc, #136]	@ (8002b6c <HAL_DMA_Init+0xac>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_DMA_Init+0xb0>)
 8002af2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	bffdfff8 	.word	0xbffdfff8
 8002b6c:	cccccccd 	.word	0xcccccccd
 8002b70:	40020000 	.word	0x40020000

08002b74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
 8002b80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_DMA_Start_IT+0x20>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e04b      	b.n	8002c2c <HAL_DMA_Start_IT+0xb8>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d13a      	bne.n	8002c1e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2202      	movs	r2, #2
 8002bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9f6 	bl	8002fbe <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 020e 	orr.w	r2, r2, #14
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	e00f      	b.n	8002c0c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 020a 	orr.w	r2, r2, #10
 8002c0a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e005      	b.n	8002c2a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c26:	2302      	movs	r3, #2
 8002c28:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d008      	beq.n	8002c5e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e020      	b.n	8002ca0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 020e 	bic.w	r2, r2, #14
 8002c6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d005      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	73fb      	strb	r3, [r7, #15]
 8002cce:	e051      	b.n	8002d74 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 020e 	bic.w	r2, r2, #14
 8002cde:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <HAL_DMA_Abort_IT+0xd4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d029      	beq.n	8002d4e <HAL_DMA_Abort_IT+0xa2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <HAL_DMA_Abort_IT+0xd8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_Abort_IT+0x9e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	@ (8002d88 <HAL_DMA_Abort_IT+0xdc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01a      	beq.n	8002d44 <HAL_DMA_Abort_IT+0x98>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <HAL_DMA_Abort_IT+0xe0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d012      	beq.n	8002d3e <HAL_DMA_Abort_IT+0x92>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002d90 <HAL_DMA_Abort_IT+0xe4>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00a      	beq.n	8002d38 <HAL_DMA_Abort_IT+0x8c>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1b      	ldr	r2, [pc, #108]	@ (8002d94 <HAL_DMA_Abort_IT+0xe8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d102      	bne.n	8002d32 <HAL_DMA_Abort_IT+0x86>
 8002d2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d30:	e00e      	b.n	8002d50 <HAL_DMA_Abort_IT+0xa4>
 8002d32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d36:	e00b      	b.n	8002d50 <HAL_DMA_Abort_IT+0xa4>
 8002d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d3c:	e008      	b.n	8002d50 <HAL_DMA_Abort_IT+0xa4>
 8002d3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d42:	e005      	b.n	8002d50 <HAL_DMA_Abort_IT+0xa4>
 8002d44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d48:	e002      	b.n	8002d50 <HAL_DMA_Abort_IT+0xa4>
 8002d4a:	2310      	movs	r3, #16
 8002d4c:	e000      	b.n	8002d50 <HAL_DMA_Abort_IT+0xa4>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	4a11      	ldr	r2, [pc, #68]	@ (8002d98 <HAL_DMA_Abort_IT+0xec>)
 8002d52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	4798      	blx	r3
    } 
  }
  return status;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40020008 	.word	0x40020008
 8002d84:	4002001c 	.word	0x4002001c
 8002d88:	40020030 	.word	0x40020030
 8002d8c:	40020044 	.word	0x40020044
 8002d90:	40020058 	.word	0x40020058
 8002d94:	4002006c 	.word	0x4002006c
 8002d98:	40020000 	.word	0x40020000

08002d9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db8:	2204      	movs	r2, #4
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d04f      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xc8>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 0304 	and.w	r3, r3, #4
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d107      	bne.n	8002dec <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0204 	bic.w	r2, r2, #4
 8002dea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a66      	ldr	r2, [pc, #408]	@ (8002f8c <HAL_DMA_IRQHandler+0x1f0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d029      	beq.n	8002e4a <HAL_DMA_IRQHandler+0xae>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a65      	ldr	r2, [pc, #404]	@ (8002f90 <HAL_DMA_IRQHandler+0x1f4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d022      	beq.n	8002e46 <HAL_DMA_IRQHandler+0xaa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a63      	ldr	r2, [pc, #396]	@ (8002f94 <HAL_DMA_IRQHandler+0x1f8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01a      	beq.n	8002e40 <HAL_DMA_IRQHandler+0xa4>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a62      	ldr	r2, [pc, #392]	@ (8002f98 <HAL_DMA_IRQHandler+0x1fc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d012      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x9e>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a60      	ldr	r2, [pc, #384]	@ (8002f9c <HAL_DMA_IRQHandler+0x200>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d00a      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x98>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a5f      	ldr	r2, [pc, #380]	@ (8002fa0 <HAL_DMA_IRQHandler+0x204>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d102      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x92>
 8002e28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e2c:	e00e      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e2e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e32:	e00b      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e34:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e38:	e008      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e3a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e3e:	e005      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e44:	e002      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e46:	2340      	movs	r3, #64	@ 0x40
 8002e48:	e000      	b.n	8002e4c <HAL_DMA_IRQHandler+0xb0>
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	4a55      	ldr	r2, [pc, #340]	@ (8002fa4 <HAL_DMA_IRQHandler+0x208>)
 8002e4e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8094 	beq.w	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e62:	e08e      	b.n	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	2202      	movs	r2, #2
 8002e6a:	409a      	lsls	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d056      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x186>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d051      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 020a 	bic.w	r2, r2, #10
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a38      	ldr	r2, [pc, #224]	@ (8002f8c <HAL_DMA_IRQHandler+0x1f0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d029      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x166>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a37      	ldr	r2, [pc, #220]	@ (8002f90 <HAL_DMA_IRQHandler+0x1f4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d022      	beq.n	8002efe <HAL_DMA_IRQHandler+0x162>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a35      	ldr	r2, [pc, #212]	@ (8002f94 <HAL_DMA_IRQHandler+0x1f8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01a      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x15c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a34      	ldr	r2, [pc, #208]	@ (8002f98 <HAL_DMA_IRQHandler+0x1fc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d012      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x156>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a32      	ldr	r2, [pc, #200]	@ (8002f9c <HAL_DMA_IRQHandler+0x200>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00a      	beq.n	8002eec <HAL_DMA_IRQHandler+0x150>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a31      	ldr	r2, [pc, #196]	@ (8002fa0 <HAL_DMA_IRQHandler+0x204>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d102      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x14a>
 8002ee0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ee4:	e00e      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002ee6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eea:	e00b      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef0:	e008      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002ef2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ef6:	e005      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002ef8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002efc:	e002      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002efe:	2320      	movs	r3, #32
 8002f00:	e000      	b.n	8002f04 <HAL_DMA_IRQHandler+0x168>
 8002f02:	2302      	movs	r3, #2
 8002f04:	4a27      	ldr	r2, [pc, #156]	@ (8002fa4 <HAL_DMA_IRQHandler+0x208>)
 8002f06:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d034      	beq.n	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f20:	e02f      	b.n	8002f82 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2208      	movs	r2, #8
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d028      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x1e8>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d023      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 020e 	bic.w	r2, r2, #14
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d004      	beq.n	8002f84 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	4798      	blx	r3
    }
  }
  return;
 8002f82:	bf00      	nop
 8002f84:	bf00      	nop
}
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40020008 	.word	0x40020008
 8002f90:	4002001c 	.word	0x4002001c
 8002f94:	40020030 	.word	0x40020030
 8002f98:	40020044 	.word	0x40020044
 8002f9c:	40020058 	.word	0x40020058
 8002fa0:	4002006c 	.word	0x4002006c
 8002fa4:	40020000 	.word	0x40020000

08002fa8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2b10      	cmp	r3, #16
 8002fea:	d108      	bne.n	8002ffe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ffc:	e007      	b.n	800300e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003018:	b480      	push	{r7}
 800301a:	b08b      	sub	sp, #44	@ 0x2c
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003022:	2300      	movs	r3, #0
 8003024:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800302a:	e169      	b.n	8003300 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800302c:	2201      	movs	r2, #1
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	429a      	cmp	r2, r3
 8003046:	f040 8158 	bne.w	80032fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	4a9a      	ldr	r2, [pc, #616]	@ (80032b8 <HAL_GPIO_Init+0x2a0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d05e      	beq.n	8003112 <HAL_GPIO_Init+0xfa>
 8003054:	4a98      	ldr	r2, [pc, #608]	@ (80032b8 <HAL_GPIO_Init+0x2a0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d875      	bhi.n	8003146 <HAL_GPIO_Init+0x12e>
 800305a:	4a98      	ldr	r2, [pc, #608]	@ (80032bc <HAL_GPIO_Init+0x2a4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d058      	beq.n	8003112 <HAL_GPIO_Init+0xfa>
 8003060:	4a96      	ldr	r2, [pc, #600]	@ (80032bc <HAL_GPIO_Init+0x2a4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d86f      	bhi.n	8003146 <HAL_GPIO_Init+0x12e>
 8003066:	4a96      	ldr	r2, [pc, #600]	@ (80032c0 <HAL_GPIO_Init+0x2a8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d052      	beq.n	8003112 <HAL_GPIO_Init+0xfa>
 800306c:	4a94      	ldr	r2, [pc, #592]	@ (80032c0 <HAL_GPIO_Init+0x2a8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d869      	bhi.n	8003146 <HAL_GPIO_Init+0x12e>
 8003072:	4a94      	ldr	r2, [pc, #592]	@ (80032c4 <HAL_GPIO_Init+0x2ac>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d04c      	beq.n	8003112 <HAL_GPIO_Init+0xfa>
 8003078:	4a92      	ldr	r2, [pc, #584]	@ (80032c4 <HAL_GPIO_Init+0x2ac>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d863      	bhi.n	8003146 <HAL_GPIO_Init+0x12e>
 800307e:	4a92      	ldr	r2, [pc, #584]	@ (80032c8 <HAL_GPIO_Init+0x2b0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d046      	beq.n	8003112 <HAL_GPIO_Init+0xfa>
 8003084:	4a90      	ldr	r2, [pc, #576]	@ (80032c8 <HAL_GPIO_Init+0x2b0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d85d      	bhi.n	8003146 <HAL_GPIO_Init+0x12e>
 800308a:	2b12      	cmp	r3, #18
 800308c:	d82a      	bhi.n	80030e4 <HAL_GPIO_Init+0xcc>
 800308e:	2b12      	cmp	r3, #18
 8003090:	d859      	bhi.n	8003146 <HAL_GPIO_Init+0x12e>
 8003092:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <HAL_GPIO_Init+0x80>)
 8003094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003098:	08003113 	.word	0x08003113
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	080030ff 	.word	0x080030ff
 80030a4:	08003141 	.word	0x08003141
 80030a8:	08003147 	.word	0x08003147
 80030ac:	08003147 	.word	0x08003147
 80030b0:	08003147 	.word	0x08003147
 80030b4:	08003147 	.word	0x08003147
 80030b8:	08003147 	.word	0x08003147
 80030bc:	08003147 	.word	0x08003147
 80030c0:	08003147 	.word	0x08003147
 80030c4:	08003147 	.word	0x08003147
 80030c8:	08003147 	.word	0x08003147
 80030cc:	08003147 	.word	0x08003147
 80030d0:	08003147 	.word	0x08003147
 80030d4:	08003147 	.word	0x08003147
 80030d8:	08003147 	.word	0x08003147
 80030dc:	080030f5 	.word	0x080030f5
 80030e0:	08003109 	.word	0x08003109
 80030e4:	4a79      	ldr	r2, [pc, #484]	@ (80032cc <HAL_GPIO_Init+0x2b4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d013      	beq.n	8003112 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ea:	e02c      	b.n	8003146 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	623b      	str	r3, [r7, #32]
          break;
 80030f2:	e029      	b.n	8003148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	3304      	adds	r3, #4
 80030fa:	623b      	str	r3, [r7, #32]
          break;
 80030fc:	e024      	b.n	8003148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	3308      	adds	r3, #8
 8003104:	623b      	str	r3, [r7, #32]
          break;
 8003106:	e01f      	b.n	8003148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	330c      	adds	r3, #12
 800310e:	623b      	str	r3, [r7, #32]
          break;
 8003110:	e01a      	b.n	8003148 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800311a:	2304      	movs	r3, #4
 800311c:	623b      	str	r3, [r7, #32]
          break;
 800311e:	e013      	b.n	8003148 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003128:	2308      	movs	r3, #8
 800312a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	611a      	str	r2, [r3, #16]
          break;
 8003132:	e009      	b.n	8003148 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003134:	2308      	movs	r3, #8
 8003136:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	615a      	str	r2, [r3, #20]
          break;
 800313e:	e003      	b.n	8003148 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003140:	2300      	movs	r3, #0
 8003142:	623b      	str	r3, [r7, #32]
          break;
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x130>
          break;
 8003146:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2bff      	cmp	r3, #255	@ 0xff
 800314c:	d801      	bhi.n	8003152 <HAL_GPIO_Init+0x13a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	e001      	b.n	8003156 <HAL_GPIO_Init+0x13e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2bff      	cmp	r3, #255	@ 0xff
 800315c:	d802      	bhi.n	8003164 <HAL_GPIO_Init+0x14c>
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	e002      	b.n	800316a <HAL_GPIO_Init+0x152>
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	3b08      	subs	r3, #8
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	210f      	movs	r1, #15
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	fa01 f303 	lsl.w	r3, r1, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	401a      	ands	r2, r3
 800317c:	6a39      	ldr	r1, [r7, #32]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	431a      	orrs	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80b1 	beq.w	80032fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003198:	4b4d      	ldr	r3, [pc, #308]	@ (80032d0 <HAL_GPIO_Init+0x2b8>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	4a4c      	ldr	r2, [pc, #304]	@ (80032d0 <HAL_GPIO_Init+0x2b8>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6193      	str	r3, [r2, #24]
 80031a4:	4b4a      	ldr	r3, [pc, #296]	@ (80032d0 <HAL_GPIO_Init+0x2b8>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031b0:	4a48      	ldr	r2, [pc, #288]	@ (80032d4 <HAL_GPIO_Init+0x2bc>)
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	3302      	adds	r3, #2
 80031b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a40      	ldr	r2, [pc, #256]	@ (80032d8 <HAL_GPIO_Init+0x2c0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d013      	beq.n	8003204 <HAL_GPIO_Init+0x1ec>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3f      	ldr	r2, [pc, #252]	@ (80032dc <HAL_GPIO_Init+0x2c4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00d      	beq.n	8003200 <HAL_GPIO_Init+0x1e8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3e      	ldr	r2, [pc, #248]	@ (80032e0 <HAL_GPIO_Init+0x2c8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <HAL_GPIO_Init+0x1e4>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a3d      	ldr	r2, [pc, #244]	@ (80032e4 <HAL_GPIO_Init+0x2cc>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d101      	bne.n	80031f8 <HAL_GPIO_Init+0x1e0>
 80031f4:	2303      	movs	r3, #3
 80031f6:	e006      	b.n	8003206 <HAL_GPIO_Init+0x1ee>
 80031f8:	2304      	movs	r3, #4
 80031fa:	e004      	b.n	8003206 <HAL_GPIO_Init+0x1ee>
 80031fc:	2302      	movs	r3, #2
 80031fe:	e002      	b.n	8003206 <HAL_GPIO_Init+0x1ee>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_GPIO_Init+0x1ee>
 8003204:	2300      	movs	r3, #0
 8003206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003208:	f002 0203 	and.w	r2, r2, #3
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	4093      	lsls	r3, r2
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003216:	492f      	ldr	r1, [pc, #188]	@ (80032d4 <HAL_GPIO_Init+0x2bc>)
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003230:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	492c      	ldr	r1, [pc, #176]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800323e:	4b2a      	ldr	r3, [pc, #168]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	43db      	mvns	r3, r3
 8003246:	4928      	ldr	r1, [pc, #160]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003248:	4013      	ands	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d006      	beq.n	8003266 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003258:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	4922      	ldr	r1, [pc, #136]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	60cb      	str	r3, [r1, #12]
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003266:	4b20      	ldr	r3, [pc, #128]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	43db      	mvns	r3, r3
 800326e:	491e      	ldr	r1, [pc, #120]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003270:	4013      	ands	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4918      	ldr	r1, [pc, #96]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800328e:	4b16      	ldr	r3, [pc, #88]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	43db      	mvns	r3, r3
 8003296:	4914      	ldr	r1, [pc, #80]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 8003298:	4013      	ands	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d021      	beq.n	80032ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	490e      	ldr	r1, [pc, #56]	@ (80032e8 <HAL_GPIO_Init+0x2d0>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	600b      	str	r3, [r1, #0]
 80032b4:	e021      	b.n	80032fa <HAL_GPIO_Init+0x2e2>
 80032b6:	bf00      	nop
 80032b8:	10320000 	.word	0x10320000
 80032bc:	10310000 	.word	0x10310000
 80032c0:	10220000 	.word	0x10220000
 80032c4:	10210000 	.word	0x10210000
 80032c8:	10120000 	.word	0x10120000
 80032cc:	10110000 	.word	0x10110000
 80032d0:	40021000 	.word	0x40021000
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40010800 	.word	0x40010800
 80032dc:	40010c00 	.word	0x40010c00
 80032e0:	40011000 	.word	0x40011000
 80032e4:	40011400 	.word	0x40011400
 80032e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032ec:	4b0b      	ldr	r3, [pc, #44]	@ (800331c <HAL_GPIO_Init+0x304>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	4909      	ldr	r1, [pc, #36]	@ (800331c <HAL_GPIO_Init+0x304>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	f47f ae8e 	bne.w	800302c <HAL_GPIO_Init+0x14>
  }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	372c      	adds	r7, #44	@ 0x2c
 8003316:	46bd      	mov	sp, r7
 8003318:	bc80      	pop	{r7}
 800331a:	4770      	bx	lr
 800331c:	40010400 	.word	0x40010400

08003320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e001      	b.n	8003342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	460b      	mov	r3, r1
 8003358:	807b      	strh	r3, [r7, #2]
 800335a:	4613      	mov	r3, r2
 800335c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800335e:	787b      	ldrb	r3, [r7, #1]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003364:	887a      	ldrh	r2, [r7, #2]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800336a:	e003      	b.n	8003374 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800336c:	887b      	ldrh	r3, [r7, #2]
 800336e:	041a      	lsls	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	611a      	str	r2, [r3, #16]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800337e:	b480      	push	{r7}
 8003380:	b085      	sub	sp, #20
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
 8003386:	460b      	mov	r3, r1
 8003388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003390:	887a      	ldrh	r2, [r7, #2]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4013      	ands	r3, r2
 8003396:	041a      	lsls	r2, r3, #16
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43d9      	mvns	r1, r3
 800339c:	887b      	ldrh	r3, [r7, #2]
 800339e:	400b      	ands	r3, r1
 80033a0:	431a      	orrs	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e272      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8087 	beq.w	80034de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d0:	4b92      	ldr	r3, [pc, #584]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d00c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033dc:	4b8f      	ldr	r3, [pc, #572]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d112      	bne.n	800340e <HAL_RCC_OscConfig+0x5e>
 80033e8:	4b8c      	ldr	r3, [pc, #560]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f4:	d10b      	bne.n	800340e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f6:	4b89      	ldr	r3, [pc, #548]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d06c      	beq.n	80034dc <HAL_RCC_OscConfig+0x12c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d168      	bne.n	80034dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e24c      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x76>
 8003418:	4b80      	ldr	r3, [pc, #512]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a7f      	ldr	r2, [pc, #508]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800341e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e02e      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x98>
 800342e:	4b7b      	ldr	r3, [pc, #492]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a7a      	ldr	r2, [pc, #488]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b78      	ldr	r3, [pc, #480]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a77      	ldr	r2, [pc, #476]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0xbc>
 8003452:	4b72      	ldr	r3, [pc, #456]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a71      	ldr	r2, [pc, #452]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a6e      	ldr	r2, [pc, #440]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xd4>
 800346c:	4b6b      	ldr	r3, [pc, #428]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a6a      	ldr	r2, [pc, #424]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b68      	ldr	r3, [pc, #416]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a67      	ldr	r2, [pc, #412]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003482:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fe34 	bl	80020f8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe fe30 	bl	80020f8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e200      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b5d      	ldr	r3, [pc, #372]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xe4>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fe20 	bl	80020f8 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fe1c 	bl	80020f8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	@ 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1ec      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	4b53      	ldr	r3, [pc, #332]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x10c>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d063      	beq.n	80035b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4b4c      	ldr	r3, [pc, #304]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034f6:	4b49      	ldr	r3, [pc, #292]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11c      	bne.n	800353c <HAL_RCC_OscConfig+0x18c>
 8003502:	4b46      	ldr	r3, [pc, #280]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b43      	ldr	r3, [pc, #268]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x176>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1c0      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b3d      	ldr	r3, [pc, #244]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4939      	ldr	r1, [pc, #228]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e03a      	b.n	80035b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d020      	beq.n	8003586 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b36      	ldr	r3, [pc, #216]	@ (8003620 <HAL_RCC_OscConfig+0x270>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fe fdd5 	bl	80020f8 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe fdd1 	bl	80020f8 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1a1      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	4b2d      	ldr	r3, [pc, #180]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b2a      	ldr	r3, [pc, #168]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	00db      	lsls	r3, r3, #3
 800357e:	4927      	ldr	r1, [pc, #156]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 8003580:	4313      	orrs	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b26      	ldr	r3, [pc, #152]	@ (8003620 <HAL_RCC_OscConfig+0x270>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fdb4 	bl	80020f8 <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7fe fdb0 	bl	80020f8 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e180      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0308 	and.w	r3, r3, #8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d03a      	beq.n	8003634 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d019      	beq.n	80035fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c6:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <HAL_RCC_OscConfig+0x274>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035cc:	f7fe fd94 	bl	80020f8 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035d4:	f7fe fd90 	bl	80020f8 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e160      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <HAL_RCC_OscConfig+0x26c>)
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d0f0      	beq.n	80035d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035f2:	2001      	movs	r0, #1
 80035f4:	f000 face 	bl	8003b94 <RCC_Delay>
 80035f8:	e01c      	b.n	8003634 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <HAL_RCC_OscConfig+0x274>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003600:	f7fe fd7a 	bl	80020f8 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003606:	e00f      	b.n	8003628 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003608:	f7fe fd76 	bl	80020f8 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d908      	bls.n	8003628 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e146      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	42420000 	.word	0x42420000
 8003624:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003628:	4b92      	ldr	r3, [pc, #584]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e9      	bne.n	8003608 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a6 	beq.w	800378e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003646:	4b8b      	ldr	r3, [pc, #556]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003652:	4b88      	ldr	r3, [pc, #544]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	4a87      	ldr	r2, [pc, #540]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800365c:	61d3      	str	r3, [r2, #28]
 800365e:	4b85      	ldr	r3, [pc, #532]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366a:	2301      	movs	r3, #1
 800366c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800366e:	4b82      	ldr	r3, [pc, #520]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003676:	2b00      	cmp	r3, #0
 8003678:	d118      	bne.n	80036ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800367a:	4b7f      	ldr	r3, [pc, #508]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7e      	ldr	r2, [pc, #504]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 8003680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003686:	f7fe fd37 	bl	80020f8 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800368e:	f7fe fd33 	bl	80020f8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	@ 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e103      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	4b75      	ldr	r3, [pc, #468]	@ (8003878 <HAL_RCC_OscConfig+0x4c8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x312>
 80036b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	f043 0301 	orr.w	r3, r3, #1
 80036be:	6213      	str	r3, [r2, #32]
 80036c0:	e02d      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0x334>
 80036ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	4a69      	ldr	r2, [pc, #420]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	6213      	str	r3, [r2, #32]
 80036d6:	4b67      	ldr	r3, [pc, #412]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	4a66      	ldr	r2, [pc, #408]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	f023 0304 	bic.w	r3, r3, #4
 80036e0:	6213      	str	r3, [r2, #32]
 80036e2:	e01c      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b05      	cmp	r3, #5
 80036ea:	d10c      	bne.n	8003706 <HAL_RCC_OscConfig+0x356>
 80036ec:	4b61      	ldr	r3, [pc, #388]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4a60      	ldr	r2, [pc, #384]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	6213      	str	r3, [r2, #32]
 8003704:	e00b      	b.n	800371e <HAL_RCC_OscConfig+0x36e>
 8003706:	4b5b      	ldr	r3, [pc, #364]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a5a      	ldr	r2, [pc, #360]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6213      	str	r3, [r2, #32]
 8003712:	4b58      	ldr	r3, [pc, #352]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	4a57      	ldr	r2, [pc, #348]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	f023 0304 	bic.w	r3, r3, #4
 800371c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d015      	beq.n	8003752 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003726:	f7fe fce7 	bl	80020f8 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe fce3 	bl	80020f8 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0b1      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b4b      	ldr	r3, [pc, #300]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCC_OscConfig+0x37e>
 8003750:	e014      	b.n	800377c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fe fcd1 	bl	80020f8 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe fccd 	bl	80020f8 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e09b      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003770:	4b40      	ldr	r3, [pc, #256]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1ee      	bne.n	800375a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d105      	bne.n	800378e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003782:	4b3c      	ldr	r3, [pc, #240]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	4a3b      	ldr	r2, [pc, #236]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800378c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 8087 	beq.w	80038a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003798:	4b36      	ldr	r3, [pc, #216]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 030c 	and.w	r3, r3, #12
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d061      	beq.n	8003868 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d146      	bne.n	800383a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b33      	ldr	r3, [pc, #204]	@ (800387c <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe fca1 	bl	80020f8 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fe fc9d 	bl	80020f8 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e06d      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037cc:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1f0      	bne.n	80037ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e0:	d108      	bne.n	80037f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037e2:	4b24      	ldr	r3, [pc, #144]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4921      	ldr	r1, [pc, #132]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a19      	ldr	r1, [r3, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	430b      	orrs	r3, r1
 8003806:	491b      	ldr	r1, [pc, #108]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <HAL_RCC_OscConfig+0x4cc>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fc71 	bl	80020f8 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fe fc6d 	bl	80020f8 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e03d      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800382c:	4b11      	ldr	r3, [pc, #68]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x46a>
 8003838:	e035      	b.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b10      	ldr	r3, [pc, #64]	@ (800387c <HAL_RCC_OscConfig+0x4cc>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fc5a 	bl	80020f8 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fc56 	bl	80020f8 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e026      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x498>
 8003866:	e01e      	b.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e019      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003880:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <HAL_RCC_OscConfig+0x500>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	429a      	cmp	r2, r3
 8003892:	d106      	bne.n	80038a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389e:	429a      	cmp	r2, r3
 80038a0:	d001      	beq.n	80038a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0d0      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d910      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b67      	ldr	r3, [pc, #412]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 0207 	bic.w	r2, r3, #7
 80038de:	4965      	ldr	r1, [pc, #404]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a58      	ldr	r2, [pc, #352]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800391a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a52      	ldr	r2, [pc, #328]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003932:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d040      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d115      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003972:	4b41      	ldr	r3, [pc, #260]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d109      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e073      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003982:	4b3d      	ldr	r3, [pc, #244]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003992:	4b39      	ldr	r3, [pc, #228]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f023 0203 	bic.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	4936      	ldr	r1, [pc, #216]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a4:	f7fe fba8 	bl	80020f8 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ac:	f7fe fba4 	bl	80020f8 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e053      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 020c 	and.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1eb      	bne.n	80039ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d4:	4b27      	ldr	r3, [pc, #156]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d210      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e2:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f023 0207 	bic.w	r2, r3, #7
 80039ea:	4922      	ldr	r1, [pc, #136]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	@ (8003a78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	@ (8003a7c <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	@ (8003a80 <HAL_RCC_ClockConfig+0x1cc>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <HAL_RCC_ClockConfig+0x1d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fb06 	bl	8002074 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40022000 	.word	0x40022000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	080087f0 	.word	0x080087f0
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	2300      	movs	r3, #0
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d002      	beq.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0x36>
 8003ab6:	e027      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab8:	4b19      	ldr	r3, [pc, #100]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aba:	613b      	str	r3, [r7, #16]
      break;
 8003abc:	e027      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	0c9b      	lsrs	r3, r3, #18
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4a17      	ldr	r2, [pc, #92]	@ (8003b24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ac8:	5cd3      	ldrb	r3, [r2, r3]
 8003aca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d010      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ad6:	4b11      	ldr	r3, [pc, #68]	@ (8003b1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0c5b      	lsrs	r3, r3, #17
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	4a11      	ldr	r2, [pc, #68]	@ (8003b28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ae2:	5cd3      	ldrb	r3, [r2, r3]
 8003ae4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aea:	fb03 f202 	mul.w	r2, r3, r2
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e004      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a0c      	ldr	r2, [pc, #48]	@ (8003b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	613b      	str	r3, [r7, #16]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0a:	613b      	str	r3, [r7, #16]
      break;
 8003b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0e:	693b      	ldr	r3, [r7, #16]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	007a1200 	.word	0x007a1200
 8003b24:	08008808 	.word	0x08008808
 8003b28:	08008818 	.word	0x08008818
 8003b2c:	003d0900 	.word	0x003d0900

08003b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b34:	4b02      	ldr	r3, [pc, #8]	@ (8003b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20000000 	.word	0x20000000

08003b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b48:	f7ff fff2 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	@ (8003b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08008800 	.word	0x08008800

08003b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b70:	f7ff ffde 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b74:	4602      	mov	r2, r0
 8003b76:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0adb      	lsrs	r3, r3, #11
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	4903      	ldr	r1, [pc, #12]	@ (8003b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b82:	5ccb      	ldrb	r3, [r1, r3]
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	08008800 	.word	0x08008800

08003b94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <RCC_Delay+0x34>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bcc <RCC_Delay+0x38>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	0a5b      	lsrs	r3, r3, #9
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bb0:	bf00      	nop
  }
  while (Delay --);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1e5a      	subs	r2, r3, #1
 8003bb6:	60fa      	str	r2, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f9      	bne.n	8003bb0 <RCC_Delay+0x1c>
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	20000000 	.word	0x20000000
 8003bcc:	10624dd3 	.word	0x10624dd3

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d07d      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003bec:	2300      	movs	r3, #0
 8003bee:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a4b      	ldr	r2, [pc, #300]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
 8003c08:	4b49      	ldr	r3, [pc, #292]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	60bb      	str	r3, [r7, #8]
 8003c12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b46      	ldr	r3, [pc, #280]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d118      	bne.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c24:	4b43      	ldr	r3, [pc, #268]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a42      	ldr	r2, [pc, #264]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c30:	f7fe fa62 	bl	80020f8 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c36:	e008      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c38:	f7fe fa5e 	bl	80020f8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	@ 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e06d      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c56:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d02e      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d027      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c74:	4b2e      	ldr	r3, [pc, #184]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c84:	4b2c      	ldr	r3, [pc, #176]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c8a:	4a29      	ldr	r2, [pc, #164]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d014      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9a:	f7fe fa2d 	bl	80020f8 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca0:	e00a      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca2:	f7fe fa29 	bl	80020f8 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e036      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ee      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4917      	ldr	r1, [pc, #92]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cdc:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	490b      	ldr	r1, [pc, #44]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0310 	and.w	r3, r3, #16
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d12:	4b07      	ldr	r3, [pc, #28]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4904      	ldr	r1, [pc, #16]	@ (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000
 8003d34:	40007000 	.word	0x40007000
 8003d38:	42420440 	.word	0x42420440

08003d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e041      	b.n	8003dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fe f882 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3304      	adds	r3, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	f000 fa12 	bl	80041a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b084      	sub	sp, #16
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01b      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f06f 0202 	mvn.w	r2, #2
 8003e0e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f9a1 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003e2a:	e005      	b.n	8003e38 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 f994 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9a3 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d020      	beq.n	8003e8a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01b      	beq.n	8003e8a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0204 	mvn.w	r2, #4
 8003e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f97b 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003e76:	e005      	b.n	8003e84 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f96e 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f97d 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d020      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01b      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f06f 0208 	mvn.w	r2, #8
 8003ea6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f955 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003ec2:	e005      	b.n	8003ed0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f948 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f957 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d01b      	beq.n	8003f22 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f06f 0210 	mvn.w	r2, #16
 8003ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f92f 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003f0e:	e005      	b.n	8003f1c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f922 	bl	800415a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 f931 	bl	800417e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f06f 0201 	mvn.w	r2, #1
 8003f3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f901 	bl	8004148 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00c      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d007      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa88 	bl	800447a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f901 	bl	8004190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00c      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d007      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0220 	mvn.w	r2, #32
 8003faa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fa5b 	bl	8004468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_ConfigClockSource+0x1c>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e0b4      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x186>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ff4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ffc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400e:	d03e      	beq.n	800408e <HAL_TIM_ConfigClockSource+0xd4>
 8004010:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004014:	f200 8087 	bhi.w	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800401c:	f000 8086 	beq.w	800412c <HAL_TIM_ConfigClockSource+0x172>
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004024:	d87f      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 8004026:	2b70      	cmp	r3, #112	@ 0x70
 8004028:	d01a      	beq.n	8004060 <HAL_TIM_ConfigClockSource+0xa6>
 800402a:	2b70      	cmp	r3, #112	@ 0x70
 800402c:	d87b      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 800402e:	2b60      	cmp	r3, #96	@ 0x60
 8004030:	d050      	beq.n	80040d4 <HAL_TIM_ConfigClockSource+0x11a>
 8004032:	2b60      	cmp	r3, #96	@ 0x60
 8004034:	d877      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 8004036:	2b50      	cmp	r3, #80	@ 0x50
 8004038:	d03c      	beq.n	80040b4 <HAL_TIM_ConfigClockSource+0xfa>
 800403a:	2b50      	cmp	r3, #80	@ 0x50
 800403c:	d873      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 800403e:	2b40      	cmp	r3, #64	@ 0x40
 8004040:	d058      	beq.n	80040f4 <HAL_TIM_ConfigClockSource+0x13a>
 8004042:	2b40      	cmp	r3, #64	@ 0x40
 8004044:	d86f      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 8004046:	2b30      	cmp	r3, #48	@ 0x30
 8004048:	d064      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0x15a>
 800404a:	2b30      	cmp	r3, #48	@ 0x30
 800404c:	d86b      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	2b20      	cmp	r3, #32
 8004050:	d060      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0x15a>
 8004052:	2b20      	cmp	r3, #32
 8004054:	d867      	bhi.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d05c      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0x15a>
 800405a:	2b10      	cmp	r3, #16
 800405c:	d05a      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0x15a>
 800405e:	e062      	b.n	8004126 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	f000 f97d 	bl	800436e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004082:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
      break;
 800408c:	e04f      	b.n	800412e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800409e:	f000 f966 	bl	800436e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040b0:	609a      	str	r2, [r3, #8]
      break;
 80040b2:	e03c      	b.n	800412e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c0:	461a      	mov	r2, r3
 80040c2:	f000 f8dd 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2150      	movs	r1, #80	@ 0x50
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 f934 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 80040d2:	e02c      	b.n	800412e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e0:	461a      	mov	r2, r3
 80040e2:	f000 f8fb 	bl	80042dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2160      	movs	r1, #96	@ 0x60
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f924 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 80040f2:	e01c      	b.n	800412e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004100:	461a      	mov	r2, r3
 8004102:	f000 f8bd 	bl	8004280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2140      	movs	r1, #64	@ 0x40
 800410c:	4618      	mov	r0, r3
 800410e:	f000 f914 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004112:	e00c      	b.n	800412e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f000 f90b 	bl	800433a <TIM_ITRx_SetConfig>
      break;
 8004124:	e003      	b.n	800412e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      break;
 800412a:	e000      	b.n	800412e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800412c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800413e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	bc80      	pop	{r7}
 8004158:	4770      	bx	lr

0800415a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr

0800416c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	bc80      	pop	{r7}
 800417c:	4770      	bx	lr

0800417e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800417e:	b480      	push	{r7}
 8004180:	b083      	sub	sp, #12
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
	...

080041a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004274 <TIM_Base_SetConfig+0xd0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004278 <TIM_Base_SetConfig+0xd4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x30>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a2b      	ldr	r2, [pc, #172]	@ (800427c <TIM_Base_SetConfig+0xd8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a22      	ldr	r2, [pc, #136]	@ (8004274 <TIM_Base_SetConfig+0xd0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004278 <TIM_Base_SetConfig+0xd4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x62>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1e      	ldr	r2, [pc, #120]	@ (800427c <TIM_Base_SetConfig+0xd8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800420c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a0d      	ldr	r2, [pc, #52]	@ (8004274 <TIM_Base_SetConfig+0xd0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d103      	bne.n	800424c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f023 0201 	bic.w	r2, r3, #1
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	611a      	str	r2, [r3, #16]
  }
}
 800426a:	bf00      	nop
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40012c00 	.word	0x40012c00
 8004278:	40000400 	.word	0x40000400
 800427c:	40000800 	.word	0x40000800

08004280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1b      	ldr	r3, [r3, #32]
 8004290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	f023 0201 	bic.w	r2, r3, #1
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f023 030a 	bic.w	r3, r3, #10
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f023 0210 	bic.w	r2, r3, #16
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	031b      	lsls	r3, r3, #12
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004318:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4313      	orrs	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr

0800433a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4313      	orrs	r3, r2
 8004358:	f043 0307 	orr.w	r3, r3, #7
 800435c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	609a      	str	r2, [r3, #8]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bc80      	pop	{r7}
 800436c:	4770      	bx	lr

0800436e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800436e:	b480      	push	{r7}
 8004370:	b087      	sub	sp, #28
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004388:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	021a      	lsls	r2, r3, #8
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	431a      	orrs	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	609a      	str	r2, [r3, #8]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e046      	b.n	8004452 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a16      	ldr	r2, [pc, #88]	@ (800445c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004410:	d009      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a12      	ldr	r2, [pc, #72]	@ (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a10      	ldr	r2, [pc, #64]	@ (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10c      	bne.n	8004440 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800442c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	4313      	orrs	r3, r2
 8004436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	40012c00 	.word	0x40012c00
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800

08004468 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	bc80      	pop	{r7}
 800448a:	4770      	bx	lr

0800448c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e042      	b.n	8004524 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fd fcfe 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	@ 0x24
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fe9b 	bl	800520c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08a      	sub	sp, #40	@ 0x28
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b20      	cmp	r3, #32
 800454a:	d175      	bne.n	8004638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d002      	beq.n	8004558 <HAL_UART_Transmit+0x2c>
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e06e      	b.n	800463a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2221      	movs	r2, #33	@ 0x21
 8004566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456a:	f7fd fdc5 	bl	80020f8 <HAL_GetTick>
 800456e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	88fa      	ldrh	r2, [r7, #6]
 8004574:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004584:	d108      	bne.n	8004598 <HAL_UART_Transmit+0x6c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d104      	bne.n	8004598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e003      	b.n	80045a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a0:	e02e      	b.n	8004600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2180      	movs	r1, #128	@ 0x80
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fbff 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e03a      	b.n	800463a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10b      	bne.n	80045e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	3302      	adds	r3, #2
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	e007      	b.n	80045f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	3301      	adds	r3, #1
 80045f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1cb      	bne.n	80045a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2140      	movs	r1, #64	@ 0x40
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fbcb 	bl	8004db0 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e006      	b.n	800463a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004634:	2300      	movs	r3, #0
 8004636:	e000      	b.n	800463a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b084      	sub	sp, #16
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	4613      	mov	r3, r2
 800464e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b20      	cmp	r3, #32
 800465a:	d112      	bne.n	8004682 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_UART_Receive_IT+0x26>
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e00b      	b.n	8004684 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	461a      	mov	r2, r3
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fbf2 	bl	8004e62 <UART_Start_Receive_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	e000      	b.n	8004684 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b0a0      	sub	sp, #128	@ 0x80
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80046a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046a6:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80046aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80046b4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80046b6:	667b      	str	r3, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80046ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80046c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3314      	adds	r3, #20
 80046ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80046d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80046e8:	657a      	str	r2, [r7, #84]	@ 0x54
 80046ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80046ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80046f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	2b01      	cmp	r3, #1
 8004702:	d119      	bne.n	8004738 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004716:	f023 0310 	bic.w	r3, r3, #16
 800471a:	677b      	str	r3, [r7, #116]	@ 0x74
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004724:	643a      	str	r2, [r7, #64]	@ 0x40
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800472a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e5      	bne.n	8004704 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b00      	cmp	r3, #0
 8004744:	d036      	beq.n	80047b4 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3314      	adds	r3, #20
 800474c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	e853 3f00 	ldrex	r3, [r3]
 8004754:	61fb      	str	r3, [r7, #28]
   return(result);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800475c:	673b      	str	r3, [r7, #112]	@ 0x70
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800476c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e5      	bne.n	8004746 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477e:	2b00      	cmp	r3, #0
 8004780:	d018      	beq.n	80047b4 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004786:	2200      	movs	r2, #0
 8004788:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478e:	4618      	mov	r0, r3
 8004790:	f7fe fa50 	bl	8002c34 <HAL_DMA_Abort>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00c      	beq.n	80047b4 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fc02 	bl	8002fa8 <HAL_DMA_GetError>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b20      	cmp	r3, #32
 80047a8:	d104      	bne.n	80047b4 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2210      	movs	r2, #16
 80047ae:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e052      	b.n	800485a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d036      	beq.n	8004830 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3314      	adds	r3, #20
 80047c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047e2:	61ba      	str	r2, [r7, #24]
 80047e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	613b      	str	r3, [r7, #16]
   return(result);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e5      	bne.n	80047c2 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004802:	2200      	movs	r2, #0
 8004804:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe fa12 	bl	8002c34 <HAL_DMA_Abort>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fbc4 	bl	8002fa8 <HAL_DMA_GetError>
 8004820:	4603      	mov	r3, r0
 8004822:	2b20      	cmp	r3, #32
 8004824:	d104      	bne.n	8004830 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2210      	movs	r2, #16
 800482a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e014      	b.n	800485a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3780      	adds	r7, #128	@ 0x80
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b0ba      	sub	sp, #232	@ 0xe8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004890:	2300      	movs	r3, #0
 8004892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80048a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_UART_IRQHandler+0x66>
 80048b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fbe3 	bl	800508e <UART_Receive_IT>
      return;
 80048c8:	e25b      	b.n	8004d82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80de 	beq.w	8004a90 <HAL_UART_IRQHandler+0x22c>
 80048d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d106      	bne.n	80048ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80d1 	beq.w	8004a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_UART_IRQHandler+0xae>
 80048fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_UART_IRQHandler+0xd2>
 800491e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f043 0202 	orr.w	r2, r3, #2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_UART_IRQHandler+0xf6>
 8004942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004952:	f043 0204 	orr.w	r2, r3, #4
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	2b00      	cmp	r3, #0
 8004964:	d011      	beq.n	800498a <HAL_UART_IRQHandler+0x126>
 8004966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004982:	f043 0208 	orr.w	r2, r3, #8
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 81f2 	beq.w	8004d78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_UART_IRQHandler+0x14e>
 80049a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fb6e 	bl	800508e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d103      	bne.n	80049de <HAL_UART_IRQHandler+0x17a>
 80049d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d04f      	beq.n	8004a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fa78 	bl	8004ed4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d041      	beq.n	8004a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3314      	adds	r3, #20
 80049f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1d9      	bne.n	80049f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d013      	beq.n	8004a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004c44 <HAL_UART_IRQHandler+0x3e0>)
 8004a4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fe f92a 	bl	8002cac <HAL_DMA_Abort_IT>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d016      	beq.n	8004a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e00e      	b.n	8004a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fc fc2a 	bl	80012c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a74:	e00a      	b.n	8004a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc fc26 	bl	80012c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	e006      	b.n	8004a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fc fc22 	bl	80012c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a8a:	e175      	b.n	8004d78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8c:	bf00      	nop
    return;
 8004a8e:	e173      	b.n	8004d78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	f040 814f 	bne.w	8004d38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f000 8148 	beq.w	8004d38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 8141 	beq.w	8004d38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f000 80b6 	beq.w	8004c48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8145 	beq.w	8004d7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004afa:	429a      	cmp	r2, r3
 8004afc:	f080 813e 	bcs.w	8004d7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	f000 8088 	beq.w	8004c24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1d9      	bne.n	8004b14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3314      	adds	r3, #20
 8004b66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b6a:	e853 3f00 	ldrex	r3, [r3]
 8004b6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3314      	adds	r3, #20
 8004b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b90:	e841 2300 	strex	r3, r2, [r1]
 8004b94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1e1      	bne.n	8004b60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3314      	adds	r3, #20
 8004ba2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3314      	adds	r3, #20
 8004bbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bc0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e3      	bne.n	8004b9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bec:	e853 3f00 	ldrex	r3, [r3]
 8004bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bf4:	f023 0310 	bic.w	r3, r3, #16
 8004bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	330c      	adds	r3, #12
 8004c02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e3      	bne.n	8004be2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe f808 	bl	8002c34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8ad 	bl	8004d9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c40:	e09c      	b.n	8004d7c <HAL_UART_IRQHandler+0x518>
 8004c42:	bf00      	nop
 8004c44:	08004f99 	.word	0x08004f99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 808e 	beq.w	8004d80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8089 	beq.w	8004d80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	330c      	adds	r3, #12
 8004c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c92:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e3      	bne.n	8004c6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3314      	adds	r3, #20
 8004cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3314      	adds	r3, #20
 8004cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cca:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1e3      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0310 	bic.w	r3, r3, #16
 8004d02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	330c      	adds	r3, #12
 8004d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d10:	61fa      	str	r2, [r7, #28]
 8004d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	69b9      	ldr	r1, [r7, #24]
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	e841 2300 	strex	r3, r2, [r1]
 8004d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1e3      	bne.n	8004cec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f832 	bl	8004d9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d36:	e023      	b.n	8004d80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_UART_IRQHandler+0x4f4>
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f935 	bl	8004fc0 <UART_Transmit_IT>
    return;
 8004d56:	e014      	b.n	8004d82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00e      	beq.n	8004d82 <HAL_UART_IRQHandler+0x51e>
 8004d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f974 	bl	800505e <UART_EndTransmit_IT>
    return;
 8004d76:	e004      	b.n	8004d82 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d80:	bf00      	nop
  }
}
 8004d82:	37e8      	adds	r7, #232	@ 0xe8
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
 8004da2:	460b      	mov	r3, r1
 8004da4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc0:	e03b      	b.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc2:	6a3b      	ldr	r3, [r7, #32]
 8004dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc8:	d037      	beq.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dca:	f7fd f995 	bl	80020f8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	6a3a      	ldr	r2, [r7, #32]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d302      	bcc.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e03a      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0304 	and.w	r3, r3, #4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d023      	beq.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b80      	cmp	r3, #128	@ 0x80
 8004df6:	d020      	beq.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b40      	cmp	r3, #64	@ 0x40
 8004dfc:	d01d      	beq.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d116      	bne.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f856 	bl	8004ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e00f      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4013      	ands	r3, r2
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d0b4      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b085      	sub	sp, #20
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	88fa      	ldrh	r2, [r7, #6]
 8004e7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	88fa      	ldrh	r2, [r7, #6]
 8004e80:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2222      	movs	r2, #34	@ 0x22
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ea6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695a      	ldr	r2, [r3, #20]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0220 	orr.w	r2, r2, #32
 8004ec6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bc80      	pop	{r7}
 8004ed2:	4770      	bx	lr

08004ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b095      	sub	sp, #84	@ 0x54
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	e853 3f00 	ldrex	r3, [r3]
 8004eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004efc:	643a      	str	r2, [r7, #64]	@ 0x40
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e5      	bne.n	8004edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3314      	adds	r3, #20
 8004f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d119      	bne.n	8004f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 0310 	bic.w	r3, r3, #16
 8004f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	330c      	adds	r3, #12
 8004f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f6c:	61ba      	str	r2, [r7, #24]
 8004f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6979      	ldr	r1, [r7, #20]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f8e:	bf00      	nop
 8004f90:	3754      	adds	r7, #84	@ 0x54
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7fc f988 	bl	80012c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b21      	cmp	r3, #33	@ 0x21
 8004fd2:	d13e      	bne.n	8005052 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fdc:	d114      	bne.n	8005008 <UART_Transmit_IT+0x48>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d110      	bne.n	8005008 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ffa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]
 8005006:	e008      	b.n	800501a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	1c59      	adds	r1, r3, #1
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6211      	str	r1, [r2, #32]
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b01      	subs	r3, #1
 8005022:	b29b      	uxth	r3, r3
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4619      	mov	r1, r3
 8005028:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800503c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68da      	ldr	r2, [r3, #12]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800504c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e000      	b.n	8005054 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005052:	2302      	movs	r3, #2
  }
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr

0800505e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005074:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff fe82 	bl	8004d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b08c      	sub	sp, #48	@ 0x30
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b22      	cmp	r3, #34	@ 0x22
 80050a0:	f040 80ae 	bne.w	8005200 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050ac:	d117      	bne.n	80050de <UART_Receive_IT+0x50>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d113      	bne.n	80050de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	629a      	str	r2, [r3, #40]	@ 0x28
 80050dc:	e026      	b.n	800512c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f0:	d007      	beq.n	8005102 <UART_Receive_IT+0x74>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10a      	bne.n	8005110 <UART_Receive_IT+0x82>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	b2da      	uxtb	r2, r3
 800510a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e008      	b.n	8005122 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800511c:	b2da      	uxtb	r2, r3
 800511e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005120:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005130:	b29b      	uxth	r3, r3
 8005132:	3b01      	subs	r3, #1
 8005134:	b29b      	uxth	r3, r3
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4619      	mov	r1, r3
 800513a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800513c:	2b00      	cmp	r3, #0
 800513e:	d15d      	bne.n	80051fc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0220 	bic.w	r2, r2, #32
 800514e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800515e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005182:	2b01      	cmp	r3, #1
 8005184:	d135      	bne.n	80051f2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	613b      	str	r3, [r7, #16]
   return(result);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f023 0310 	bic.w	r3, r3, #16
 80051a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051ac:	623a      	str	r2, [r7, #32]
 80051ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	69f9      	ldr	r1, [r7, #28]
 80051b2:	6a3a      	ldr	r2, [r7, #32]
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0310 	and.w	r3, r3, #16
 80051ca:	2b10      	cmp	r3, #16
 80051cc:	d10a      	bne.n	80051e4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fdd5 	bl	8004d9a <HAL_UARTEx_RxEventCallback>
 80051f0:	e002      	b.n	80051f8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f7fb fffa 	bl	80011ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e002      	b.n	8005202 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3730      	adds	r7, #48	@ 0x30
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	431a      	orrs	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005246:	f023 030c 	bic.w	r3, r3, #12
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	6812      	ldr	r2, [r2, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	430b      	orrs	r3, r1
 8005252:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <UART_SetConfig+0x114>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d103      	bne.n	800527c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7fe fc7a 	bl	8003b6c <HAL_RCC_GetPCLK2Freq>
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	e002      	b.n	8005282 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800527c:	f7fe fc62 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8005280:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4613      	mov	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	009a      	lsls	r2, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fbb2 f3f3 	udiv	r3, r2, r3
 8005298:	4a22      	ldr	r2, [pc, #136]	@ (8005324 <UART_SetConfig+0x118>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	095b      	lsrs	r3, r3, #5
 80052a0:	0119      	lsls	r1, r3, #4
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009a      	lsls	r2, r3, #2
 80052ac:	441a      	add	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005324 <UART_SetConfig+0x118>)
 80052ba:	fba3 0302 	umull	r0, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	2064      	movs	r0, #100	@ 0x64
 80052c2:	fb00 f303 	mul.w	r3, r0, r3
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	011b      	lsls	r3, r3, #4
 80052ca:	3332      	adds	r3, #50	@ 0x32
 80052cc:	4a15      	ldr	r2, [pc, #84]	@ (8005324 <UART_SetConfig+0x118>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052d8:	4419      	add	r1, r3
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	009a      	lsls	r2, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <UART_SetConfig+0x118>)
 80052f2:	fba3 0302 	umull	r0, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	2064      	movs	r0, #100	@ 0x64
 80052fa:	fb00 f303 	mul.w	r3, r0, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	3332      	adds	r3, #50	@ 0x32
 8005304:	4a07      	ldr	r2, [pc, #28]	@ (8005324 <UART_SetConfig+0x118>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	f003 020f 	and.w	r2, r3, #15
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	440a      	add	r2, r1
 8005316:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005318:	bf00      	nop
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40013800 	.word	0x40013800
 8005324:	51eb851f 	.word	0x51eb851f

08005328 <__NVIC_SetPriority>:
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	4603      	mov	r3, r0
 8005330:	6039      	str	r1, [r7, #0]
 8005332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005338:	2b00      	cmp	r3, #0
 800533a:	db0a      	blt.n	8005352 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	b2da      	uxtb	r2, r3
 8005340:	490c      	ldr	r1, [pc, #48]	@ (8005374 <__NVIC_SetPriority+0x4c>)
 8005342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005346:	0112      	lsls	r2, r2, #4
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	440b      	add	r3, r1
 800534c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005350:	e00a      	b.n	8005368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	4908      	ldr	r1, [pc, #32]	@ (8005378 <__NVIC_SetPriority+0x50>)
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	3b04      	subs	r3, #4
 8005360:	0112      	lsls	r2, r2, #4
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	440b      	add	r3, r1
 8005366:	761a      	strb	r2, [r3, #24]
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	bc80      	pop	{r7}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	e000e100 	.word	0xe000e100
 8005378:	e000ed00 	.word	0xe000ed00

0800537c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005380:	2100      	movs	r1, #0
 8005382:	f06f 0004 	mvn.w	r0, #4
 8005386:	f7ff ffcf 	bl	8005328 <__NVIC_SetPriority>
#endif
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005396:	f3ef 8305 	mrs	r3, IPSR
 800539a:	603b      	str	r3, [r7, #0]
  return(result);
 800539c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80053a2:	f06f 0305 	mvn.w	r3, #5
 80053a6:	607b      	str	r3, [r7, #4]
 80053a8:	e00c      	b.n	80053c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80053aa:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <osKernelInitialize+0x40>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80053b2:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <osKernelInitialize+0x40>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	e002      	b.n	80053c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053c4:	687b      	ldr	r3, [r7, #4]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bc80      	pop	{r7}
 80053ce:	4770      	bx	lr
 80053d0:	2000069c 	.word	0x2000069c

080053d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053da:	f3ef 8305 	mrs	r3, IPSR
 80053de:	603b      	str	r3, [r7, #0]
  return(result);
 80053e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80053e6:	f06f 0305 	mvn.w	r3, #5
 80053ea:	607b      	str	r3, [r7, #4]
 80053ec:	e010      	b.n	8005410 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053ee:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <osKernelStart+0x48>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d109      	bne.n	800540a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053f6:	f7ff ffc1 	bl	800537c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053fa:	4b08      	ldr	r3, [pc, #32]	@ (800541c <osKernelStart+0x48>)
 80053fc:	2202      	movs	r2, #2
 80053fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005400:	f001 f872 	bl	80064e8 <vTaskStartScheduler>
      stat = osOK;
 8005404:	2300      	movs	r3, #0
 8005406:	607b      	str	r3, [r7, #4]
 8005408:	e002      	b.n	8005410 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800540a:	f04f 33ff 	mov.w	r3, #4294967295
 800540e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005410:	687b      	ldr	r3, [r7, #4]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	2000069c 	.word	0x2000069c

08005420 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005420:	b580      	push	{r7, lr}
 8005422:	b08e      	sub	sp, #56	@ 0x38
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005430:	f3ef 8305 	mrs	r3, IPSR
 8005434:	617b      	str	r3, [r7, #20]
  return(result);
 8005436:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005438:	2b00      	cmp	r3, #0
 800543a:	d17e      	bne.n	800553a <osThreadNew+0x11a>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d07b      	beq.n	800553a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005442:	2380      	movs	r3, #128	@ 0x80
 8005444:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005446:	2318      	movs	r3, #24
 8005448:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d045      	beq.n	80054e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d002      	beq.n	8005468 <osThreadNew+0x48>
        name = attr->name;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <osThreadNew+0x6e>
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b38      	cmp	r3, #56	@ 0x38
 8005480:	d805      	bhi.n	800548e <osThreadNew+0x6e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <osThreadNew+0x72>
        return (NULL);
 800548e:	2300      	movs	r3, #0
 8005490:	e054      	b.n	800553c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	089b      	lsrs	r3, r3, #2
 80054a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00e      	beq.n	80054c8 <osThreadNew+0xa8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80054b0:	d90a      	bls.n	80054c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <osThreadNew+0xa8>
        mem = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e010      	b.n	80054ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10c      	bne.n	80054ea <osThreadNew+0xca>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d108      	bne.n	80054ea <osThreadNew+0xca>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <osThreadNew+0xca>
          mem = 0;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
 80054e4:	e001      	b.n	80054ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d110      	bne.n	8005512 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054f8:	9202      	str	r2, [sp, #8]
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	6a3a      	ldr	r2, [r7, #32]
 8005504:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fe12 	bl	8006130 <xTaskCreateStatic>
 800550c:	4603      	mov	r3, r0
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e013      	b.n	800553a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d110      	bne.n	800553a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005518:	6a3b      	ldr	r3, [r7, #32]
 800551a:	b29a      	uxth	r2, r3
 800551c:	f107 0310 	add.w	r3, r7, #16
 8005520:	9301      	str	r3, [sp, #4]
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 fe60 	bl	80061f0 <xTaskCreate>
 8005530:	4603      	mov	r3, r0
 8005532:	2b01      	cmp	r3, #1
 8005534:	d001      	beq.n	800553a <osThreadNew+0x11a>
            hTask = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800553a:	693b      	ldr	r3, [r7, #16]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3728      	adds	r7, #40	@ 0x28
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800554c:	f3ef 8305 	mrs	r3, IPSR
 8005550:	60bb      	str	r3, [r7, #8]
  return(result);
 8005552:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005554:	2b00      	cmp	r3, #0
 8005556:	d003      	beq.n	8005560 <osDelay+0x1c>
    stat = osErrorISR;
 8005558:	f06f 0305 	mvn.w	r3, #5
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e007      	b.n	8005570 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <osDelay+0x2c>
      vTaskDelay(ticks);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 ff86 	bl	800647c <vTaskDelay>
    }
  }

  return (stat);
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
	...

0800557c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a06      	ldr	r2, [pc, #24]	@ (80055a4 <vApplicationGetIdleTaskMemory+0x28>)
 800558c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a05      	ldr	r2, [pc, #20]	@ (80055a8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2280      	movs	r2, #128	@ 0x80
 8005598:	601a      	str	r2, [r3, #0]
}
 800559a:	bf00      	nop
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	200006a0 	.word	0x200006a0
 80055a8:	200006fc 	.word	0x200006fc

080055ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a07      	ldr	r2, [pc, #28]	@ (80055d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80055bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4a06      	ldr	r2, [pc, #24]	@ (80055dc <vApplicationGetTimerTaskMemory+0x30>)
 80055c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055ca:	601a      	str	r2, [r3, #0]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	200008fc 	.word	0x200008fc
 80055dc:	20000958 	.word	0x20000958

080055e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f103 0208 	add.w	r2, r3, #8
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f103 0208 	add.w	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f103 0208 	add.w	r2, r3, #8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr

08005636 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005636:	b480      	push	{r7}
 8005638:	b085      	sub	sp, #20
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr

0800567c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d103      	bne.n	800569c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	e00c      	b.n	80056b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3308      	adds	r3, #8
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e002      	b.n	80056aa <vListInsert+0x2e>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	60fb      	str	r3, [r7, #12]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d2f6      	bcs.n	80056a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685a      	ldr	r2, [r3, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
}
 80056e2:	bf00      	nop
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bc80      	pop	{r7}
 80056ea:	4770      	bx	lr

080056ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6892      	ldr	r2, [r2, #8]
 8005702:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6852      	ldr	r2, [r2, #4]
 800570c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d103      	bne.n	8005720 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	1e5a      	subs	r2, r3, #1
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr
	...

08005740 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10b      	bne.n	800576c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005766:	bf00      	nop
 8005768:	bf00      	nop
 800576a:	e7fd      	b.n	8005768 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800576c:	f002 f836 	bl	80077dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800577c:	fb01 f303 	mul.w	r3, r1, r3
 8005780:	441a      	add	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800579c:	3b01      	subs	r3, #1
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057a2:	fb01 f303 	mul.w	r3, r1, r3
 80057a6:	441a      	add	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	22ff      	movs	r2, #255	@ 0xff
 80057b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	22ff      	movs	r2, #255	@ 0xff
 80057b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d114      	bne.n	80057ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d01a      	beq.n	8005800 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3310      	adds	r3, #16
 80057ce:	4618      	mov	r0, r3
 80057d0:	f001 f916 	bl	8006a00 <xTaskRemoveFromEventList>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d012      	beq.n	8005800 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057da:	4b0d      	ldr	r3, [pc, #52]	@ (8005810 <xQueueGenericReset+0xd0>)
 80057dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	e009      	b.n	8005800 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3310      	adds	r3, #16
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fef5 	bl	80055e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3324      	adds	r3, #36	@ 0x24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fef0 	bl	80055e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005800:	f002 f81c 	bl	800783c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005804:	2301      	movs	r3, #1
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08e      	sub	sp, #56	@ 0x38
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800583a:	bf00      	nop
 800583c:	bf00      	nop
 800583e:	e7fd      	b.n	800583c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10b      	bne.n	800585e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	e7fd      	b.n	800585a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d002      	beq.n	800586a <xQueueGenericCreateStatic+0x56>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <xQueueGenericCreateStatic+0x5a>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <xQueueGenericCreateStatic+0x5c>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10b      	bne.n	800588c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	623b      	str	r3, [r7, #32]
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	e7fd      	b.n	8005888 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <xQueueGenericCreateStatic+0x84>
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <xQueueGenericCreateStatic+0x88>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <xQueueGenericCreateStatic+0x8a>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10b      	bne.n	80058ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	61fb      	str	r3, [r7, #28]
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop
 80058b8:	e7fd      	b.n	80058b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058ba:	2350      	movs	r3, #80	@ 0x50
 80058bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b50      	cmp	r3, #80	@ 0x50
 80058c2:	d00b      	beq.n	80058dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	61bb      	str	r3, [r7, #24]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80058e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f805 	bl	800590e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005906:	4618      	mov	r0, r3
 8005908:	3730      	adds	r7, #48	@ 0x30
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
 800591a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d103      	bne.n	800592a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e002      	b.n	8005930 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800593c:	2101      	movs	r1, #1
 800593e:	69b8      	ldr	r0, [r7, #24]
 8005940:	f7ff fefe 	bl	8005740 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	78fa      	ldrb	r2, [r7, #3]
 8005948:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08e      	sub	sp, #56	@ 0x38
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
 8005960:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800596a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10b      	bne.n	8005988 <xQueueGenericSend+0x34>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005982:	bf00      	nop
 8005984:	bf00      	nop
 8005986:	e7fd      	b.n	8005984 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d103      	bne.n	8005996 <xQueueGenericSend+0x42>
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <xQueueGenericSend+0x46>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <xQueueGenericSend+0x48>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <xQueueGenericSend+0x64>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	e7fd      	b.n	80059b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d103      	bne.n	80059c6 <xQueueGenericSend+0x72>
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <xQueueGenericSend+0x76>
 80059c6:	2301      	movs	r3, #1
 80059c8:	e000      	b.n	80059cc <xQueueGenericSend+0x78>
 80059ca:	2300      	movs	r3, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <xQueueGenericSend+0x94>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	623b      	str	r3, [r7, #32]
}
 80059e2:	bf00      	nop
 80059e4:	bf00      	nop
 80059e6:	e7fd      	b.n	80059e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059e8:	f001 f9ca 	bl	8006d80 <xTaskGetSchedulerState>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <xQueueGenericSend+0xa4>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <xQueueGenericSend+0xa8>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <xQueueGenericSend+0xaa>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <xQueueGenericSend+0xc6>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	61fb      	str	r3, [r7, #28]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a1a:	f001 fedf 	bl	80077dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <xQueueGenericSend+0xdc>
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d129      	bne.n	8005a84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a36:	f000 fa0f 	bl	8005e58 <prvCopyDataToQueue>
 8005a3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d010      	beq.n	8005a66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	3324      	adds	r3, #36	@ 0x24
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 ffd9 	bl	8006a00 <xTaskRemoveFromEventList>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d013      	beq.n	8005a7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a54:	4b3f      	ldr	r3, [pc, #252]	@ (8005b54 <xQueueGenericSend+0x200>)
 8005a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	e00a      	b.n	8005a7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a6c:	4b39      	ldr	r3, [pc, #228]	@ (8005b54 <xQueueGenericSend+0x200>)
 8005a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a7c:	f001 fede 	bl	800783c <vPortExitCritical>
				return pdPASS;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e063      	b.n	8005b4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a8a:	f001 fed7 	bl	800783c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e05c      	b.n	8005b4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a98:	f107 0314 	add.w	r3, r7, #20
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 f813 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005aa6:	f001 fec9 	bl	800783c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005aaa:	f000 fd85 	bl	80065b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005aae:	f001 fe95 	bl	80077dc <vPortEnterCritical>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ab8:	b25b      	sxtb	r3, r3
 8005aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005abe:	d103      	bne.n	8005ac8 <xQueueGenericSend+0x174>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ace:	b25b      	sxtb	r3, r3
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d103      	bne.n	8005ade <xQueueGenericSend+0x18a>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ade:	f001 fead 	bl	800783c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ae2:	1d3a      	adds	r2, r7, #4
 8005ae4:	f107 0314 	add.w	r3, r7, #20
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 f802 	bl	8006af4 <xTaskCheckForTimeOut>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d124      	bne.n	8005b40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005af6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005af8:	f000 faa6 	bl	8006048 <prvIsQueueFull>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d018      	beq.n	8005b34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b04:	3310      	adds	r3, #16
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 ff26 	bl	800695c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b12:	f000 fa31 	bl	8005f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b16:	f000 fd5d 	bl	80065d4 <xTaskResumeAll>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f47f af7c 	bne.w	8005a1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b22:	4b0c      	ldr	r3, [pc, #48]	@ (8005b54 <xQueueGenericSend+0x200>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	e772      	b.n	8005a1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b36:	f000 fa1f 	bl	8005f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b3a:	f000 fd4b 	bl	80065d4 <xTaskResumeAll>
 8005b3e:	e76c      	b.n	8005a1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b42:	f000 fa19 	bl	8005f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b46:	f000 fd45 	bl	80065d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3738      	adds	r7, #56	@ 0x38
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b090      	sub	sp, #64	@ 0x40
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <xQueueGenericSendFromISR+0x3e>
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <xQueueGenericSendFromISR+0x42>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <xQueueGenericSendFromISR+0x44>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10b      	bne.n	8005bb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bb2:	bf00      	nop
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d103      	bne.n	8005bc6 <xQueueGenericSendFromISR+0x6e>
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <xQueueGenericSendFromISR+0x72>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <xQueueGenericSendFromISR+0x74>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10b      	bne.n	8005be8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	623b      	str	r3, [r7, #32]
}
 8005be2:	bf00      	nop
 8005be4:	bf00      	nop
 8005be6:	e7fd      	b.n	8005be4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005be8:	f001 feba 	bl	8007960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bec:	f3ef 8211 	mrs	r2, BASEPRI
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	61fa      	str	r2, [r7, #28]
 8005c02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <xQueueGenericSendFromISR+0xc2>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d12f      	bne.n	8005c7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c30:	f000 f912 	bl	8005e58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d112      	bne.n	8005c64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d016      	beq.n	8005c74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c48:	3324      	adds	r3, #36	@ 0x24
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 fed8 	bl	8006a00 <xTaskRemoveFromEventList>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00e      	beq.n	8005c74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	e007      	b.n	8005c74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c68:	3301      	adds	r3, #1
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	b25a      	sxtb	r2, r3
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c74:	2301      	movs	r3, #1
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c78:	e001      	b.n	8005c7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3740      	adds	r7, #64	@ 0x40
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	@ 0x30
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <xQueueReceive+0x32>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	623b      	str	r3, [r7, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <xQueueReceive+0x40>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <xQueueReceive+0x44>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <xQueueReceive+0x46>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <xQueueReceive+0x62>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	61fb      	str	r3, [r7, #28]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf6:	f001 f843 	bl	8006d80 <xTaskGetSchedulerState>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <xQueueReceive+0x72>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <xQueueReceive+0x76>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <xQueueReceive+0x78>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <xQueueReceive+0x94>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	61bb      	str	r3, [r7, #24]
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d28:	f001 fd58 	bl	80077dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01f      	beq.n	8005d78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d3c:	f000 f8f6 	bl	8005f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	3310      	adds	r3, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fe53 	bl	8006a00 <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b3c      	ldr	r3, [pc, #240]	@ (8005e54 <xQueueReceive+0x1c0>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d70:	f001 fd64 	bl	800783c <vPortExitCritical>
				return pdPASS;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e069      	b.n	8005e4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7e:	f001 fd5d 	bl	800783c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e062      	b.n	8005e4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d8c:	f107 0310 	add.w	r3, r7, #16
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fe99 	bl	8006ac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9a:	f001 fd4f 	bl	800783c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9e:	f000 fc0b 	bl	80065b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da2:	f001 fd1b 	bl	80077dc <vPortEnterCritical>
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d103      	bne.n	8005dbc <xQueueReceive+0x128>
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <xQueueReceive+0x13e>
 8005dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd2:	f001 fd33 	bl	800783c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fe88 	bl	8006af4 <xTaskCheckForTimeOut>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d123      	bne.n	8005e32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dec:	f000 f916 	bl	800601c <prvIsQueueEmpty>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d017      	beq.n	8005e26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df8:	3324      	adds	r3, #36	@ 0x24
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fdac 	bl	800695c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e06:	f000 f8b7 	bl	8005f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e0a:	f000 fbe3 	bl	80065d4 <xTaskResumeAll>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d189      	bne.n	8005d28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e14:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <xQueueReceive+0x1c0>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	e780      	b.n	8005d28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e28:	f000 f8a6 	bl	8005f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2c:	f000 fbd2 	bl	80065d4 <xTaskResumeAll>
 8005e30:	e77a      	b.n	8005d28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e34:	f000 f8a0 	bl	8005f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e38:	f000 fbcc 	bl	80065d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3e:	f000 f8ed 	bl	800601c <prvIsQueueEmpty>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f43f af6f 	beq.w	8005d28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3730      	adds	r7, #48	@ 0x30
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d14d      	bne.n	8005f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 ff9a 	bl	8006dbc <xTaskPriorityDisinherit>
 8005e88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
 8005e90:	e043      	b.n	8005f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d119      	bne.n	8005ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6858      	ldr	r0, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	f001 ffba 	bl	8007e1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d32b      	bcc.n	8005f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	e026      	b.n	8005f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68d8      	ldr	r0, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	f001 ffa0 	bl	8007e1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d207      	bcs.n	8005f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f00:	425b      	negs	r3, r3
 8005f02:	441a      	add	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d105      	bne.n	8005f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f22:	697b      	ldr	r3, [r7, #20]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d018      	beq.n	8005f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d303      	bcc.n	8005f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68d9      	ldr	r1, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6838      	ldr	r0, [r7, #0]
 8005f6c:	f001 ff56 	bl	8007e1c <memcpy>
	}
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f80:	f001 fc2c 	bl	80077dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f8c:	e011      	b.n	8005fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d012      	beq.n	8005fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3324      	adds	r3, #36	@ 0x24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fd30 	bl	8006a00 <xTaskRemoveFromEventList>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fa6:	f000 fe09 	bl	8006bbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dce9      	bgt.n	8005f8e <prvUnlockQueue+0x16>
 8005fba:	e000      	b.n	8005fbe <prvUnlockQueue+0x46>
					break;
 8005fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	22ff      	movs	r2, #255	@ 0xff
 8005fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fc6:	f001 fc39 	bl	800783c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fca:	f001 fc07 	bl	80077dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fd6:	e011      	b.n	8005ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d012      	beq.n	8006006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3310      	adds	r3, #16
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fd0b 	bl	8006a00 <xTaskRemoveFromEventList>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff0:	f000 fde4 	bl	8006bbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006000:	2b00      	cmp	r3, #0
 8006002:	dce9      	bgt.n	8005fd8 <prvUnlockQueue+0x60>
 8006004:	e000      	b.n	8006008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	22ff      	movs	r2, #255	@ 0xff
 800600c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006010:	f001 fc14 	bl	800783c <vPortExitCritical>
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006024:	f001 fbda 	bl	80077dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e001      	b.n	800603a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800603a:	f001 fbff 	bl	800783c <vPortExitCritical>

	return xReturn;
 800603e:	68fb      	ldr	r3, [r7, #12]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006050:	f001 fbc4 	bl	80077dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605c:	429a      	cmp	r2, r3
 800605e:	d102      	bne.n	8006066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e001      	b.n	800606a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800606a:	f001 fbe7 	bl	800783c <vPortExitCritical>

	return xReturn;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e014      	b.n	80060b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006088:	4a0e      	ldr	r2, [pc, #56]	@ (80060c4 <vQueueAddToRegistry+0x4c>)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10b      	bne.n	80060ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006094:	490b      	ldr	r1, [pc, #44]	@ (80060c4 <vQueueAddToRegistry+0x4c>)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800609e:	4a09      	ldr	r2, [pc, #36]	@ (80060c4 <vQueueAddToRegistry+0x4c>)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4413      	add	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80060aa:	e006      	b.n	80060ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3301      	adds	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b07      	cmp	r3, #7
 80060b6:	d9e7      	bls.n	8006088 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	bc80      	pop	{r7}
 80060c2:	4770      	bx	lr
 80060c4:	20000d58 	.word	0x20000d58

080060c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80060d8:	f001 fb80 	bl	80077dc <vPortEnterCritical>
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060e2:	b25b      	sxtb	r3, r3
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d103      	bne.n	80060f2 <vQueueWaitForMessageRestricted+0x2a>
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060f8:	b25b      	sxtb	r3, r3
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d103      	bne.n	8006108 <vQueueWaitForMessageRestricted+0x40>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006108:	f001 fb98 	bl	800783c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	3324      	adds	r3, #36	@ 0x24
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	4618      	mov	r0, r3
 800611e:	f000 fc43 	bl	80069a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006122:	6978      	ldr	r0, [r7, #20]
 8006124:	f7ff ff28 	bl	8005f78 <prvUnlockQueue>
	}
 8006128:	bf00      	nop
 800612a:	3718      	adds	r7, #24
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08e      	sub	sp, #56	@ 0x38
 8006134:	af04      	add	r7, sp, #16
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
 800613c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800613e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800615c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10b      	bne.n	800617a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	61fb      	str	r3, [r7, #28]
}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	e7fd      	b.n	8006176 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800617a:	235c      	movs	r3, #92	@ 0x5c
 800617c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b5c      	cmp	r3, #92	@ 0x5c
 8006182:	d00b      	beq.n	800619c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	61bb      	str	r3, [r7, #24]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800619c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d01e      	beq.n	80061e2 <xTaskCreateStatic+0xb2>
 80061a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d01b      	beq.n	80061e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80061ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80061bc:	2300      	movs	r3, #0
 80061be:	9303      	str	r3, [sp, #12]
 80061c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c2:	9302      	str	r3, [sp, #8]
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	9301      	str	r3, [sp, #4]
 80061ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	68b9      	ldr	r1, [r7, #8]
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f000 f850 	bl	800627a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80061dc:	f000 f8de 	bl	800639c <prvAddNewTaskToReadyList>
 80061e0:	e001      	b.n	80061e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80061e6:	697b      	ldr	r3, [r7, #20]
	}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3728      	adds	r7, #40	@ 0x28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08c      	sub	sp, #48	@ 0x30
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	603b      	str	r3, [r7, #0]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f001 fbeb 	bl	80079e0 <pvPortMalloc>
 800620a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00e      	beq.n	8006230 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006212:	205c      	movs	r0, #92	@ 0x5c
 8006214:	f001 fbe4 	bl	80079e0 <pvPortMalloc>
 8006218:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	631a      	str	r2, [r3, #48]	@ 0x30
 8006226:	e005      	b.n	8006234 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	f001 fca7 	bl	8007b7c <vPortFree>
 800622e:	e001      	b.n	8006234 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d017      	beq.n	800626a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006242:	88fa      	ldrh	r2, [r7, #6]
 8006244:	2300      	movs	r3, #0
 8006246:	9303      	str	r3, [sp, #12]
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	9302      	str	r3, [sp, #8]
 800624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f80e 	bl	800627a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800625e:	69f8      	ldr	r0, [r7, #28]
 8006260:	f000 f89c 	bl	800639c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006264:	2301      	movs	r3, #1
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	e002      	b.n	8006270 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800626a:	f04f 33ff 	mov.w	r3, #4294967295
 800626e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006270:	69bb      	ldr	r3, [r7, #24]
	}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b088      	sub	sp, #32
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	461a      	mov	r2, r3
 8006292:	21a5      	movs	r1, #165	@ 0xa5
 8006294:	f001 fd90 	bl	8007db8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80062a2:	3b01      	subs	r3, #1
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d00b      	beq.n	80062d4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	617b      	str	r3, [r7, #20]
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	e7fd      	b.n	80062d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d01f      	beq.n	800631a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e012      	b.n	8006306 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4413      	add	r3, r2
 80062e6:	7819      	ldrb	r1, [r3, #0]
 80062e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	3334      	adds	r3, #52	@ 0x34
 80062f0:	460a      	mov	r2, r1
 80062f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d006      	beq.n	800630e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	3301      	adds	r3, #1
 8006304:	61fb      	str	r3, [r7, #28]
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	2b0f      	cmp	r3, #15
 800630a:	d9e9      	bls.n	80062e0 <prvInitialiseNewTask+0x66>
 800630c:	e000      	b.n	8006310 <prvInitialiseNewTask+0x96>
			{
				break;
 800630e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006318:	e003      	b.n	8006322 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800631a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006324:	2b37      	cmp	r3, #55	@ 0x37
 8006326:	d901      	bls.n	800632c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006328:	2337      	movs	r3, #55	@ 0x37
 800632a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800632c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006336:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633a:	2200      	movs	r2, #0
 800633c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7ff f96b 	bl	800561e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800634a:	3318      	adds	r3, #24
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff f966 	bl	800561e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006354:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006356:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800635e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006360:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800636a:	2200      	movs	r2, #0
 800636c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	68f9      	ldr	r1, [r7, #12]
 800637a:	69b8      	ldr	r0, [r7, #24]
 800637c:	f001 f93a 	bl	80075f4 <pxPortInitialiseStack>
 8006380:	4602      	mov	r2, r0
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d002      	beq.n	8006392 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006392:	bf00      	nop
 8006394:	3720      	adds	r7, #32
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80063a4:	f001 fa1a 	bl	80077dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80063a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006460 <prvAddNewTaskToReadyList+0xc4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006460 <prvAddNewTaskToReadyList+0xc4>)
 80063b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80063b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006464 <prvAddNewTaskToReadyList+0xc8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d109      	bne.n	80063ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80063ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006464 <prvAddNewTaskToReadyList+0xc8>)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80063c0:	4b27      	ldr	r3, [pc, #156]	@ (8006460 <prvAddNewTaskToReadyList+0xc4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d110      	bne.n	80063ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80063c8:	f000 fc1c 	bl	8006c04 <prvInitialiseTaskLists>
 80063cc:	e00d      	b.n	80063ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80063ce:	4b26      	ldr	r3, [pc, #152]	@ (8006468 <prvAddNewTaskToReadyList+0xcc>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063d6:	4b23      	ldr	r3, [pc, #140]	@ (8006464 <prvAddNewTaskToReadyList+0xc8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d802      	bhi.n	80063ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80063e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006464 <prvAddNewTaskToReadyList+0xc8>)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80063ea:	4b20      	ldr	r3, [pc, #128]	@ (800646c <prvAddNewTaskToReadyList+0xd0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	3301      	adds	r3, #1
 80063f0:	4a1e      	ldr	r2, [pc, #120]	@ (800646c <prvAddNewTaskToReadyList+0xd0>)
 80063f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063f4:	4b1d      	ldr	r3, [pc, #116]	@ (800646c <prvAddNewTaskToReadyList+0xd0>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006400:	4b1b      	ldr	r3, [pc, #108]	@ (8006470 <prvAddNewTaskToReadyList+0xd4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d903      	bls.n	8006410 <prvAddNewTaskToReadyList+0x74>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	4a18      	ldr	r2, [pc, #96]	@ (8006470 <prvAddNewTaskToReadyList+0xd4>)
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4a15      	ldr	r2, [pc, #84]	@ (8006474 <prvAddNewTaskToReadyList+0xd8>)
 800641e:	441a      	add	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7ff f905 	bl	8005636 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800642c:	f001 fa06 	bl	800783c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006430:	4b0d      	ldr	r3, [pc, #52]	@ (8006468 <prvAddNewTaskToReadyList+0xcc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00e      	beq.n	8006456 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <prvAddNewTaskToReadyList+0xc8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	429a      	cmp	r2, r3
 8006444:	d207      	bcs.n	8006456 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006446:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <prvAddNewTaskToReadyList+0xdc>)
 8006448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006456:	bf00      	nop
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	2000126c 	.word	0x2000126c
 8006464:	20000d98 	.word	0x20000d98
 8006468:	20001278 	.word	0x20001278
 800646c:	20001288 	.word	0x20001288
 8006470:	20001274 	.word	0x20001274
 8006474:	20000d9c 	.word	0x20000d9c
 8006478:	e000ed04 	.word	0xe000ed04

0800647c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006484:	2300      	movs	r3, #0
 8006486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d018      	beq.n	80064c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <vTaskDelay+0x64>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00b      	beq.n	80064ae <vTaskDelay+0x32>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60bb      	str	r3, [r7, #8]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80064ae:	f000 f883 	bl	80065b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fcf1 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80064ba:	f000 f88b 	bl	80065d4 <xTaskResumeAll>
 80064be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d107      	bne.n	80064d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80064c6:	4b07      	ldr	r3, [pc, #28]	@ (80064e4 <vTaskDelay+0x68>)
 80064c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064d6:	bf00      	nop
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20001294 	.word	0x20001294
 80064e4:	e000ed04 	.word	0xe000ed04

080064e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08a      	sub	sp, #40	@ 0x28
 80064ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80064f6:	463a      	mov	r2, r7
 80064f8:	1d39      	adds	r1, r7, #4
 80064fa:	f107 0308 	add.w	r3, r7, #8
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff f83c 	bl	800557c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68ba      	ldr	r2, [r7, #8]
 800650a:	9202      	str	r2, [sp, #8]
 800650c:	9301      	str	r3, [sp, #4]
 800650e:	2300      	movs	r3, #0
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2300      	movs	r3, #0
 8006514:	460a      	mov	r2, r1
 8006516:	4922      	ldr	r1, [pc, #136]	@ (80065a0 <vTaskStartScheduler+0xb8>)
 8006518:	4822      	ldr	r0, [pc, #136]	@ (80065a4 <vTaskStartScheduler+0xbc>)
 800651a:	f7ff fe09 	bl	8006130 <xTaskCreateStatic>
 800651e:	4603      	mov	r3, r0
 8006520:	4a21      	ldr	r2, [pc, #132]	@ (80065a8 <vTaskStartScheduler+0xc0>)
 8006522:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006524:	4b20      	ldr	r3, [pc, #128]	@ (80065a8 <vTaskStartScheduler+0xc0>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800652c:	2301      	movs	r3, #1
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	e001      	b.n	8006536 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d102      	bne.n	8006542 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800653c:	f000 fd02 	bl	8006f44 <xTimerCreateTimerTask>
 8006540:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d116      	bne.n	8006576 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	613b      	str	r3, [r7, #16]
}
 800655a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800655c:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <vTaskStartScheduler+0xc4>)
 800655e:	f04f 32ff 	mov.w	r2, #4294967295
 8006562:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006564:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <vTaskStartScheduler+0xc8>)
 8006566:	2201      	movs	r2, #1
 8006568:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800656a:	4b12      	ldr	r3, [pc, #72]	@ (80065b4 <vTaskStartScheduler+0xcc>)
 800656c:	2200      	movs	r2, #0
 800656e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006570:	f001 f8c2 	bl	80076f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006574:	e00f      	b.n	8006596 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d10b      	bne.n	8006596 <vTaskStartScheduler+0xae>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	60fb      	str	r3, [r7, #12]
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <vTaskStartScheduler+0xaa>
}
 8006596:	bf00      	nop
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	08008790 	.word	0x08008790
 80065a4:	08006bd5 	.word	0x08006bd5
 80065a8:	20001290 	.word	0x20001290
 80065ac:	2000128c 	.word	0x2000128c
 80065b0:	20001278 	.word	0x20001278
 80065b4:	20001270 	.word	0x20001270

080065b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80065bc:	4b04      	ldr	r3, [pc, #16]	@ (80065d0 <vTaskSuspendAll+0x18>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	3301      	adds	r3, #1
 80065c2:	4a03      	ldr	r2, [pc, #12]	@ (80065d0 <vTaskSuspendAll+0x18>)
 80065c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80065c6:	bf00      	nop
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20001294 	.word	0x20001294

080065d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80065e2:	4b42      	ldr	r3, [pc, #264]	@ (80066ec <xTaskResumeAll+0x118>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10b      	bne.n	8006602 <xTaskResumeAll+0x2e>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	e7fd      	b.n	80065fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006602:	f001 f8eb 	bl	80077dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006606:	4b39      	ldr	r3, [pc, #228]	@ (80066ec <xTaskResumeAll+0x118>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3b01      	subs	r3, #1
 800660c:	4a37      	ldr	r2, [pc, #220]	@ (80066ec <xTaskResumeAll+0x118>)
 800660e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006610:	4b36      	ldr	r3, [pc, #216]	@ (80066ec <xTaskResumeAll+0x118>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d162      	bne.n	80066de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006618:	4b35      	ldr	r3, [pc, #212]	@ (80066f0 <xTaskResumeAll+0x11c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d05e      	beq.n	80066de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006620:	e02f      	b.n	8006682 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006622:	4b34      	ldr	r3, [pc, #208]	@ (80066f4 <xTaskResumeAll+0x120>)
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3318      	adds	r3, #24
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff f85c 	bl	80056ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3304      	adds	r3, #4
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff f857 	bl	80056ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006642:	4b2d      	ldr	r3, [pc, #180]	@ (80066f8 <xTaskResumeAll+0x124>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	429a      	cmp	r2, r3
 8006648:	d903      	bls.n	8006652 <xTaskResumeAll+0x7e>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664e:	4a2a      	ldr	r2, [pc, #168]	@ (80066f8 <xTaskResumeAll+0x124>)
 8006650:	6013      	str	r3, [r2, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4a27      	ldr	r2, [pc, #156]	@ (80066fc <xTaskResumeAll+0x128>)
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3304      	adds	r3, #4
 8006666:	4619      	mov	r1, r3
 8006668:	4610      	mov	r0, r2
 800666a:	f7fe ffe4 	bl	8005636 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006672:	4b23      	ldr	r3, [pc, #140]	@ (8006700 <xTaskResumeAll+0x12c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006678:	429a      	cmp	r2, r3
 800667a:	d302      	bcc.n	8006682 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800667c:	4b21      	ldr	r3, [pc, #132]	@ (8006704 <xTaskResumeAll+0x130>)
 800667e:	2201      	movs	r2, #1
 8006680:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006682:	4b1c      	ldr	r3, [pc, #112]	@ (80066f4 <xTaskResumeAll+0x120>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1cb      	bne.n	8006622 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006690:	f000 fb56 	bl	8006d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006694:	4b1c      	ldr	r3, [pc, #112]	@ (8006708 <xTaskResumeAll+0x134>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d010      	beq.n	80066c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066a0:	f000 f844 	bl	800672c <xTaskIncrementTick>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80066aa:	4b16      	ldr	r3, [pc, #88]	@ (8006704 <xTaskResumeAll+0x130>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f1      	bne.n	80066a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80066bc:	4b12      	ldr	r3, [pc, #72]	@ (8006708 <xTaskResumeAll+0x134>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80066c2:	4b10      	ldr	r3, [pc, #64]	@ (8006704 <xTaskResumeAll+0x130>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80066ca:	2301      	movs	r3, #1
 80066cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80066ce:	4b0f      	ldr	r3, [pc, #60]	@ (800670c <xTaskResumeAll+0x138>)
 80066d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	f3bf 8f4f 	dsb	sy
 80066da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066de:	f001 f8ad 	bl	800783c <vPortExitCritical>

	return xAlreadyYielded;
 80066e2:	68bb      	ldr	r3, [r7, #8]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3710      	adds	r7, #16
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	20001294 	.word	0x20001294
 80066f0:	2000126c 	.word	0x2000126c
 80066f4:	2000122c 	.word	0x2000122c
 80066f8:	20001274 	.word	0x20001274
 80066fc:	20000d9c 	.word	0x20000d9c
 8006700:	20000d98 	.word	0x20000d98
 8006704:	20001280 	.word	0x20001280
 8006708:	2000127c 	.word	0x2000127c
 800670c:	e000ed04 	.word	0xe000ed04

08006710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006716:	4b04      	ldr	r3, [pc, #16]	@ (8006728 <xTaskGetTickCount+0x18>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800671c:	687b      	ldr	r3, [r7, #4]
}
 800671e:	4618      	mov	r0, r3
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	bc80      	pop	{r7}
 8006726:	4770      	bx	lr
 8006728:	20001270 	.word	0x20001270

0800672c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006736:	4b4f      	ldr	r3, [pc, #316]	@ (8006874 <xTaskIncrementTick+0x148>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 8090 	bne.w	8006860 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006740:	4b4d      	ldr	r3, [pc, #308]	@ (8006878 <xTaskIncrementTick+0x14c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006748:	4a4b      	ldr	r2, [pc, #300]	@ (8006878 <xTaskIncrementTick+0x14c>)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d121      	bne.n	8006798 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006754:	4b49      	ldr	r3, [pc, #292]	@ (800687c <xTaskIncrementTick+0x150>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <xTaskIncrementTick+0x4a>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	603b      	str	r3, [r7, #0]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <xTaskIncrementTick+0x46>
 8006776:	4b41      	ldr	r3, [pc, #260]	@ (800687c <xTaskIncrementTick+0x150>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	4b40      	ldr	r3, [pc, #256]	@ (8006880 <xTaskIncrementTick+0x154>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a3e      	ldr	r2, [pc, #248]	@ (800687c <xTaskIncrementTick+0x150>)
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	4a3e      	ldr	r2, [pc, #248]	@ (8006880 <xTaskIncrementTick+0x154>)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	4b3e      	ldr	r3, [pc, #248]	@ (8006884 <xTaskIncrementTick+0x158>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	4a3c      	ldr	r2, [pc, #240]	@ (8006884 <xTaskIncrementTick+0x158>)
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	f000 fad4 	bl	8006d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006798:	4b3b      	ldr	r3, [pc, #236]	@ (8006888 <xTaskIncrementTick+0x15c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d349      	bcc.n	8006836 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a2:	4b36      	ldr	r3, [pc, #216]	@ (800687c <xTaskIncrementTick+0x150>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ac:	4b36      	ldr	r3, [pc, #216]	@ (8006888 <xTaskIncrementTick+0x15c>)
 80067ae:	f04f 32ff 	mov.w	r2, #4294967295
 80067b2:	601a      	str	r2, [r3, #0]
					break;
 80067b4:	e03f      	b.n	8006836 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b6:	4b31      	ldr	r3, [pc, #196]	@ (800687c <xTaskIncrementTick+0x150>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d203      	bcs.n	80067d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80067ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006888 <xTaskIncrementTick+0x15c>)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80067d4:	e02f      	b.n	8006836 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	3304      	adds	r3, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe ff86 	bl	80056ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d004      	beq.n	80067f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	3318      	adds	r3, #24
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe ff7d 	bl	80056ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f6:	4b25      	ldr	r3, [pc, #148]	@ (800688c <xTaskIncrementTick+0x160>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d903      	bls.n	8006806 <xTaskIncrementTick+0xda>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006802:	4a22      	ldr	r2, [pc, #136]	@ (800688c <xTaskIncrementTick+0x160>)
 8006804:	6013      	str	r3, [r2, #0]
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4a1f      	ldr	r2, [pc, #124]	@ (8006890 <xTaskIncrementTick+0x164>)
 8006814:	441a      	add	r2, r3
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	3304      	adds	r3, #4
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7fe ff0a 	bl	8005636 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006826:	4b1b      	ldr	r3, [pc, #108]	@ (8006894 <xTaskIncrementTick+0x168>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800682c:	429a      	cmp	r2, r3
 800682e:	d3b8      	bcc.n	80067a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006830:	2301      	movs	r3, #1
 8006832:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006834:	e7b5      	b.n	80067a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006836:	4b17      	ldr	r3, [pc, #92]	@ (8006894 <xTaskIncrementTick+0x168>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	4914      	ldr	r1, [pc, #80]	@ (8006890 <xTaskIncrementTick+0x164>)
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	440b      	add	r3, r1
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d901      	bls.n	8006852 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800684e:	2301      	movs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006852:	4b11      	ldr	r3, [pc, #68]	@ (8006898 <xTaskIncrementTick+0x16c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	e004      	b.n	800686a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006860:	4b0e      	ldr	r3, [pc, #56]	@ (800689c <xTaskIncrementTick+0x170>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3301      	adds	r3, #1
 8006866:	4a0d      	ldr	r2, [pc, #52]	@ (800689c <xTaskIncrementTick+0x170>)
 8006868:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800686a:	697b      	ldr	r3, [r7, #20]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20001294 	.word	0x20001294
 8006878:	20001270 	.word	0x20001270
 800687c:	20001224 	.word	0x20001224
 8006880:	20001228 	.word	0x20001228
 8006884:	20001284 	.word	0x20001284
 8006888:	2000128c 	.word	0x2000128c
 800688c:	20001274 	.word	0x20001274
 8006890:	20000d9c 	.word	0x20000d9c
 8006894:	20000d98 	.word	0x20000d98
 8006898:	20001280 	.word	0x20001280
 800689c:	2000127c 	.word	0x2000127c

080068a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068a6:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <vTaskSwitchContext+0xa8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80068ae:	4b27      	ldr	r3, [pc, #156]	@ (800694c <vTaskSwitchContext+0xac>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80068b4:	e042      	b.n	800693c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80068b6:	4b25      	ldr	r3, [pc, #148]	@ (800694c <vTaskSwitchContext+0xac>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068bc:	4b24      	ldr	r3, [pc, #144]	@ (8006950 <vTaskSwitchContext+0xb0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e011      	b.n	80068e8 <vTaskSwitchContext+0x48>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	607b      	str	r3, [r7, #4]
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	e7fd      	b.n	80068de <vTaskSwitchContext+0x3e>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	491a      	ldr	r1, [pc, #104]	@ (8006954 <vTaskSwitchContext+0xb4>)
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0e3      	beq.n	80068c4 <vTaskSwitchContext+0x24>
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4613      	mov	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4a13      	ldr	r2, [pc, #76]	@ (8006954 <vTaskSwitchContext+0xb4>)
 8006908:	4413      	add	r3, r2
 800690a:	60bb      	str	r3, [r7, #8]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	605a      	str	r2, [r3, #4]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	3308      	adds	r3, #8
 800691e:	429a      	cmp	r2, r3
 8006920:	d104      	bne.n	800692c <vTaskSwitchContext+0x8c>
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	605a      	str	r2, [r3, #4]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	4a09      	ldr	r2, [pc, #36]	@ (8006958 <vTaskSwitchContext+0xb8>)
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	4a06      	ldr	r2, [pc, #24]	@ (8006950 <vTaskSwitchContext+0xb0>)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6013      	str	r3, [r2, #0]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	20001294 	.word	0x20001294
 800694c:	20001280 	.word	0x20001280
 8006950:	20001274 	.word	0x20001274
 8006954:	20000d9c 	.word	0x20000d9c
 8006958:	20000d98 	.word	0x20000d98

0800695c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10b      	bne.n	8006984 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	f383 8811 	msr	BASEPRI, r3
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	f3bf 8f4f 	dsb	sy
 800697c:	60fb      	str	r3, [r7, #12]
}
 800697e:	bf00      	nop
 8006980:	bf00      	nop
 8006982:	e7fd      	b.n	8006980 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006984:	4b07      	ldr	r3, [pc, #28]	@ (80069a4 <vTaskPlaceOnEventList+0x48>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3318      	adds	r3, #24
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7fe fe75 	bl	800567c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006992:	2101      	movs	r1, #1
 8006994:	6838      	ldr	r0, [r7, #0]
 8006996:	f000 fa81 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
}
 800699a:	bf00      	nop
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000d98 	.word	0x20000d98

080069a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	617b      	str	r3, [r7, #20]
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	e7fd      	b.n	80069ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069d2:	4b0a      	ldr	r3, [pc, #40]	@ (80069fc <vTaskPlaceOnEventListRestricted+0x54>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3318      	adds	r3, #24
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7fe fe2b 	bl	8005636 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	68b8      	ldr	r0, [r7, #8]
 80069f0:	f000 fa54 	bl	8006e9c <prvAddCurrentTaskToDelayedList>
	}
 80069f4:	bf00      	nop
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20000d98 	.word	0x20000d98

08006a00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10b      	bne.n	8006a2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60fb      	str	r3, [r7, #12]
}
 8006a28:	bf00      	nop
 8006a2a:	bf00      	nop
 8006a2c:	e7fd      	b.n	8006a2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	3318      	adds	r3, #24
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fe5a 	bl	80056ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a38:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <xTaskRemoveFromEventList+0xb0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11d      	bne.n	8006a7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	3304      	adds	r3, #4
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe fe51 	bl	80056ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4e:	4b19      	ldr	r3, [pc, #100]	@ (8006ab4 <xTaskRemoveFromEventList+0xb4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d903      	bls.n	8006a5e <xTaskRemoveFromEventList+0x5e>
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a5a:	4a16      	ldr	r2, [pc, #88]	@ (8006ab4 <xTaskRemoveFromEventList+0xb4>)
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	4a13      	ldr	r2, [pc, #76]	@ (8006ab8 <xTaskRemoveFromEventList+0xb8>)
 8006a6c:	441a      	add	r2, r3
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f7fe fdde 	bl	8005636 <vListInsertEnd>
 8006a7a:	e005      	b.n	8006a88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	3318      	adds	r3, #24
 8006a80:	4619      	mov	r1, r3
 8006a82:	480e      	ldr	r0, [pc, #56]	@ (8006abc <xTaskRemoveFromEventList+0xbc>)
 8006a84:	f7fe fdd7 	bl	8005636 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <xTaskRemoveFromEventList+0xc0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d905      	bls.n	8006aa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <xTaskRemoveFromEventList+0xc4>)
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	e001      	b.n	8006aa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006aa6:	697b      	ldr	r3, [r7, #20]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3718      	adds	r7, #24
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20001294 	.word	0x20001294
 8006ab4:	20001274 	.word	0x20001274
 8006ab8:	20000d9c 	.word	0x20000d9c
 8006abc:	2000122c 	.word	0x2000122c
 8006ac0:	20000d98 	.word	0x20000d98
 8006ac4:	20001280 	.word	0x20001280

08006ac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <vTaskInternalSetTimeOutState+0x24>)
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ad8:	4b05      	ldr	r3, [pc, #20]	@ (8006af0 <vTaskInternalSetTimeOutState+0x28>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	605a      	str	r2, [r3, #4]
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20001284 	.word	0x20001284
 8006af0:	20001270 	.word	0x20001270

08006af4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10b      	bne.n	8006b1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	613b      	str	r3, [r7, #16]
}
 8006b16:	bf00      	nop
 8006b18:	bf00      	nop
 8006b1a:	e7fd      	b.n	8006b18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10b      	bne.n	8006b3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	60fb      	str	r3, [r7, #12]
}
 8006b34:	bf00      	nop
 8006b36:	bf00      	nop
 8006b38:	e7fd      	b.n	8006b36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b3a:	f000 fe4f 	bl	80077dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb4 <xTaskCheckForTimeOut+0xc0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d102      	bne.n	8006b5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61fb      	str	r3, [r7, #28]
 8006b5c:	e023      	b.n	8006ba6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4b15      	ldr	r3, [pc, #84]	@ (8006bb8 <xTaskCheckForTimeOut+0xc4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d007      	beq.n	8006b7a <xTaskCheckForTimeOut+0x86>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d302      	bcc.n	8006b7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	e015      	b.n	8006ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	697a      	ldr	r2, [r7, #20]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d20b      	bcs.n	8006b9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	1ad2      	subs	r2, r2, r3
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff99 	bl	8006ac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
 8006b9a:	e004      	b.n	8006ba6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006ba6:	f000 fe49 	bl	800783c <vPortExitCritical>

	return xReturn;
 8006baa:	69fb      	ldr	r3, [r7, #28]
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20001270 	.word	0x20001270
 8006bb8:	20001284 	.word	0x20001284

08006bbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bc0:	4b03      	ldr	r3, [pc, #12]	@ (8006bd0 <vTaskMissedYield+0x14>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	20001280 	.word	0x20001280

08006bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bdc:	f000 f852 	bl	8006c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006be0:	4b06      	ldr	r3, [pc, #24]	@ (8006bfc <prvIdleTask+0x28>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d9f9      	bls.n	8006bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006be8:	4b05      	ldr	r3, [pc, #20]	@ (8006c00 <prvIdleTask+0x2c>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bf8:	e7f0      	b.n	8006bdc <prvIdleTask+0x8>
 8006bfa:	bf00      	nop
 8006bfc:	20000d9c 	.word	0x20000d9c
 8006c00:	e000ed04 	.word	0xe000ed04

08006c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	e00c      	b.n	8006c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a12      	ldr	r2, [pc, #72]	@ (8006c64 <prvInitialiseTaskLists+0x60>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fcde 	bl	80055e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3301      	adds	r3, #1
 8006c28:	607b      	str	r3, [r7, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2b37      	cmp	r3, #55	@ 0x37
 8006c2e:	d9ef      	bls.n	8006c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c30:	480d      	ldr	r0, [pc, #52]	@ (8006c68 <prvInitialiseTaskLists+0x64>)
 8006c32:	f7fe fcd5 	bl	80055e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c36:	480d      	ldr	r0, [pc, #52]	@ (8006c6c <prvInitialiseTaskLists+0x68>)
 8006c38:	f7fe fcd2 	bl	80055e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c3c:	480c      	ldr	r0, [pc, #48]	@ (8006c70 <prvInitialiseTaskLists+0x6c>)
 8006c3e:	f7fe fccf 	bl	80055e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c42:	480c      	ldr	r0, [pc, #48]	@ (8006c74 <prvInitialiseTaskLists+0x70>)
 8006c44:	f7fe fccc 	bl	80055e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c48:	480b      	ldr	r0, [pc, #44]	@ (8006c78 <prvInitialiseTaskLists+0x74>)
 8006c4a:	f7fe fcc9 	bl	80055e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <prvInitialiseTaskLists+0x78>)
 8006c50:	4a05      	ldr	r2, [pc, #20]	@ (8006c68 <prvInitialiseTaskLists+0x64>)
 8006c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c54:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <prvInitialiseTaskLists+0x7c>)
 8006c56:	4a05      	ldr	r2, [pc, #20]	@ (8006c6c <prvInitialiseTaskLists+0x68>)
 8006c58:	601a      	str	r2, [r3, #0]
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	20000d9c 	.word	0x20000d9c
 8006c68:	200011fc 	.word	0x200011fc
 8006c6c:	20001210 	.word	0x20001210
 8006c70:	2000122c 	.word	0x2000122c
 8006c74:	20001240 	.word	0x20001240
 8006c78:	20001258 	.word	0x20001258
 8006c7c:	20001224 	.word	0x20001224
 8006c80:	20001228 	.word	0x20001228

08006c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c8a:	e019      	b.n	8006cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c8c:	f000 fda6 	bl	80077dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c90:	4b10      	ldr	r3, [pc, #64]	@ (8006cd4 <prvCheckTasksWaitingTermination+0x50>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fd25 	bl	80056ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <prvCheckTasksWaitingTermination+0x54>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8006cd8 <prvCheckTasksWaitingTermination+0x54>)
 8006caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cac:	4b0b      	ldr	r3, [pc, #44]	@ (8006cdc <prvCheckTasksWaitingTermination+0x58>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8006cdc <prvCheckTasksWaitingTermination+0x58>)
 8006cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cb6:	f000 fdc1 	bl	800783c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f810 	bl	8006ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cc0:	4b06      	ldr	r3, [pc, #24]	@ (8006cdc <prvCheckTasksWaitingTermination+0x58>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e1      	bne.n	8006c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	20001240 	.word	0x20001240
 8006cd8:	2000126c 	.word	0x2000126c
 8006cdc:	20001254 	.word	0x20001254

08006ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d108      	bne.n	8006d04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 ff40 	bl	8007b7c <vPortFree>
				vPortFree( pxTCB );
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 ff3d 	bl	8007b7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d02:	e019      	b.n	8006d38 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d103      	bne.n	8006d16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 ff34 	bl	8007b7c <vPortFree>
	}
 8006d14:	e010      	b.n	8006d38 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d00b      	beq.n	8006d38 <prvDeleteTCB+0x58>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	60fb      	str	r3, [r7, #12]
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <prvDeleteTCB+0x54>
	}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d46:	4b0c      	ldr	r3, [pc, #48]	@ (8006d78 <prvResetNextTaskUnblockTime+0x38>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d50:	4b0a      	ldr	r3, [pc, #40]	@ (8006d7c <prvResetNextTaskUnblockTime+0x3c>)
 8006d52:	f04f 32ff 	mov.w	r2, #4294967295
 8006d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d58:	e008      	b.n	8006d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d5a:	4b07      	ldr	r3, [pc, #28]	@ (8006d78 <prvResetNextTaskUnblockTime+0x38>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4a04      	ldr	r2, [pc, #16]	@ (8006d7c <prvResetNextTaskUnblockTime+0x3c>)
 8006d6a:	6013      	str	r3, [r2, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	20001224 	.word	0x20001224
 8006d7c:	2000128c 	.word	0x2000128c

08006d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <xTaskGetSchedulerState+0x34>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d102      	bne.n	8006d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	e008      	b.n	8006da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d94:	4b08      	ldr	r3, [pc, #32]	@ (8006db8 <xTaskGetSchedulerState+0x38>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d102      	bne.n	8006da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	607b      	str	r3, [r7, #4]
 8006da0:	e001      	b.n	8006da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006da2:	2300      	movs	r3, #0
 8006da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006da6:	687b      	ldr	r3, [r7, #4]
	}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20001278 	.word	0x20001278
 8006db8:	20001294 	.word	0x20001294

08006dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d058      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8006e90 <xTaskPriorityDisinherit+0xd4>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d00b      	beq.n	8006df4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	60fb      	str	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	bf00      	nop
 8006df2:	e7fd      	b.n	8006df0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	60bb      	str	r3, [r7, #8]
}
 8006e0e:	bf00      	nop
 8006e10:	bf00      	nop
 8006e12:	e7fd      	b.n	8006e10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e18:	1e5a      	subs	r2, r3, #1
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d02c      	beq.n	8006e84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d128      	bne.n	8006e84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	3304      	adds	r3, #4
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fe fc58 	bl	80056ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e54:	4b0f      	ldr	r3, [pc, #60]	@ (8006e94 <xTaskPriorityDisinherit+0xd8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <xTaskPriorityDisinherit+0xa8>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e60:	4a0c      	ldr	r2, [pc, #48]	@ (8006e94 <xTaskPriorityDisinherit+0xd8>)
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a09      	ldr	r2, [pc, #36]	@ (8006e98 <xTaskPriorityDisinherit+0xdc>)
 8006e72:	441a      	add	r2, r3
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fbdb 	bl	8005636 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e84:	697b      	ldr	r3, [r7, #20]
	}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000d98 	.word	0x20000d98
 8006e94:	20001274 	.word	0x20001274
 8006e98:	20000d9c 	.word	0x20000d9c

08006e9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ea6:	4b21      	ldr	r3, [pc, #132]	@ (8006f2c <prvAddCurrentTaskToDelayedList+0x90>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eac:	4b20      	ldr	r3, [pc, #128]	@ (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fc1a 	bl	80056ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d10a      	bne.n	8006ed6 <prvAddCurrentTaskToDelayedList+0x3a>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d007      	beq.n	8006ed6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4819      	ldr	r0, [pc, #100]	@ (8006f34 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ed0:	f7fe fbb1 	bl	8005636 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ed4:	e026      	b.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4413      	add	r3, r2
 8006edc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ede:	4b14      	ldr	r3, [pc, #80]	@ (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d209      	bcs.n	8006f02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eee:	4b12      	ldr	r3, [pc, #72]	@ (8006f38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fe fbbe 	bl	800567c <vListInsert>
}
 8006f00:	e010      	b.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f02:	4b0e      	ldr	r3, [pc, #56]	@ (8006f3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b0a      	ldr	r3, [pc, #40]	@ (8006f30 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f7fe fbb4 	bl	800567c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f14:	4b0a      	ldr	r3, [pc, #40]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d202      	bcs.n	8006f24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f1e:	4a08      	ldr	r2, [pc, #32]	@ (8006f40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6013      	str	r3, [r2, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20001270 	.word	0x20001270
 8006f30:	20000d98 	.word	0x20000d98
 8006f34:	20001258 	.word	0x20001258
 8006f38:	20001228 	.word	0x20001228
 8006f3c:	20001224 	.word	0x20001224
 8006f40:	2000128c 	.word	0x2000128c

08006f44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	@ 0x28
 8006f48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f4e:	f000 fb11 	bl	8007574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f52:	4b1d      	ldr	r3, [pc, #116]	@ (8006fc8 <xTimerCreateTimerTask+0x84>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d021      	beq.n	8006f9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f62:	1d3a      	adds	r2, r7, #4
 8006f64:	f107 0108 	add.w	r1, r7, #8
 8006f68:	f107 030c 	add.w	r3, r7, #12
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fe fb1d 	bl	80055ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	9202      	str	r2, [sp, #8]
 8006f7a:	9301      	str	r3, [sp, #4]
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	2300      	movs	r3, #0
 8006f82:	460a      	mov	r2, r1
 8006f84:	4911      	ldr	r1, [pc, #68]	@ (8006fcc <xTimerCreateTimerTask+0x88>)
 8006f86:	4812      	ldr	r0, [pc, #72]	@ (8006fd0 <xTimerCreateTimerTask+0x8c>)
 8006f88:	f7ff f8d2 	bl	8006130 <xTaskCreateStatic>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	4a11      	ldr	r2, [pc, #68]	@ (8006fd4 <xTimerCreateTimerTask+0x90>)
 8006f90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f92:	4b10      	ldr	r3, [pc, #64]	@ (8006fd4 <xTimerCreateTimerTask+0x90>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10b      	bne.n	8006fbc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	613b      	str	r3, [r7, #16]
}
 8006fb6:	bf00      	nop
 8006fb8:	bf00      	nop
 8006fba:	e7fd      	b.n	8006fb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fbc:	697b      	ldr	r3, [r7, #20]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	200012c8 	.word	0x200012c8
 8006fcc:	08008798 	.word	0x08008798
 8006fd0:	08007111 	.word	0x08007111
 8006fd4:	200012cc 	.word	0x200012cc

08006fd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08a      	sub	sp, #40	@ 0x28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d10b      	bne.n	8007008 <xTimerGenericCommand+0x30>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	623b      	str	r3, [r7, #32]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007008:	4b19      	ldr	r3, [pc, #100]	@ (8007070 <xTimerGenericCommand+0x98>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d02a      	beq.n	8007066 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b05      	cmp	r3, #5
 8007020:	dc18      	bgt.n	8007054 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007022:	f7ff fead 	bl	8006d80 <xTaskGetSchedulerState>
 8007026:	4603      	mov	r3, r0
 8007028:	2b02      	cmp	r3, #2
 800702a:	d109      	bne.n	8007040 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800702c:	4b10      	ldr	r3, [pc, #64]	@ (8007070 <xTimerGenericCommand+0x98>)
 800702e:	6818      	ldr	r0, [r3, #0]
 8007030:	f107 0110 	add.w	r1, r7, #16
 8007034:	2300      	movs	r3, #0
 8007036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007038:	f7fe fc8c 	bl	8005954 <xQueueGenericSend>
 800703c:	6278      	str	r0, [r7, #36]	@ 0x24
 800703e:	e012      	b.n	8007066 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007040:	4b0b      	ldr	r3, [pc, #44]	@ (8007070 <xTimerGenericCommand+0x98>)
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	f107 0110 	add.w	r1, r7, #16
 8007048:	2300      	movs	r3, #0
 800704a:	2200      	movs	r2, #0
 800704c:	f7fe fc82 	bl	8005954 <xQueueGenericSend>
 8007050:	6278      	str	r0, [r7, #36]	@ 0x24
 8007052:	e008      	b.n	8007066 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007054:	4b06      	ldr	r3, [pc, #24]	@ (8007070 <xTimerGenericCommand+0x98>)
 8007056:	6818      	ldr	r0, [r3, #0]
 8007058:	f107 0110 	add.w	r1, r7, #16
 800705c:	2300      	movs	r3, #0
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	f7fe fd7a 	bl	8005b58 <xQueueGenericSendFromISR>
 8007064:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007068:	4618      	mov	r0, r3
 800706a:	3728      	adds	r7, #40	@ 0x28
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	200012c8 	.word	0x200012c8

08007074 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b088      	sub	sp, #32
 8007078:	af02      	add	r7, sp, #8
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707e:	4b23      	ldr	r3, [pc, #140]	@ (800710c <prvProcessExpiredTimer+0x98>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fb2d 	bl	80056ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d023      	beq.n	80070e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	699a      	ldr	r2, [r3, #24]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	18d1      	adds	r1, r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	6978      	ldr	r0, [r7, #20]
 80070ae:	f000 f8d3 	bl	8007258 <prvInsertTimerInActiveList>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d020      	beq.n	80070fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070b8:	2300      	movs	r3, #0
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	2300      	movs	r3, #0
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	2100      	movs	r1, #0
 80070c2:	6978      	ldr	r0, [r7, #20]
 80070c4:	f7ff ff88 	bl	8006fd8 <xTimerGenericCommand>
 80070c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d114      	bne.n	80070fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	6978      	ldr	r0, [r7, #20]
 8007100:	4798      	blx	r3
}
 8007102:	bf00      	nop
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	200012c0 	.word	0x200012c0

08007110 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007118:	f107 0308 	add.w	r3, r7, #8
 800711c:	4618      	mov	r0, r3
 800711e:	f000 f859 	bl	80071d4 <prvGetNextExpireTime>
 8007122:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4619      	mov	r1, r3
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f805 	bl	8007138 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800712e:	f000 f8d5 	bl	80072dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007132:	bf00      	nop
 8007134:	e7f0      	b.n	8007118 <prvTimerTask+0x8>
	...

08007138 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007142:	f7ff fa39 	bl	80065b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007146:	f107 0308 	add.w	r3, r7, #8
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f864 	bl	8007218 <prvSampleTimeNow>
 8007150:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d130      	bne.n	80071ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10a      	bne.n	8007174 <prvProcessTimerOrBlockTask+0x3c>
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	429a      	cmp	r2, r3
 8007164:	d806      	bhi.n	8007174 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007166:	f7ff fa35 	bl	80065d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7ff ff81 	bl	8007074 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007172:	e024      	b.n	80071be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800717a:	4b13      	ldr	r3, [pc, #76]	@ (80071c8 <prvProcessTimerOrBlockTask+0x90>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <prvProcessTimerOrBlockTask+0x50>
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <prvProcessTimerOrBlockTask+0x52>
 8007188:	2300      	movs	r3, #0
 800718a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800718c:	4b0f      	ldr	r3, [pc, #60]	@ (80071cc <prvProcessTimerOrBlockTask+0x94>)
 800718e:	6818      	ldr	r0, [r3, #0]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	4619      	mov	r1, r3
 800719a:	f7fe ff95 	bl	80060c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800719e:	f7ff fa19 	bl	80065d4 <xTaskResumeAll>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80071a8:	4b09      	ldr	r3, [pc, #36]	@ (80071d0 <prvProcessTimerOrBlockTask+0x98>)
 80071aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ae:	601a      	str	r2, [r3, #0]
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	f3bf 8f6f 	isb	sy
}
 80071b8:	e001      	b.n	80071be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80071ba:	f7ff fa0b 	bl	80065d4 <xTaskResumeAll>
}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	200012c4 	.word	0x200012c4
 80071cc:	200012c8 	.word	0x200012c8
 80071d0:	e000ed04 	.word	0xe000ed04

080071d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80071dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007214 <prvGetNextExpireTime+0x40>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <prvGetNextExpireTime+0x16>
 80071e6:	2201      	movs	r2, #1
 80071e8:	e000      	b.n	80071ec <prvGetNextExpireTime+0x18>
 80071ea:	2200      	movs	r2, #0
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071f8:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <prvGetNextExpireTime+0x40>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e001      	b.n	8007208 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007204:	2300      	movs	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007208:	68fb      	ldr	r3, [r7, #12]
}
 800720a:	4618      	mov	r0, r3
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	bc80      	pop	{r7}
 8007212:	4770      	bx	lr
 8007214:	200012c0 	.word	0x200012c0

08007218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007220:	f7ff fa76 	bl	8006710 <xTaskGetTickCount>
 8007224:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007226:	4b0b      	ldr	r3, [pc, #44]	@ (8007254 <prvSampleTimeNow+0x3c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	429a      	cmp	r2, r3
 800722e:	d205      	bcs.n	800723c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007230:	f000 f93a 	bl	80074a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e002      	b.n	8007242 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007242:	4a04      	ldr	r2, [pc, #16]	@ (8007254 <prvSampleTimeNow+0x3c>)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007248:	68fb      	ldr	r3, [r7, #12]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200012d0 	.word	0x200012d0

08007258 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007266:	2300      	movs	r3, #0
 8007268:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d812      	bhi.n	80072a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	1ad2      	subs	r2, r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
 8007290:	e01b      	b.n	80072ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007292:	4b10      	ldr	r3, [pc, #64]	@ (80072d4 <prvInsertTimerInActiveList+0x7c>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fe f9ed 	bl	800567c <vListInsert>
 80072a2:	e012      	b.n	80072ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d206      	bcs.n	80072ba <prvInsertTimerInActiveList+0x62>
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d302      	bcc.n	80072ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e007      	b.n	80072ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072ba:	4b07      	ldr	r3, [pc, #28]	@ (80072d8 <prvInsertTimerInActiveList+0x80>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3304      	adds	r3, #4
 80072c2:	4619      	mov	r1, r3
 80072c4:	4610      	mov	r0, r2
 80072c6:	f7fe f9d9 	bl	800567c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80072ca:	697b      	ldr	r3, [r7, #20]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	200012c4 	.word	0x200012c4
 80072d8:	200012c0 	.word	0x200012c0

080072dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08e      	sub	sp, #56	@ 0x38
 80072e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80072e2:	e0ce      	b.n	8007482 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da19      	bge.n	800731e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80072ea:	1d3b      	adds	r3, r7, #4
 80072ec:	3304      	adds	r3, #4
 80072ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80072f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <prvProcessReceivedCommands+0x32>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	61fb      	str	r3, [r7, #28]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007314:	6850      	ldr	r0, [r2, #4]
 8007316:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007318:	6892      	ldr	r2, [r2, #8]
 800731a:	4611      	mov	r1, r2
 800731c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	f2c0 80ae 	blt.w	8007482 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007334:	3304      	adds	r3, #4
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe f9d8 	bl	80056ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800733c:	463b      	mov	r3, r7
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff ff6a 	bl	8007218 <prvSampleTimeNow>
 8007344:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b09      	cmp	r3, #9
 800734a:	f200 8097 	bhi.w	800747c <prvProcessReceivedCommands+0x1a0>
 800734e:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <prvProcessReceivedCommands+0x78>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	0800737d 	.word	0x0800737d
 8007358:	0800737d 	.word	0x0800737d
 800735c:	0800737d 	.word	0x0800737d
 8007360:	080073f3 	.word	0x080073f3
 8007364:	08007407 	.word	0x08007407
 8007368:	08007453 	.word	0x08007453
 800736c:	0800737d 	.word	0x0800737d
 8007370:	0800737d 	.word	0x0800737d
 8007374:	080073f3 	.word	0x080073f3
 8007378:	08007407 	.word	0x08007407
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007382:	f043 0301 	orr.w	r3, r3, #1
 8007386:	b2da      	uxtb	r2, r3
 8007388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800738a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	18d1      	adds	r1, r2, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800739a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800739c:	f7ff ff5c 	bl	8007258 <prvInsertTimerInActiveList>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d06c      	beq.n	8007480 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d061      	beq.n	8007480 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	441a      	add	r2, r3
 80073c4:	2300      	movs	r3, #0
 80073c6:	9300      	str	r3, [sp, #0]
 80073c8:	2300      	movs	r3, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ce:	f7ff fe03 	bl	8006fd8 <xTimerGenericCommand>
 80073d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d152      	bne.n	8007480 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	61bb      	str	r3, [r7, #24]
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	e7fd      	b.n	80073ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007400:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007404:	e03d      	b.n	8007482 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007408:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800740c:	f043 0301 	orr.w	r3, r3, #1
 8007410:	b2da      	uxtb	r2, r3
 8007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007414:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800741e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10b      	bne.n	800743e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	617b      	str	r3, [r7, #20]
}
 8007438:	bf00      	nop
 800743a:	bf00      	nop
 800743c:	e7fd      	b.n	800743a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800743e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	18d1      	adds	r1, r2, r3
 8007446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800744a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800744c:	f7ff ff04 	bl	8007258 <prvInsertTimerInActiveList>
					break;
 8007450:	e017      	b.n	8007482 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d103      	bne.n	8007468 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007460:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007462:	f000 fb8b 	bl	8007b7c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007466:	e00c      	b.n	8007482 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	b2da      	uxtb	r2, r3
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800747a:	e002      	b.n	8007482 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800747c:	bf00      	nop
 800747e:	e000      	b.n	8007482 <prvProcessReceivedCommands+0x1a6>
					break;
 8007480:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007482:	4b08      	ldr	r3, [pc, #32]	@ (80074a4 <prvProcessReceivedCommands+0x1c8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	1d39      	adds	r1, r7, #4
 8007488:	2200      	movs	r2, #0
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fc02 	bl	8005c94 <xQueueReceive>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	f47f af26 	bne.w	80072e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	3730      	adds	r7, #48	@ 0x30
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	200012c8 	.word	0x200012c8

080074a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074ae:	e049      	b.n	8007544 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074b0:	4b2e      	ldr	r3, [pc, #184]	@ (800756c <prvSwitchTimerLists+0xc4>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074ba:	4b2c      	ldr	r3, [pc, #176]	@ (800756c <prvSwitchTimerLists+0xc4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3304      	adds	r3, #4
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7fe f90f 	bl	80056ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d02f      	beq.n	8007544 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d90e      	bls.n	8007514 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007502:	4b1a      	ldr	r3, [pc, #104]	@ (800756c <prvSwitchTimerLists+0xc4>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3304      	adds	r3, #4
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f7fe f8b5 	bl	800567c <vListInsert>
 8007512:	e017      	b.n	8007544 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007514:	2300      	movs	r3, #0
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	2300      	movs	r3, #0
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	2100      	movs	r1, #0
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f7ff fd5a 	bl	8006fd8 <xTimerGenericCommand>
 8007524:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	603b      	str	r3, [r7, #0]
}
 800753e:	bf00      	nop
 8007540:	bf00      	nop
 8007542:	e7fd      	b.n	8007540 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007544:	4b09      	ldr	r3, [pc, #36]	@ (800756c <prvSwitchTimerLists+0xc4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1b0      	bne.n	80074b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800754e:	4b07      	ldr	r3, [pc, #28]	@ (800756c <prvSwitchTimerLists+0xc4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007554:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <prvSwitchTimerLists+0xc8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a04      	ldr	r2, [pc, #16]	@ (800756c <prvSwitchTimerLists+0xc4>)
 800755a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800755c:	4a04      	ldr	r2, [pc, #16]	@ (8007570 <prvSwitchTimerLists+0xc8>)
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6013      	str	r3, [r2, #0]
}
 8007562:	bf00      	nop
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200012c0 	.word	0x200012c0
 8007570:	200012c4 	.word	0x200012c4

08007574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800757a:	f000 f92f 	bl	80077dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800757e:	4b15      	ldr	r3, [pc, #84]	@ (80075d4 <prvCheckForValidListAndQueue+0x60>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d120      	bne.n	80075c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007586:	4814      	ldr	r0, [pc, #80]	@ (80075d8 <prvCheckForValidListAndQueue+0x64>)
 8007588:	f7fe f82a 	bl	80055e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800758c:	4813      	ldr	r0, [pc, #76]	@ (80075dc <prvCheckForValidListAndQueue+0x68>)
 800758e:	f7fe f827 	bl	80055e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007592:	4b13      	ldr	r3, [pc, #76]	@ (80075e0 <prvCheckForValidListAndQueue+0x6c>)
 8007594:	4a10      	ldr	r2, [pc, #64]	@ (80075d8 <prvCheckForValidListAndQueue+0x64>)
 8007596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007598:	4b12      	ldr	r3, [pc, #72]	@ (80075e4 <prvCheckForValidListAndQueue+0x70>)
 800759a:	4a10      	ldr	r2, [pc, #64]	@ (80075dc <prvCheckForValidListAndQueue+0x68>)
 800759c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800759e:	2300      	movs	r3, #0
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	4b11      	ldr	r3, [pc, #68]	@ (80075e8 <prvCheckForValidListAndQueue+0x74>)
 80075a4:	4a11      	ldr	r2, [pc, #68]	@ (80075ec <prvCheckForValidListAndQueue+0x78>)
 80075a6:	2110      	movs	r1, #16
 80075a8:	200a      	movs	r0, #10
 80075aa:	f7fe f933 	bl	8005814 <xQueueGenericCreateStatic>
 80075ae:	4603      	mov	r3, r0
 80075b0:	4a08      	ldr	r2, [pc, #32]	@ (80075d4 <prvCheckForValidListAndQueue+0x60>)
 80075b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075b4:	4b07      	ldr	r3, [pc, #28]	@ (80075d4 <prvCheckForValidListAndQueue+0x60>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075bc:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <prvCheckForValidListAndQueue+0x60>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	490b      	ldr	r1, [pc, #44]	@ (80075f0 <prvCheckForValidListAndQueue+0x7c>)
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fe fd58 	bl	8006078 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075c8:	f000 f938 	bl	800783c <vPortExitCritical>
}
 80075cc:	bf00      	nop
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200012c8 	.word	0x200012c8
 80075d8:	20001298 	.word	0x20001298
 80075dc:	200012ac 	.word	0x200012ac
 80075e0:	200012c0 	.word	0x200012c0
 80075e4:	200012c4 	.word	0x200012c4
 80075e8:	20001374 	.word	0x20001374
 80075ec:	200012d4 	.word	0x200012d4
 80075f0:	080087a0 	.word	0x080087a0

080075f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	3b04      	subs	r3, #4
 8007604:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800760c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3b04      	subs	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	f023 0201 	bic.w	r2, r3, #1
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3b04      	subs	r3, #4
 8007622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007624:	4a08      	ldr	r2, [pc, #32]	@ (8007648 <pxPortInitialiseStack+0x54>)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3b14      	subs	r3, #20
 800762e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	3b20      	subs	r3, #32
 800763a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800763c:	68fb      	ldr	r3, [r7, #12]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	bc80      	pop	{r7}
 8007646:	4770      	bx	lr
 8007648:	0800764d 	.word	0x0800764d

0800764c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007652:	2300      	movs	r3, #0
 8007654:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007656:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <prvTaskExitError+0x54>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765e:	d00b      	beq.n	8007678 <prvTaskExitError+0x2c>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	60fb      	str	r3, [r7, #12]
}
 8007672:	bf00      	nop
 8007674:	bf00      	nop
 8007676:	e7fd      	b.n	8007674 <prvTaskExitError+0x28>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	60bb      	str	r3, [r7, #8]
}
 800768a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800768c:	bf00      	nop
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0fc      	beq.n	800768e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr
 80076a0:	2000000c 	.word	0x2000000c
	...

080076b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80076b0:	4b07      	ldr	r3, [pc, #28]	@ (80076d0 <pxCurrentTCBConst2>)
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	6808      	ldr	r0, [r1, #0]
 80076b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80076ba:	f380 8809 	msr	PSP, r0
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f04f 0000 	mov.w	r0, #0
 80076c6:	f380 8811 	msr	BASEPRI, r0
 80076ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80076ce:	4770      	bx	lr

080076d0 <pxCurrentTCBConst2>:
 80076d0:	20000d98 	.word	0x20000d98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop

080076d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80076d8:	4806      	ldr	r0, [pc, #24]	@ (80076f4 <prvPortStartFirstTask+0x1c>)
 80076da:	6800      	ldr	r0, [r0, #0]
 80076dc:	6800      	ldr	r0, [r0, #0]
 80076de:	f380 8808 	msr	MSP, r0
 80076e2:	b662      	cpsie	i
 80076e4:	b661      	cpsie	f
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	f3bf 8f6f 	isb	sy
 80076ee:	df00      	svc	0
 80076f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076f2:	bf00      	nop
 80076f4:	e000ed08 	.word	0xe000ed08

080076f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076fe:	4b32      	ldr	r3, [pc, #200]	@ (80077c8 <xPortStartScheduler+0xd0>)
 8007700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	22ff      	movs	r2, #255	@ 0xff
 800770e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007720:	b2da      	uxtb	r2, r3
 8007722:	4b2a      	ldr	r3, [pc, #168]	@ (80077cc <xPortStartScheduler+0xd4>)
 8007724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007726:	4b2a      	ldr	r3, [pc, #168]	@ (80077d0 <xPortStartScheduler+0xd8>)
 8007728:	2207      	movs	r2, #7
 800772a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800772c:	e009      	b.n	8007742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800772e:	4b28      	ldr	r3, [pc, #160]	@ (80077d0 <xPortStartScheduler+0xd8>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3b01      	subs	r3, #1
 8007734:	4a26      	ldr	r2, [pc, #152]	@ (80077d0 <xPortStartScheduler+0xd8>)
 8007736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	b2db      	uxtb	r3, r3
 8007740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007742:	78fb      	ldrb	r3, [r7, #3]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774a:	2b80      	cmp	r3, #128	@ 0x80
 800774c:	d0ef      	beq.n	800772e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800774e:	4b20      	ldr	r3, [pc, #128]	@ (80077d0 <xPortStartScheduler+0xd8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f1c3 0307 	rsb	r3, r3, #7
 8007756:	2b04      	cmp	r3, #4
 8007758:	d00b      	beq.n	8007772 <xPortStartScheduler+0x7a>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	60bb      	str	r3, [r7, #8]
}
 800776c:	bf00      	nop
 800776e:	bf00      	nop
 8007770:	e7fd      	b.n	800776e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007772:	4b17      	ldr	r3, [pc, #92]	@ (80077d0 <xPortStartScheduler+0xd8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	4a15      	ldr	r2, [pc, #84]	@ (80077d0 <xPortStartScheduler+0xd8>)
 800777a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800777c:	4b14      	ldr	r3, [pc, #80]	@ (80077d0 <xPortStartScheduler+0xd8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007784:	4a12      	ldr	r2, [pc, #72]	@ (80077d0 <xPortStartScheduler+0xd8>)
 8007786:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	b2da      	uxtb	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007790:	4b10      	ldr	r3, [pc, #64]	@ (80077d4 <xPortStartScheduler+0xdc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a0f      	ldr	r2, [pc, #60]	@ (80077d4 <xPortStartScheduler+0xdc>)
 8007796:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800779a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800779c:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <xPortStartScheduler+0xdc>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0c      	ldr	r2, [pc, #48]	@ (80077d4 <xPortStartScheduler+0xdc>)
 80077a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80077a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077a8:	f000 f8b8 	bl	800791c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	@ (80077d8 <xPortStartScheduler+0xe0>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077b2:	f7ff ff91 	bl	80076d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077b6:	f7ff f873 	bl	80068a0 <vTaskSwitchContext>
	prvTaskExitError();
 80077ba:	f7ff ff47 	bl	800764c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}
 80077c8:	e000e400 	.word	0xe000e400
 80077cc:	200013c4 	.word	0x200013c4
 80077d0:	200013c8 	.word	0x200013c8
 80077d4:	e000ed20 	.word	0xe000ed20
 80077d8:	2000000c 	.word	0x2000000c

080077dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
	__asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	607b      	str	r3, [r7, #4]
}
 80077f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80077f6:	4b0f      	ldr	r3, [pc, #60]	@ (8007834 <vPortEnterCritical+0x58>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	4a0d      	ldr	r2, [pc, #52]	@ (8007834 <vPortEnterCritical+0x58>)
 80077fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007800:	4b0c      	ldr	r3, [pc, #48]	@ (8007834 <vPortEnterCritical+0x58>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d110      	bne.n	800782a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007808:	4b0b      	ldr	r3, [pc, #44]	@ (8007838 <vPortEnterCritical+0x5c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00b      	beq.n	800782a <vPortEnterCritical+0x4e>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	603b      	str	r3, [r7, #0]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <vPortEnterCritical+0x4a>
	}
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr
 8007834:	2000000c 	.word	0x2000000c
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007842:	4b12      	ldr	r3, [pc, #72]	@ (800788c <vPortExitCritical+0x50>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10b      	bne.n	8007862 <vPortExitCritical+0x26>
	__asm volatile
 800784a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784e:	f383 8811 	msr	BASEPRI, r3
 8007852:	f3bf 8f6f 	isb	sy
 8007856:	f3bf 8f4f 	dsb	sy
 800785a:	607b      	str	r3, [r7, #4]
}
 800785c:	bf00      	nop
 800785e:	bf00      	nop
 8007860:	e7fd      	b.n	800785e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007862:	4b0a      	ldr	r3, [pc, #40]	@ (800788c <vPortExitCritical+0x50>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3b01      	subs	r3, #1
 8007868:	4a08      	ldr	r2, [pc, #32]	@ (800788c <vPortExitCritical+0x50>)
 800786a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800786c:	4b07      	ldr	r3, [pc, #28]	@ (800788c <vPortExitCritical+0x50>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d105      	bne.n	8007880 <vPortExitCritical+0x44>
 8007874:	2300      	movs	r3, #0
 8007876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	f383 8811 	msr	BASEPRI, r3
}
 800787e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007880:	bf00      	nop
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	bc80      	pop	{r7}
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	2000000c 	.word	0x2000000c

08007890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007890:	f3ef 8009 	mrs	r0, PSP
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	4b0d      	ldr	r3, [pc, #52]	@ (80078d0 <pxCurrentTCBConst>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078a0:	6010      	str	r0, [r2, #0]
 80078a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80078a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80078aa:	f380 8811 	msr	BASEPRI, r0
 80078ae:	f7fe fff7 	bl	80068a0 <vTaskSwitchContext>
 80078b2:	f04f 0000 	mov.w	r0, #0
 80078b6:	f380 8811 	msr	BASEPRI, r0
 80078ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80078be:	6819      	ldr	r1, [r3, #0]
 80078c0:	6808      	ldr	r0, [r1, #0]
 80078c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078c6:	f380 8809 	msr	PSP, r0
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	4770      	bx	lr

080078d0 <pxCurrentTCBConst>:
 80078d0:	20000d98 	.word	0x20000d98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop

080078d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	607b      	str	r3, [r7, #4]
}
 80078f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80078f2:	f7fe ff1b 	bl	800672c <xTaskIncrementTick>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078fc:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <xPortSysTickHandler+0x40>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	2300      	movs	r3, #0
 8007906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f383 8811 	msr	BASEPRI, r3
}
 800790e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007920:	4b0a      	ldr	r3, [pc, #40]	@ (800794c <vPortSetupTimerInterrupt+0x30>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007926:	4b0a      	ldr	r3, [pc, #40]	@ (8007950 <vPortSetupTimerInterrupt+0x34>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800792c:	4b09      	ldr	r3, [pc, #36]	@ (8007954 <vPortSetupTimerInterrupt+0x38>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a09      	ldr	r2, [pc, #36]	@ (8007958 <vPortSetupTimerInterrupt+0x3c>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	099b      	lsrs	r3, r3, #6
 8007938:	4a08      	ldr	r2, [pc, #32]	@ (800795c <vPortSetupTimerInterrupt+0x40>)
 800793a:	3b01      	subs	r3, #1
 800793c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800793e:	4b03      	ldr	r3, [pc, #12]	@ (800794c <vPortSetupTimerInterrupt+0x30>)
 8007940:	2207      	movs	r2, #7
 8007942:	601a      	str	r2, [r3, #0]
}
 8007944:	bf00      	nop
 8007946:	46bd      	mov	sp, r7
 8007948:	bc80      	pop	{r7}
 800794a:	4770      	bx	lr
 800794c:	e000e010 	.word	0xe000e010
 8007950:	e000e018 	.word	0xe000e018
 8007954:	20000000 	.word	0x20000000
 8007958:	10624dd3 	.word	0x10624dd3
 800795c:	e000e014 	.word	0xe000e014

08007960 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007966:	f3ef 8305 	mrs	r3, IPSR
 800796a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2b0f      	cmp	r3, #15
 8007970:	d915      	bls.n	800799e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007972:	4a17      	ldr	r2, [pc, #92]	@ (80079d0 <vPortValidateInterruptPriority+0x70>)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800797c:	4b15      	ldr	r3, [pc, #84]	@ (80079d4 <vPortValidateInterruptPriority+0x74>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	7afa      	ldrb	r2, [r7, #11]
 8007982:	429a      	cmp	r2, r3
 8007984:	d20b      	bcs.n	800799e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	607b      	str	r3, [r7, #4]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800799e:	4b0e      	ldr	r3, [pc, #56]	@ (80079d8 <vPortValidateInterruptPriority+0x78>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079a6:	4b0d      	ldr	r3, [pc, #52]	@ (80079dc <vPortValidateInterruptPriority+0x7c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d90b      	bls.n	80079c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	603b      	str	r3, [r7, #0]
}
 80079c0:	bf00      	nop
 80079c2:	bf00      	nop
 80079c4:	e7fd      	b.n	80079c2 <vPortValidateInterruptPriority+0x62>
	}
 80079c6:	bf00      	nop
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bc80      	pop	{r7}
 80079ce:	4770      	bx	lr
 80079d0:	e000e3f0 	.word	0xe000e3f0
 80079d4:	200013c4 	.word	0x200013c4
 80079d8:	e000ed0c 	.word	0xe000ed0c
 80079dc:	200013c8 	.word	0x200013c8

080079e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	@ 0x28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80079ec:	f7fe fde4 	bl	80065b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80079f0:	4b5c      	ldr	r3, [pc, #368]	@ (8007b64 <pvPortMalloc+0x184>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80079f8:	f000 f924 	bl	8007c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80079fc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b68 <pvPortMalloc+0x188>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f040 8095 	bne.w	8007b34 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01e      	beq.n	8007a4e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007a10:	2208      	movs	r2, #8
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d015      	beq.n	8007a4e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f023 0307 	bic.w	r3, r3, #7
 8007a28:	3308      	adds	r3, #8
 8007a2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f003 0307 	and.w	r3, r3, #7
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <pvPortMalloc+0x6e>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a3a:	f383 8811 	msr	BASEPRI, r3
 8007a3e:	f3bf 8f6f 	isb	sy
 8007a42:	f3bf 8f4f 	dsb	sy
 8007a46:	617b      	str	r3, [r7, #20]
}
 8007a48:	bf00      	nop
 8007a4a:	bf00      	nop
 8007a4c:	e7fd      	b.n	8007a4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d06f      	beq.n	8007b34 <pvPortMalloc+0x154>
 8007a54:	4b45      	ldr	r3, [pc, #276]	@ (8007b6c <pvPortMalloc+0x18c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d86a      	bhi.n	8007b34 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a5e:	4b44      	ldr	r3, [pc, #272]	@ (8007b70 <pvPortMalloc+0x190>)
 8007a60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a62:	4b43      	ldr	r3, [pc, #268]	@ (8007b70 <pvPortMalloc+0x190>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a68:	e004      	b.n	8007a74 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d903      	bls.n	8007a86 <pvPortMalloc+0xa6>
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1f1      	bne.n	8007a6a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007a86:	4b37      	ldr	r3, [pc, #220]	@ (8007b64 <pvPortMalloc+0x184>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d051      	beq.n	8007b34 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2208      	movs	r2, #8
 8007a96:	4413      	add	r3, r2
 8007a98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	1ad2      	subs	r2, r2, r3
 8007aaa:	2308      	movs	r3, #8
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d920      	bls.n	8007af4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f003 0307 	and.w	r3, r3, #7
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00b      	beq.n	8007adc <pvPortMalloc+0xfc>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	613b      	str	r3, [r7, #16]
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	1ad2      	subs	r2, r2, r3
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007aee:	69b8      	ldr	r0, [r7, #24]
 8007af0:	f000 f90a 	bl	8007d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007af4:	4b1d      	ldr	r3, [pc, #116]	@ (8007b6c <pvPortMalloc+0x18c>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	4a1b      	ldr	r2, [pc, #108]	@ (8007b6c <pvPortMalloc+0x18c>)
 8007b00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b02:	4b1a      	ldr	r3, [pc, #104]	@ (8007b6c <pvPortMalloc+0x18c>)
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	4b1b      	ldr	r3, [pc, #108]	@ (8007b74 <pvPortMalloc+0x194>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d203      	bcs.n	8007b16 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b0e:	4b17      	ldr	r3, [pc, #92]	@ (8007b6c <pvPortMalloc+0x18c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a18      	ldr	r2, [pc, #96]	@ (8007b74 <pvPortMalloc+0x194>)
 8007b14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b18:	685a      	ldr	r2, [r3, #4]
 8007b1a:	4b13      	ldr	r3, [pc, #76]	@ (8007b68 <pvPortMalloc+0x188>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	2200      	movs	r2, #0
 8007b28:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b2a:	4b13      	ldr	r3, [pc, #76]	@ (8007b78 <pvPortMalloc+0x198>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	4a11      	ldr	r2, [pc, #68]	@ (8007b78 <pvPortMalloc+0x198>)
 8007b32:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b34:	f7fe fd4e 	bl	80065d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f003 0307 	and.w	r3, r3, #7
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <pvPortMalloc+0x17a>
	__asm volatile
 8007b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b46:	f383 8811 	msr	BASEPRI, r3
 8007b4a:	f3bf 8f6f 	isb	sy
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	60fb      	str	r3, [r7, #12]
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop
 8007b58:	e7fd      	b.n	8007b56 <pvPortMalloc+0x176>
	return pvReturn;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3728      	adds	r7, #40	@ 0x28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20001fd4 	.word	0x20001fd4
 8007b68:	20001fe8 	.word	0x20001fe8
 8007b6c:	20001fd8 	.word	0x20001fd8
 8007b70:	20001fcc 	.word	0x20001fcc
 8007b74:	20001fdc 	.word	0x20001fdc
 8007b78:	20001fe0 	.word	0x20001fe0

08007b7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d04f      	beq.n	8007c2e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007b8e:	2308      	movs	r3, #8
 8007b90:	425b      	negs	r3, r3
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4413      	add	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	4b25      	ldr	r3, [pc, #148]	@ (8007c38 <vPortFree+0xbc>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <vPortFree+0x46>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	60fb      	str	r3, [r7, #12]
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	e7fd      	b.n	8007bbe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00b      	beq.n	8007be2 <vPortFree+0x66>
	__asm volatile
 8007bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	60bb      	str	r3, [r7, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	bf00      	nop
 8007be0:	e7fd      	b.n	8007bde <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4b14      	ldr	r3, [pc, #80]	@ (8007c38 <vPortFree+0xbc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d01e      	beq.n	8007c2e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d11a      	bne.n	8007c2e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8007c38 <vPortFree+0xbc>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	401a      	ands	r2, r3
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c08:	f7fe fcd6 	bl	80065b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4b0a      	ldr	r3, [pc, #40]	@ (8007c3c <vPortFree+0xc0>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	4a09      	ldr	r2, [pc, #36]	@ (8007c3c <vPortFree+0xc0>)
 8007c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c1a:	6938      	ldr	r0, [r7, #16]
 8007c1c:	f000 f874 	bl	8007d08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c20:	4b07      	ldr	r3, [pc, #28]	@ (8007c40 <vPortFree+0xc4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	3301      	adds	r3, #1
 8007c26:	4a06      	ldr	r2, [pc, #24]	@ (8007c40 <vPortFree+0xc4>)
 8007c28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c2a:	f7fe fcd3 	bl	80065d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c2e:	bf00      	nop
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20001fe8 	.word	0x20001fe8
 8007c3c:	20001fd8 	.word	0x20001fd8
 8007c40:	20001fe4 	.word	0x20001fe4

08007c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c50:	4b27      	ldr	r3, [pc, #156]	@ (8007cf0 <prvHeapInit+0xac>)
 8007c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f003 0307 	and.w	r3, r3, #7
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00c      	beq.n	8007c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3307      	adds	r3, #7
 8007c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f023 0307 	bic.w	r3, r3, #7
 8007c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf0 <prvHeapInit+0xac>)
 8007c74:	4413      	add	r3, r2
 8007c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8007cf4 <prvHeapInit+0xb0>)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c82:	4b1c      	ldr	r3, [pc, #112]	@ (8007cf4 <prvHeapInit+0xb0>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c90:	2208      	movs	r2, #8
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	1a9b      	subs	r3, r3, r2
 8007c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0307 	bic.w	r3, r3, #7
 8007c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a15      	ldr	r2, [pc, #84]	@ (8007cf8 <prvHeapInit+0xb4>)
 8007ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ca6:	4b14      	ldr	r3, [pc, #80]	@ (8007cf8 <prvHeapInit+0xb4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2200      	movs	r2, #0
 8007cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cae:	4b12      	ldr	r3, [pc, #72]	@ (8007cf8 <prvHeapInit+0xb4>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	1ad2      	subs	r2, r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf8 <prvHeapInit+0xb4>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8007cfc <prvHeapInit+0xb8>)
 8007cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4a09      	ldr	r2, [pc, #36]	@ (8007d00 <prvHeapInit+0xbc>)
 8007cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007cdc:	4b09      	ldr	r3, [pc, #36]	@ (8007d04 <prvHeapInit+0xc0>)
 8007cde:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007ce2:	601a      	str	r2, [r3, #0]
}
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bc80      	pop	{r7}
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	200013cc 	.word	0x200013cc
 8007cf4:	20001fcc 	.word	0x20001fcc
 8007cf8:	20001fd4 	.word	0x20001fd4
 8007cfc:	20001fdc 	.word	0x20001fdc
 8007d00:	20001fd8 	.word	0x20001fd8
 8007d04:	20001fe8 	.word	0x20001fe8

08007d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d10:	4b27      	ldr	r3, [pc, #156]	@ (8007db0 <prvInsertBlockIntoFreeList+0xa8>)
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	e002      	b.n	8007d1c <prvInsertBlockIntoFreeList+0x14>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d8f7      	bhi.n	8007d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	4413      	add	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d108      	bne.n	8007d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d118      	bne.n	8007d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b14      	ldr	r3, [pc, #80]	@ (8007db4 <prvInsertBlockIntoFreeList+0xac>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d00d      	beq.n	8007d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	441a      	add	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e008      	b.n	8007d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d86:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <prvInsertBlockIntoFreeList+0xac>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	e003      	b.n	8007d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d002      	beq.n	8007da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007da6:	bf00      	nop
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr
 8007db0:	20001fcc 	.word	0x20001fcc
 8007db4:	20001fd4 	.word	0x20001fd4

08007db8 <memset>:
 8007db8:	4603      	mov	r3, r0
 8007dba:	4402      	add	r2, r0
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <memset+0xa>
 8007dc0:	4770      	bx	lr
 8007dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8007dc6:	e7f9      	b.n	8007dbc <memset+0x4>

08007dc8 <__errno>:
 8007dc8:	4b01      	ldr	r3, [pc, #4]	@ (8007dd0 <__errno+0x8>)
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20000010 	.word	0x20000010

08007dd4 <__libc_init_array>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	2600      	movs	r6, #0
 8007dd8:	4d0c      	ldr	r5, [pc, #48]	@ (8007e0c <__libc_init_array+0x38>)
 8007dda:	4c0d      	ldr	r4, [pc, #52]	@ (8007e10 <__libc_init_array+0x3c>)
 8007ddc:	1b64      	subs	r4, r4, r5
 8007dde:	10a4      	asrs	r4, r4, #2
 8007de0:	42a6      	cmp	r6, r4
 8007de2:	d109      	bne.n	8007df8 <__libc_init_array+0x24>
 8007de4:	f000 fcbc 	bl	8008760 <_init>
 8007de8:	2600      	movs	r6, #0
 8007dea:	4d0a      	ldr	r5, [pc, #40]	@ (8007e14 <__libc_init_array+0x40>)
 8007dec:	4c0a      	ldr	r4, [pc, #40]	@ (8007e18 <__libc_init_array+0x44>)
 8007dee:	1b64      	subs	r4, r4, r5
 8007df0:	10a4      	asrs	r4, r4, #2
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	d105      	bne.n	8007e02 <__libc_init_array+0x2e>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dfc:	4798      	blx	r3
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7ee      	b.n	8007de0 <__libc_init_array+0xc>
 8007e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e06:	4798      	blx	r3
 8007e08:	3601      	adds	r6, #1
 8007e0a:	e7f2      	b.n	8007df2 <__libc_init_array+0x1e>
 8007e0c:	0800883c 	.word	0x0800883c
 8007e10:	0800883c 	.word	0x0800883c
 8007e14:	0800883c 	.word	0x0800883c
 8007e18:	08008840 	.word	0x08008840

08007e1c <memcpy>:
 8007e1c:	440a      	add	r2, r1
 8007e1e:	4291      	cmp	r1, r2
 8007e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e24:	d100      	bne.n	8007e28 <memcpy+0xc>
 8007e26:	4770      	bx	lr
 8007e28:	b510      	push	{r4, lr}
 8007e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e2e:	4291      	cmp	r1, r2
 8007e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e34:	d1f9      	bne.n	8007e2a <memcpy+0xe>
 8007e36:	bd10      	pop	{r4, pc}

08007e38 <powf>:
 8007e38:	b570      	push	{r4, r5, r6, lr}
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	f000 f851 	bl	8007ee4 <__ieee754_powf>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4605      	mov	r5, r0
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7f8 fc56 	bl	80006f8 <__aeabi_fcmpun>
 8007e4c:	bb68      	cbnz	r0, 8007eaa <powf+0x72>
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7f8 fc1f 	bl	8000694 <__aeabi_fcmpeq>
 8007e56:	b190      	cbz	r0, 8007e7e <powf+0x46>
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7f8 fc1a 	bl	8000694 <__aeabi_fcmpeq>
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d133      	bne.n	8007ecc <powf+0x94>
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f834 	bl	8007ed2 <finitef>
 8007e6a:	b1f0      	cbz	r0, 8007eaa <powf+0x72>
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f7f8 fc1a 	bl	80006a8 <__aeabi_fcmplt>
 8007e74:	b1c8      	cbz	r0, 8007eaa <powf+0x72>
 8007e76:	f7ff ffa7 	bl	8007dc8 <__errno>
 8007e7a:	2322      	movs	r3, #34	@ 0x22
 8007e7c:	e014      	b.n	8007ea8 <powf+0x70>
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f000 f827 	bl	8007ed2 <finitef>
 8007e84:	b998      	cbnz	r0, 8007eae <powf+0x76>
 8007e86:	4630      	mov	r0, r6
 8007e88:	f000 f823 	bl	8007ed2 <finitef>
 8007e8c:	b178      	cbz	r0, 8007eae <powf+0x76>
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 f81f 	bl	8007ed2 <finitef>
 8007e94:	b158      	cbz	r0, 8007eae <powf+0x76>
 8007e96:	4629      	mov	r1, r5
 8007e98:	4628      	mov	r0, r5
 8007e9a:	f7f8 fc2d 	bl	80006f8 <__aeabi_fcmpun>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d0e9      	beq.n	8007e76 <powf+0x3e>
 8007ea2:	f7ff ff91 	bl	8007dc8 <__errno>
 8007ea6:	2321      	movs	r3, #33	@ 0x21
 8007ea8:	6003      	str	r3, [r0, #0]
 8007eaa:	4628      	mov	r0, r5
 8007eac:	bd70      	pop	{r4, r5, r6, pc}
 8007eae:	2100      	movs	r1, #0
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f7f8 fbef 	bl	8000694 <__aeabi_fcmpeq>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d0f7      	beq.n	8007eaa <powf+0x72>
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 f809 	bl	8007ed2 <finitef>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	d0f2      	beq.n	8007eaa <powf+0x72>
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 f804 	bl	8007ed2 <finitef>
 8007eca:	e7d3      	b.n	8007e74 <powf+0x3c>
 8007ecc:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8007ed0:	e7eb      	b.n	8007eaa <powf+0x72>

08007ed2 <finitef>:
 8007ed2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007ed6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007eda:	bfac      	ite	ge
 8007edc:	2000      	movge	r0, #0
 8007ede:	2001      	movlt	r0, #1
 8007ee0:	4770      	bx	lr
	...

08007ee4 <__ieee754_powf>:
 8007ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8007eec:	4681      	mov	r9, r0
 8007eee:	460f      	mov	r7, r1
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	d10c      	bne.n	8007f12 <__ieee754_powf+0x2e>
 8007ef8:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8007efc:	0076      	lsls	r6, r6, #1
 8007efe:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8007f02:	f240 8310 	bls.w	8008526 <__ieee754_powf+0x642>
 8007f06:	4639      	mov	r1, r7
 8007f08:	4648      	mov	r0, r9
 8007f0a:	f7f8 f927 	bl	800015c <__addsf3>
 8007f0e:	4601      	mov	r1, r0
 8007f10:	e043      	b.n	8007f9a <__ieee754_powf+0xb6>
 8007f12:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8007f16:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8007f1a:	d802      	bhi.n	8007f22 <__ieee754_powf+0x3e>
 8007f1c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007f20:	d908      	bls.n	8007f34 <__ieee754_powf+0x50>
 8007f22:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8007f26:	d1ee      	bne.n	8007f06 <__ieee754_powf+0x22>
 8007f28:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8007f2c:	0064      	lsls	r4, r4, #1
 8007f2e:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8007f32:	e7e6      	b.n	8007f02 <__ieee754_powf+0x1e>
 8007f34:	2800      	cmp	r0, #0
 8007f36:	da1f      	bge.n	8007f78 <__ieee754_powf+0x94>
 8007f38:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8007f3c:	f080 82f8 	bcs.w	8008530 <__ieee754_powf+0x64c>
 8007f40:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8007f44:	d32f      	bcc.n	8007fa6 <__ieee754_powf+0xc2>
 8007f46:	ea4f 53eb 	mov.w	r3, fp, asr #23
 8007f4a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8007f4e:	fa4b f503 	asr.w	r5, fp, r3
 8007f52:	fa05 f303 	lsl.w	r3, r5, r3
 8007f56:	455b      	cmp	r3, fp
 8007f58:	d123      	bne.n	8007fa2 <__ieee754_powf+0xbe>
 8007f5a:	f005 0501 	and.w	r5, r5, #1
 8007f5e:	f1c5 0502 	rsb	r5, r5, #2
 8007f62:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8007f66:	d11f      	bne.n	8007fa8 <__ieee754_powf+0xc4>
 8007f68:	2c00      	cmp	r4, #0
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	da15      	bge.n	8007f9a <__ieee754_powf+0xb6>
 8007f6e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8007f72:	f7f8 faaf 	bl	80004d4 <__aeabi_fdiv>
 8007f76:	e7ca      	b.n	8007f0e <__ieee754_powf+0x2a>
 8007f78:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8007f7c:	d111      	bne.n	8007fa2 <__ieee754_powf+0xbe>
 8007f7e:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8007f82:	f000 82d0 	beq.w	8008526 <__ieee754_powf+0x642>
 8007f86:	d904      	bls.n	8007f92 <__ieee754_powf+0xae>
 8007f88:	2c00      	cmp	r4, #0
 8007f8a:	f280 82cf 	bge.w	800852c <__ieee754_powf+0x648>
 8007f8e:	2100      	movs	r1, #0
 8007f90:	e003      	b.n	8007f9a <__ieee754_powf+0xb6>
 8007f92:	2c00      	cmp	r4, #0
 8007f94:	dafb      	bge.n	8007f8e <__ieee754_powf+0xaa>
 8007f96:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 8007f9a:	4608      	mov	r0, r1
 8007f9c:	b007      	add	sp, #28
 8007f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa2:	2500      	movs	r5, #0
 8007fa4:	e7dd      	b.n	8007f62 <__ieee754_powf+0x7e>
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8007fac:	d104      	bne.n	8007fb8 <__ieee754_powf+0xd4>
 8007fae:	4649      	mov	r1, r9
 8007fb0:	4648      	mov	r0, r9
 8007fb2:	f7f8 f9db 	bl	800036c <__aeabi_fmul>
 8007fb6:	e7aa      	b.n	8007f0e <__ieee754_powf+0x2a>
 8007fb8:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8007fbc:	f040 82bd 	bne.w	800853a <__ieee754_powf+0x656>
 8007fc0:	2e00      	cmp	r6, #0
 8007fc2:	f2c0 82ba 	blt.w	800853a <__ieee754_powf+0x656>
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	b007      	add	sp, #28
 8007fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fce:	f000 bb57 	b.w	8008680 <__ieee754_sqrtf>
 8007fd2:	2d01      	cmp	r5, #1
 8007fd4:	d1e1      	bne.n	8007f9a <__ieee754_powf+0xb6>
 8007fd6:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8007fda:	e798      	b.n	8007f0e <__ieee754_powf+0x2a>
 8007fdc:	0ff3      	lsrs	r3, r6, #31
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	9303      	str	r3, [sp, #12]
 8007fe2:	432b      	orrs	r3, r5
 8007fe4:	d101      	bne.n	8007fea <__ieee754_powf+0x106>
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	e2c5      	b.n	8008576 <__ieee754_powf+0x692>
 8007fea:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8007fee:	f240 809b 	bls.w	8008128 <__ieee754_powf+0x244>
 8007ff2:	4b46      	ldr	r3, [pc, #280]	@ (800810c <__ieee754_powf+0x228>)
 8007ff4:	4598      	cmp	r8, r3
 8007ff6:	d807      	bhi.n	8008008 <__ieee754_powf+0x124>
 8007ff8:	2c00      	cmp	r4, #0
 8007ffa:	da0a      	bge.n	8008012 <__ieee754_powf+0x12e>
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	b007      	add	sp, #28
 8008000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	f000 bb37 	b.w	8008676 <__math_oflowf>
 8008008:	4b41      	ldr	r3, [pc, #260]	@ (8008110 <__ieee754_powf+0x22c>)
 800800a:	4598      	cmp	r8, r3
 800800c:	d907      	bls.n	800801e <__ieee754_powf+0x13a>
 800800e:	2c00      	cmp	r4, #0
 8008010:	dcf4      	bgt.n	8007ffc <__ieee754_powf+0x118>
 8008012:	2000      	movs	r0, #0
 8008014:	b007      	add	sp, #28
 8008016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	f000 bb28 	b.w	800866e <__math_uflowf>
 800801e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008022:	f7f8 f899 	bl	8000158 <__aeabi_fsub>
 8008026:	493b      	ldr	r1, [pc, #236]	@ (8008114 <__ieee754_powf+0x230>)
 8008028:	4606      	mov	r6, r0
 800802a:	f7f8 f99f 	bl	800036c <__aeabi_fmul>
 800802e:	493a      	ldr	r1, [pc, #232]	@ (8008118 <__ieee754_powf+0x234>)
 8008030:	4680      	mov	r8, r0
 8008032:	4630      	mov	r0, r6
 8008034:	f7f8 f99a 	bl	800036c <__aeabi_fmul>
 8008038:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800803c:	4681      	mov	r9, r0
 800803e:	4630      	mov	r0, r6
 8008040:	f7f8 f994 	bl	800036c <__aeabi_fmul>
 8008044:	4601      	mov	r1, r0
 8008046:	4835      	ldr	r0, [pc, #212]	@ (800811c <__ieee754_powf+0x238>)
 8008048:	f7f8 f886 	bl	8000158 <__aeabi_fsub>
 800804c:	4631      	mov	r1, r6
 800804e:	f7f8 f98d 	bl	800036c <__aeabi_fmul>
 8008052:	4601      	mov	r1, r0
 8008054:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8008058:	f7f8 f87e 	bl	8000158 <__aeabi_fsub>
 800805c:	4631      	mov	r1, r6
 800805e:	4682      	mov	sl, r0
 8008060:	4630      	mov	r0, r6
 8008062:	f7f8 f983 	bl	800036c <__aeabi_fmul>
 8008066:	4601      	mov	r1, r0
 8008068:	4650      	mov	r0, sl
 800806a:	f7f8 f97f 	bl	800036c <__aeabi_fmul>
 800806e:	492c      	ldr	r1, [pc, #176]	@ (8008120 <__ieee754_powf+0x23c>)
 8008070:	f7f8 f97c 	bl	800036c <__aeabi_fmul>
 8008074:	4601      	mov	r1, r0
 8008076:	4648      	mov	r0, r9
 8008078:	f7f8 f86e 	bl	8000158 <__aeabi_fsub>
 800807c:	4601      	mov	r1, r0
 800807e:	4606      	mov	r6, r0
 8008080:	4640      	mov	r0, r8
 8008082:	f7f8 f86b 	bl	800015c <__addsf3>
 8008086:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800808a:	f02b 0b0f 	bic.w	fp, fp, #15
 800808e:	4641      	mov	r1, r8
 8008090:	4658      	mov	r0, fp
 8008092:	f7f8 f861 	bl	8000158 <__aeabi_fsub>
 8008096:	4601      	mov	r1, r0
 8008098:	4630      	mov	r0, r6
 800809a:	f7f8 f85d 	bl	8000158 <__aeabi_fsub>
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	3d01      	subs	r5, #1
 80080a2:	f36f 040b 	bfc	r4, #0, #12
 80080a6:	431d      	orrs	r5, r3
 80080a8:	4606      	mov	r6, r0
 80080aa:	4621      	mov	r1, r4
 80080ac:	4638      	mov	r0, r7
 80080ae:	bf14      	ite	ne
 80080b0:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80080b4:	4d1b      	ldreq	r5, [pc, #108]	@ (8008124 <__ieee754_powf+0x240>)
 80080b6:	f7f8 f84f 	bl	8000158 <__aeabi_fsub>
 80080ba:	4659      	mov	r1, fp
 80080bc:	f7f8 f956 	bl	800036c <__aeabi_fmul>
 80080c0:	4639      	mov	r1, r7
 80080c2:	4680      	mov	r8, r0
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7f8 f951 	bl	800036c <__aeabi_fmul>
 80080ca:	4601      	mov	r1, r0
 80080cc:	4640      	mov	r0, r8
 80080ce:	f7f8 f845 	bl	800015c <__addsf3>
 80080d2:	4621      	mov	r1, r4
 80080d4:	4606      	mov	r6, r0
 80080d6:	4658      	mov	r0, fp
 80080d8:	f7f8 f948 	bl	800036c <__aeabi_fmul>
 80080dc:	4601      	mov	r1, r0
 80080de:	4607      	mov	r7, r0
 80080e0:	4630      	mov	r0, r6
 80080e2:	f7f8 f83b 	bl	800015c <__addsf3>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	4604      	mov	r4, r0
 80080ea:	4680      	mov	r8, r0
 80080ec:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80080f0:	f340 813f 	ble.w	8008372 <__ieee754_powf+0x48e>
 80080f4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80080f8:	f240 8128 	bls.w	800834c <__ieee754_powf+0x468>
 80080fc:	2100      	movs	r1, #0
 80080fe:	4628      	mov	r0, r5
 8008100:	f7f8 fad2 	bl	80006a8 <__aeabi_fcmplt>
 8008104:	3800      	subs	r0, #0
 8008106:	bf18      	it	ne
 8008108:	2001      	movne	r0, #1
 800810a:	e778      	b.n	8007ffe <__ieee754_powf+0x11a>
 800810c:	3f7ffff3 	.word	0x3f7ffff3
 8008110:	3f800007 	.word	0x3f800007
 8008114:	3fb8aa00 	.word	0x3fb8aa00
 8008118:	36eca570 	.word	0x36eca570
 800811c:	3eaaaaab 	.word	0x3eaaaaab
 8008120:	3fb8aa3b 	.word	0x3fb8aa3b
 8008124:	bf800000 	.word	0xbf800000
 8008128:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800812c:	f040 810a 	bne.w	8008344 <__ieee754_powf+0x460>
 8008130:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8008134:	f7f8 f91a 	bl	800036c <__aeabi_fmul>
 8008138:	f06f 0217 	mvn.w	r2, #23
 800813c:	4682      	mov	sl, r0
 800813e:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8008142:	3b7f      	subs	r3, #127	@ 0x7f
 8008144:	441a      	add	r2, r3
 8008146:	4b95      	ldr	r3, [pc, #596]	@ (800839c <__ieee754_powf+0x4b8>)
 8008148:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 800814c:	459a      	cmp	sl, r3
 800814e:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8008152:	dd06      	ble.n	8008162 <__ieee754_powf+0x27e>
 8008154:	4b92      	ldr	r3, [pc, #584]	@ (80083a0 <__ieee754_powf+0x4bc>)
 8008156:	459a      	cmp	sl, r3
 8008158:	f340 80f6 	ble.w	8008348 <__ieee754_powf+0x464>
 800815c:	3201      	adds	r2, #1
 800815e:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8008162:	2300      	movs	r3, #0
 8008164:	9301      	str	r3, [sp, #4]
 8008166:	9205      	str	r2, [sp, #20]
 8008168:	4b8e      	ldr	r3, [pc, #568]	@ (80083a4 <__ieee754_powf+0x4c0>)
 800816a:	9a01      	ldr	r2, [sp, #4]
 800816c:	4630      	mov	r0, r6
 800816e:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8008172:	46b2      	mov	sl, r6
 8008174:	4659      	mov	r1, fp
 8008176:	f7f7 ffef 	bl	8000158 <__aeabi_fsub>
 800817a:	4631      	mov	r1, r6
 800817c:	4681      	mov	r9, r0
 800817e:	4658      	mov	r0, fp
 8008180:	f7f7 ffec 	bl	800015c <__addsf3>
 8008184:	4601      	mov	r1, r0
 8008186:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800818a:	f7f8 f9a3 	bl	80004d4 <__aeabi_fdiv>
 800818e:	4601      	mov	r1, r0
 8008190:	9004      	str	r0, [sp, #16]
 8008192:	4648      	mov	r0, r9
 8008194:	f7f8 f8ea 	bl	800036c <__aeabi_fmul>
 8008198:	9002      	str	r0, [sp, #8]
 800819a:	9b02      	ldr	r3, [sp, #8]
 800819c:	1076      	asrs	r6, r6, #1
 800819e:	f36f 030b 	bfc	r3, #0, #12
 80081a2:	4698      	mov	r8, r3
 80081a4:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80081a8:	9b01      	ldr	r3, [sp, #4]
 80081aa:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80081ae:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80081b2:	4631      	mov	r1, r6
 80081b4:	4640      	mov	r0, r8
 80081b6:	f7f8 f8d9 	bl	800036c <__aeabi_fmul>
 80081ba:	4601      	mov	r1, r0
 80081bc:	4648      	mov	r0, r9
 80081be:	f7f7 ffcb 	bl	8000158 <__aeabi_fsub>
 80081c2:	4659      	mov	r1, fp
 80081c4:	4681      	mov	r9, r0
 80081c6:	4630      	mov	r0, r6
 80081c8:	f7f7 ffc6 	bl	8000158 <__aeabi_fsub>
 80081cc:	4601      	mov	r1, r0
 80081ce:	4650      	mov	r0, sl
 80081d0:	f7f7 ffc2 	bl	8000158 <__aeabi_fsub>
 80081d4:	4641      	mov	r1, r8
 80081d6:	f7f8 f8c9 	bl	800036c <__aeabi_fmul>
 80081da:	4601      	mov	r1, r0
 80081dc:	4648      	mov	r0, r9
 80081de:	f7f7 ffbb 	bl	8000158 <__aeabi_fsub>
 80081e2:	9b04      	ldr	r3, [sp, #16]
 80081e4:	4619      	mov	r1, r3
 80081e6:	f7f8 f8c1 	bl	800036c <__aeabi_fmul>
 80081ea:	9902      	ldr	r1, [sp, #8]
 80081ec:	4683      	mov	fp, r0
 80081ee:	4608      	mov	r0, r1
 80081f0:	f7f8 f8bc 	bl	800036c <__aeabi_fmul>
 80081f4:	4606      	mov	r6, r0
 80081f6:	496c      	ldr	r1, [pc, #432]	@ (80083a8 <__ieee754_powf+0x4c4>)
 80081f8:	f7f8 f8b8 	bl	800036c <__aeabi_fmul>
 80081fc:	496b      	ldr	r1, [pc, #428]	@ (80083ac <__ieee754_powf+0x4c8>)
 80081fe:	f7f7 ffad 	bl	800015c <__addsf3>
 8008202:	4631      	mov	r1, r6
 8008204:	f7f8 f8b2 	bl	800036c <__aeabi_fmul>
 8008208:	4969      	ldr	r1, [pc, #420]	@ (80083b0 <__ieee754_powf+0x4cc>)
 800820a:	f7f7 ffa7 	bl	800015c <__addsf3>
 800820e:	4631      	mov	r1, r6
 8008210:	f7f8 f8ac 	bl	800036c <__aeabi_fmul>
 8008214:	4967      	ldr	r1, [pc, #412]	@ (80083b4 <__ieee754_powf+0x4d0>)
 8008216:	f7f7 ffa1 	bl	800015c <__addsf3>
 800821a:	4631      	mov	r1, r6
 800821c:	f7f8 f8a6 	bl	800036c <__aeabi_fmul>
 8008220:	4965      	ldr	r1, [pc, #404]	@ (80083b8 <__ieee754_powf+0x4d4>)
 8008222:	f7f7 ff9b 	bl	800015c <__addsf3>
 8008226:	4631      	mov	r1, r6
 8008228:	f7f8 f8a0 	bl	800036c <__aeabi_fmul>
 800822c:	4963      	ldr	r1, [pc, #396]	@ (80083bc <__ieee754_powf+0x4d8>)
 800822e:	f7f7 ff95 	bl	800015c <__addsf3>
 8008232:	4631      	mov	r1, r6
 8008234:	4681      	mov	r9, r0
 8008236:	4630      	mov	r0, r6
 8008238:	f7f8 f898 	bl	800036c <__aeabi_fmul>
 800823c:	4601      	mov	r1, r0
 800823e:	4648      	mov	r0, r9
 8008240:	f7f8 f894 	bl	800036c <__aeabi_fmul>
 8008244:	4606      	mov	r6, r0
 8008246:	4641      	mov	r1, r8
 8008248:	9802      	ldr	r0, [sp, #8]
 800824a:	f7f7 ff87 	bl	800015c <__addsf3>
 800824e:	4659      	mov	r1, fp
 8008250:	f7f8 f88c 	bl	800036c <__aeabi_fmul>
 8008254:	4631      	mov	r1, r6
 8008256:	f7f7 ff81 	bl	800015c <__addsf3>
 800825a:	4641      	mov	r1, r8
 800825c:	4681      	mov	r9, r0
 800825e:	4640      	mov	r0, r8
 8008260:	f7f8 f884 	bl	800036c <__aeabi_fmul>
 8008264:	4956      	ldr	r1, [pc, #344]	@ (80083c0 <__ieee754_powf+0x4dc>)
 8008266:	4682      	mov	sl, r0
 8008268:	f7f7 ff78 	bl	800015c <__addsf3>
 800826c:	4649      	mov	r1, r9
 800826e:	f7f7 ff75 	bl	800015c <__addsf3>
 8008272:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8008276:	f026 060f 	bic.w	r6, r6, #15
 800827a:	4631      	mov	r1, r6
 800827c:	4640      	mov	r0, r8
 800827e:	f7f8 f875 	bl	800036c <__aeabi_fmul>
 8008282:	494f      	ldr	r1, [pc, #316]	@ (80083c0 <__ieee754_powf+0x4dc>)
 8008284:	4680      	mov	r8, r0
 8008286:	4630      	mov	r0, r6
 8008288:	f7f7 ff66 	bl	8000158 <__aeabi_fsub>
 800828c:	4651      	mov	r1, sl
 800828e:	f7f7 ff63 	bl	8000158 <__aeabi_fsub>
 8008292:	4601      	mov	r1, r0
 8008294:	4648      	mov	r0, r9
 8008296:	f7f7 ff5f 	bl	8000158 <__aeabi_fsub>
 800829a:	9902      	ldr	r1, [sp, #8]
 800829c:	f7f8 f866 	bl	800036c <__aeabi_fmul>
 80082a0:	4631      	mov	r1, r6
 80082a2:	4681      	mov	r9, r0
 80082a4:	4658      	mov	r0, fp
 80082a6:	f7f8 f861 	bl	800036c <__aeabi_fmul>
 80082aa:	4601      	mov	r1, r0
 80082ac:	4648      	mov	r0, r9
 80082ae:	f7f7 ff55 	bl	800015c <__addsf3>
 80082b2:	4682      	mov	sl, r0
 80082b4:	4601      	mov	r1, r0
 80082b6:	4640      	mov	r0, r8
 80082b8:	f7f7 ff50 	bl	800015c <__addsf3>
 80082bc:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80082c0:	f026 060f 	bic.w	r6, r6, #15
 80082c4:	4630      	mov	r0, r6
 80082c6:	493f      	ldr	r1, [pc, #252]	@ (80083c4 <__ieee754_powf+0x4e0>)
 80082c8:	f7f8 f850 	bl	800036c <__aeabi_fmul>
 80082cc:	4641      	mov	r1, r8
 80082ce:	4681      	mov	r9, r0
 80082d0:	4630      	mov	r0, r6
 80082d2:	f7f7 ff41 	bl	8000158 <__aeabi_fsub>
 80082d6:	4601      	mov	r1, r0
 80082d8:	4650      	mov	r0, sl
 80082da:	f7f7 ff3d 	bl	8000158 <__aeabi_fsub>
 80082de:	493a      	ldr	r1, [pc, #232]	@ (80083c8 <__ieee754_powf+0x4e4>)
 80082e0:	f7f8 f844 	bl	800036c <__aeabi_fmul>
 80082e4:	4939      	ldr	r1, [pc, #228]	@ (80083cc <__ieee754_powf+0x4e8>)
 80082e6:	4680      	mov	r8, r0
 80082e8:	4630      	mov	r0, r6
 80082ea:	f7f8 f83f 	bl	800036c <__aeabi_fmul>
 80082ee:	4601      	mov	r1, r0
 80082f0:	4640      	mov	r0, r8
 80082f2:	f7f7 ff33 	bl	800015c <__addsf3>
 80082f6:	4b36      	ldr	r3, [pc, #216]	@ (80083d0 <__ieee754_powf+0x4ec>)
 80082f8:	9a01      	ldr	r2, [sp, #4]
 80082fa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082fe:	f7f7 ff2d 	bl	800015c <__addsf3>
 8008302:	9a05      	ldr	r2, [sp, #20]
 8008304:	4606      	mov	r6, r0
 8008306:	4610      	mov	r0, r2
 8008308:	f7f7 ffdc 	bl	80002c4 <__aeabi_i2f>
 800830c:	4680      	mov	r8, r0
 800830e:	4b31      	ldr	r3, [pc, #196]	@ (80083d4 <__ieee754_powf+0x4f0>)
 8008310:	9a01      	ldr	r2, [sp, #4]
 8008312:	4631      	mov	r1, r6
 8008314:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8008318:	4648      	mov	r0, r9
 800831a:	f7f7 ff1f 	bl	800015c <__addsf3>
 800831e:	4651      	mov	r1, sl
 8008320:	f7f7 ff1c 	bl	800015c <__addsf3>
 8008324:	4641      	mov	r1, r8
 8008326:	f7f7 ff19 	bl	800015c <__addsf3>
 800832a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800832e:	f02b 0b0f 	bic.w	fp, fp, #15
 8008332:	4641      	mov	r1, r8
 8008334:	4658      	mov	r0, fp
 8008336:	f7f7 ff0f 	bl	8000158 <__aeabi_fsub>
 800833a:	4651      	mov	r1, sl
 800833c:	f7f7 ff0c 	bl	8000158 <__aeabi_fsub>
 8008340:	4649      	mov	r1, r9
 8008342:	e6a6      	b.n	8008092 <__ieee754_powf+0x1ae>
 8008344:	2200      	movs	r2, #0
 8008346:	e6fa      	b.n	800813e <__ieee754_powf+0x25a>
 8008348:	2301      	movs	r3, #1
 800834a:	e70b      	b.n	8008164 <__ieee754_powf+0x280>
 800834c:	d148      	bne.n	80083e0 <__ieee754_powf+0x4fc>
 800834e:	4922      	ldr	r1, [pc, #136]	@ (80083d8 <__ieee754_powf+0x4f4>)
 8008350:	4630      	mov	r0, r6
 8008352:	f7f7 ff03 	bl	800015c <__addsf3>
 8008356:	4639      	mov	r1, r7
 8008358:	4681      	mov	r9, r0
 800835a:	4620      	mov	r0, r4
 800835c:	f7f7 fefc 	bl	8000158 <__aeabi_fsub>
 8008360:	4601      	mov	r1, r0
 8008362:	4648      	mov	r0, r9
 8008364:	f7f8 f9be 	bl	80006e4 <__aeabi_fcmpgt>
 8008368:	2800      	cmp	r0, #0
 800836a:	f47f aec7 	bne.w	80080fc <__ieee754_powf+0x218>
 800836e:	2386      	movs	r3, #134	@ 0x86
 8008370:	e03b      	b.n	80083ea <__ieee754_powf+0x506>
 8008372:	4a1a      	ldr	r2, [pc, #104]	@ (80083dc <__ieee754_powf+0x4f8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d907      	bls.n	8008388 <__ieee754_powf+0x4a4>
 8008378:	2100      	movs	r1, #0
 800837a:	4628      	mov	r0, r5
 800837c:	f7f8 f994 	bl	80006a8 <__aeabi_fcmplt>
 8008380:	3800      	subs	r0, #0
 8008382:	bf18      	it	ne
 8008384:	2001      	movne	r0, #1
 8008386:	e645      	b.n	8008014 <__ieee754_powf+0x130>
 8008388:	d12a      	bne.n	80083e0 <__ieee754_powf+0x4fc>
 800838a:	4639      	mov	r1, r7
 800838c:	f7f7 fee4 	bl	8000158 <__aeabi_fsub>
 8008390:	4631      	mov	r1, r6
 8008392:	f7f8 f99d 	bl	80006d0 <__aeabi_fcmpge>
 8008396:	2800      	cmp	r0, #0
 8008398:	d0e9      	beq.n	800836e <__ieee754_powf+0x48a>
 800839a:	e7ed      	b.n	8008378 <__ieee754_powf+0x494>
 800839c:	001cc471 	.word	0x001cc471
 80083a0:	005db3d6 	.word	0x005db3d6
 80083a4:	0800882c 	.word	0x0800882c
 80083a8:	3e53f142 	.word	0x3e53f142
 80083ac:	3e6c3255 	.word	0x3e6c3255
 80083b0:	3e8ba305 	.word	0x3e8ba305
 80083b4:	3eaaaaab 	.word	0x3eaaaaab
 80083b8:	3edb6db7 	.word	0x3edb6db7
 80083bc:	3f19999a 	.word	0x3f19999a
 80083c0:	40400000 	.word	0x40400000
 80083c4:	3f763800 	.word	0x3f763800
 80083c8:	3f76384f 	.word	0x3f76384f
 80083cc:	369dc3a0 	.word	0x369dc3a0
 80083d0:	0800881c 	.word	0x0800881c
 80083d4:	08008824 	.word	0x08008824
 80083d8:	3338aa3c 	.word	0x3338aa3c
 80083dc:	43160000 	.word	0x43160000
 80083e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80083e4:	f240 809b 	bls.w	800851e <__ieee754_powf+0x63a>
 80083e8:	15db      	asrs	r3, r3, #23
 80083ea:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80083ee:	3b7e      	subs	r3, #126	@ 0x7e
 80083f0:	411c      	asrs	r4, r3
 80083f2:	4444      	add	r4, r8
 80083f4:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 80083f8:	4961      	ldr	r1, [pc, #388]	@ (8008580 <__ieee754_powf+0x69c>)
 80083fa:	3b7f      	subs	r3, #127	@ 0x7f
 80083fc:	4119      	asrs	r1, r3
 80083fe:	4021      	ands	r1, r4
 8008400:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008404:	f1c3 0317 	rsb	r3, r3, #23
 8008408:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 800840c:	4638      	mov	r0, r7
 800840e:	411c      	asrs	r4, r3
 8008410:	f1b8 0f00 	cmp.w	r8, #0
 8008414:	bfb8      	it	lt
 8008416:	4264      	neglt	r4, r4
 8008418:	f7f7 fe9e 	bl	8000158 <__aeabi_fsub>
 800841c:	4607      	mov	r7, r0
 800841e:	4631      	mov	r1, r6
 8008420:	4638      	mov	r0, r7
 8008422:	f7f7 fe9b 	bl	800015c <__addsf3>
 8008426:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800842a:	f028 080f 	bic.w	r8, r8, #15
 800842e:	4640      	mov	r0, r8
 8008430:	4954      	ldr	r1, [pc, #336]	@ (8008584 <__ieee754_powf+0x6a0>)
 8008432:	f7f7 ff9b 	bl	800036c <__aeabi_fmul>
 8008436:	4639      	mov	r1, r7
 8008438:	4681      	mov	r9, r0
 800843a:	4640      	mov	r0, r8
 800843c:	f7f7 fe8c 	bl	8000158 <__aeabi_fsub>
 8008440:	4601      	mov	r1, r0
 8008442:	4630      	mov	r0, r6
 8008444:	f7f7 fe88 	bl	8000158 <__aeabi_fsub>
 8008448:	494f      	ldr	r1, [pc, #316]	@ (8008588 <__ieee754_powf+0x6a4>)
 800844a:	f7f7 ff8f 	bl	800036c <__aeabi_fmul>
 800844e:	494f      	ldr	r1, [pc, #316]	@ (800858c <__ieee754_powf+0x6a8>)
 8008450:	4606      	mov	r6, r0
 8008452:	4640      	mov	r0, r8
 8008454:	f7f7 ff8a 	bl	800036c <__aeabi_fmul>
 8008458:	4601      	mov	r1, r0
 800845a:	4630      	mov	r0, r6
 800845c:	f7f7 fe7e 	bl	800015c <__addsf3>
 8008460:	4607      	mov	r7, r0
 8008462:	4601      	mov	r1, r0
 8008464:	4648      	mov	r0, r9
 8008466:	f7f7 fe79 	bl	800015c <__addsf3>
 800846a:	4649      	mov	r1, r9
 800846c:	4606      	mov	r6, r0
 800846e:	f7f7 fe73 	bl	8000158 <__aeabi_fsub>
 8008472:	4601      	mov	r1, r0
 8008474:	4638      	mov	r0, r7
 8008476:	f7f7 fe6f 	bl	8000158 <__aeabi_fsub>
 800847a:	4631      	mov	r1, r6
 800847c:	4680      	mov	r8, r0
 800847e:	4630      	mov	r0, r6
 8008480:	f7f7 ff74 	bl	800036c <__aeabi_fmul>
 8008484:	4607      	mov	r7, r0
 8008486:	4942      	ldr	r1, [pc, #264]	@ (8008590 <__ieee754_powf+0x6ac>)
 8008488:	f7f7 ff70 	bl	800036c <__aeabi_fmul>
 800848c:	4941      	ldr	r1, [pc, #260]	@ (8008594 <__ieee754_powf+0x6b0>)
 800848e:	f7f7 fe63 	bl	8000158 <__aeabi_fsub>
 8008492:	4639      	mov	r1, r7
 8008494:	f7f7 ff6a 	bl	800036c <__aeabi_fmul>
 8008498:	493f      	ldr	r1, [pc, #252]	@ (8008598 <__ieee754_powf+0x6b4>)
 800849a:	f7f7 fe5f 	bl	800015c <__addsf3>
 800849e:	4639      	mov	r1, r7
 80084a0:	f7f7 ff64 	bl	800036c <__aeabi_fmul>
 80084a4:	493d      	ldr	r1, [pc, #244]	@ (800859c <__ieee754_powf+0x6b8>)
 80084a6:	f7f7 fe57 	bl	8000158 <__aeabi_fsub>
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f7 ff5e 	bl	800036c <__aeabi_fmul>
 80084b0:	493b      	ldr	r1, [pc, #236]	@ (80085a0 <__ieee754_powf+0x6bc>)
 80084b2:	f7f7 fe53 	bl	800015c <__addsf3>
 80084b6:	4639      	mov	r1, r7
 80084b8:	f7f7 ff58 	bl	800036c <__aeabi_fmul>
 80084bc:	4601      	mov	r1, r0
 80084be:	4630      	mov	r0, r6
 80084c0:	f7f7 fe4a 	bl	8000158 <__aeabi_fsub>
 80084c4:	4607      	mov	r7, r0
 80084c6:	4601      	mov	r1, r0
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7f7 ff4f 	bl	800036c <__aeabi_fmul>
 80084ce:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80084d2:	4681      	mov	r9, r0
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7f7 fe3f 	bl	8000158 <__aeabi_fsub>
 80084da:	4601      	mov	r1, r0
 80084dc:	4648      	mov	r0, r9
 80084de:	f7f7 fff9 	bl	80004d4 <__aeabi_fdiv>
 80084e2:	4641      	mov	r1, r8
 80084e4:	4607      	mov	r7, r0
 80084e6:	4630      	mov	r0, r6
 80084e8:	f7f7 ff40 	bl	800036c <__aeabi_fmul>
 80084ec:	4641      	mov	r1, r8
 80084ee:	f7f7 fe35 	bl	800015c <__addsf3>
 80084f2:	4601      	mov	r1, r0
 80084f4:	4638      	mov	r0, r7
 80084f6:	f7f7 fe2f 	bl	8000158 <__aeabi_fsub>
 80084fa:	4631      	mov	r1, r6
 80084fc:	f7f7 fe2c 	bl	8000158 <__aeabi_fsub>
 8008500:	4601      	mov	r1, r0
 8008502:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008506:	f7f7 fe27 	bl	8000158 <__aeabi_fsub>
 800850a:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800850e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008512:	da06      	bge.n	8008522 <__ieee754_powf+0x63e>
 8008514:	4621      	mov	r1, r4
 8008516:	f000 f849 	bl	80085ac <scalbnf>
 800851a:	4629      	mov	r1, r5
 800851c:	e549      	b.n	8007fb2 <__ieee754_powf+0xce>
 800851e:	2400      	movs	r4, #0
 8008520:	e77d      	b.n	800841e <__ieee754_powf+0x53a>
 8008522:	4618      	mov	r0, r3
 8008524:	e7f9      	b.n	800851a <__ieee754_powf+0x636>
 8008526:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800852a:	e536      	b.n	8007f9a <__ieee754_powf+0xb6>
 800852c:	4639      	mov	r1, r7
 800852e:	e534      	b.n	8007f9a <__ieee754_powf+0xb6>
 8008530:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008534:	f43f ad23 	beq.w	8007f7e <__ieee754_powf+0x9a>
 8008538:	2502      	movs	r5, #2
 800853a:	4648      	mov	r0, r9
 800853c:	f000 f832 	bl	80085a4 <fabsf>
 8008540:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008544:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008548:	46c2      	mov	sl, r8
 800854a:	4601      	mov	r1, r0
 800854c:	d003      	beq.n	8008556 <__ieee754_powf+0x672>
 800854e:	f1b8 0f00 	cmp.w	r8, #0
 8008552:	f47f ad43 	bne.w	8007fdc <__ieee754_powf+0xf8>
 8008556:	2c00      	cmp	r4, #0
 8008558:	da04      	bge.n	8008564 <__ieee754_powf+0x680>
 800855a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800855e:	f7f7 ffb9 	bl	80004d4 <__aeabi_fdiv>
 8008562:	4601      	mov	r1, r0
 8008564:	2e00      	cmp	r6, #0
 8008566:	f6bf ad18 	bge.w	8007f9a <__ieee754_powf+0xb6>
 800856a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800856e:	ea58 0805 	orrs.w	r8, r8, r5
 8008572:	f47f ad2e 	bne.w	8007fd2 <__ieee754_powf+0xee>
 8008576:	4608      	mov	r0, r1
 8008578:	f7f7 fdee 	bl	8000158 <__aeabi_fsub>
 800857c:	4601      	mov	r1, r0
 800857e:	e4f8      	b.n	8007f72 <__ieee754_powf+0x8e>
 8008580:	ff800000 	.word	0xff800000
 8008584:	3f317200 	.word	0x3f317200
 8008588:	3f317218 	.word	0x3f317218
 800858c:	35bfbe8c 	.word	0x35bfbe8c
 8008590:	3331bb4c 	.word	0x3331bb4c
 8008594:	35ddea0e 	.word	0x35ddea0e
 8008598:	388ab355 	.word	0x388ab355
 800859c:	3b360b61 	.word	0x3b360b61
 80085a0:	3e2aaaab 	.word	0x3e2aaaab

080085a4 <fabsf>:
 80085a4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80085a8:	4770      	bx	lr
	...

080085ac <scalbnf>:
 80085ac:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4603      	mov	r3, r0
 80085b4:	460d      	mov	r5, r1
 80085b6:	4604      	mov	r4, r0
 80085b8:	d02e      	beq.n	8008618 <scalbnf+0x6c>
 80085ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80085be:	d304      	bcc.n	80085ca <scalbnf+0x1e>
 80085c0:	4601      	mov	r1, r0
 80085c2:	f7f7 fdcb 	bl	800015c <__addsf3>
 80085c6:	4603      	mov	r3, r0
 80085c8:	e026      	b.n	8008618 <scalbnf+0x6c>
 80085ca:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80085ce:	d118      	bne.n	8008602 <scalbnf+0x56>
 80085d0:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80085d4:	f7f7 feca 	bl	800036c <__aeabi_fmul>
 80085d8:	4a17      	ldr	r2, [pc, #92]	@ (8008638 <scalbnf+0x8c>)
 80085da:	4603      	mov	r3, r0
 80085dc:	4295      	cmp	r5, r2
 80085de:	db0c      	blt.n	80085fa <scalbnf+0x4e>
 80085e0:	4604      	mov	r4, r0
 80085e2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80085e6:	3a19      	subs	r2, #25
 80085e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80085ec:	428d      	cmp	r5, r1
 80085ee:	dd0a      	ble.n	8008606 <scalbnf+0x5a>
 80085f0:	4912      	ldr	r1, [pc, #72]	@ (800863c <scalbnf+0x90>)
 80085f2:	4618      	mov	r0, r3
 80085f4:	f361 001e 	bfi	r0, r1, #0, #31
 80085f8:	e000      	b.n	80085fc <scalbnf+0x50>
 80085fa:	4911      	ldr	r1, [pc, #68]	@ (8008640 <scalbnf+0x94>)
 80085fc:	f7f7 feb6 	bl	800036c <__aeabi_fmul>
 8008600:	e7e1      	b.n	80085c6 <scalbnf+0x1a>
 8008602:	0dd2      	lsrs	r2, r2, #23
 8008604:	e7f0      	b.n	80085e8 <scalbnf+0x3c>
 8008606:	1951      	adds	r1, r2, r5
 8008608:	29fe      	cmp	r1, #254	@ 0xfe
 800860a:	dcf1      	bgt.n	80085f0 <scalbnf+0x44>
 800860c:	2900      	cmp	r1, #0
 800860e:	dd05      	ble.n	800861c <scalbnf+0x70>
 8008610:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008614:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8008618:	4618      	mov	r0, r3
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	f111 0f16 	cmn.w	r1, #22
 8008620:	da01      	bge.n	8008626 <scalbnf+0x7a>
 8008622:	4907      	ldr	r1, [pc, #28]	@ (8008640 <scalbnf+0x94>)
 8008624:	e7e5      	b.n	80085f2 <scalbnf+0x46>
 8008626:	f101 0019 	add.w	r0, r1, #25
 800862a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800862e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8008632:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8008636:	e7e1      	b.n	80085fc <scalbnf+0x50>
 8008638:	ffff3cb0 	.word	0xffff3cb0
 800863c:	7149f2ca 	.word	0x7149f2ca
 8008640:	0da24260 	.word	0x0da24260

08008644 <with_errnof>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4604      	mov	r4, r0
 8008648:	460d      	mov	r5, r1
 800864a:	f7ff fbbd 	bl	8007dc8 <__errno>
 800864e:	6005      	str	r5, [r0, #0]
 8008650:	4620      	mov	r0, r4
 8008652:	bd38      	pop	{r3, r4, r5, pc}

08008654 <xflowf>:
 8008654:	b508      	push	{r3, lr}
 8008656:	b140      	cbz	r0, 800866a <xflowf+0x16>
 8008658:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800865c:	f7f7 fe86 	bl	800036c <__aeabi_fmul>
 8008660:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008664:	2122      	movs	r1, #34	@ 0x22
 8008666:	f7ff bfed 	b.w	8008644 <with_errnof>
 800866a:	4608      	mov	r0, r1
 800866c:	e7f6      	b.n	800865c <xflowf+0x8>

0800866e <__math_uflowf>:
 800866e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8008672:	f7ff bfef 	b.w	8008654 <xflowf>

08008676 <__math_oflowf>:
 8008676:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800867a:	f7ff bfeb 	b.w	8008654 <xflowf>
	...

08008680 <__ieee754_sqrtf>:
 8008680:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008684:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868c:	4603      	mov	r3, r0
 800868e:	4604      	mov	r4, r0
 8008690:	d30a      	bcc.n	80086a8 <__ieee754_sqrtf+0x28>
 8008692:	4601      	mov	r1, r0
 8008694:	f7f7 fe6a 	bl	800036c <__aeabi_fmul>
 8008698:	4601      	mov	r1, r0
 800869a:	4620      	mov	r0, r4
 800869c:	f7f7 fd5e 	bl	800015c <__addsf3>
 80086a0:	4604      	mov	r4, r0
 80086a2:	4620      	mov	r0, r4
 80086a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	d0fa      	beq.n	80086a2 <__ieee754_sqrtf+0x22>
 80086ac:	2800      	cmp	r0, #0
 80086ae:	da06      	bge.n	80086be <__ieee754_sqrtf+0x3e>
 80086b0:	4601      	mov	r1, r0
 80086b2:	f7f7 fd51 	bl	8000158 <__aeabi_fsub>
 80086b6:	4601      	mov	r1, r0
 80086b8:	f7f7 ff0c 	bl	80004d4 <__aeabi_fdiv>
 80086bc:	e7f0      	b.n	80086a0 <__ieee754_sqrtf+0x20>
 80086be:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 80086c2:	d03c      	beq.n	800873e <__ieee754_sqrtf+0xbe>
 80086c4:	15c2      	asrs	r2, r0, #23
 80086c6:	2400      	movs	r4, #0
 80086c8:	2019      	movs	r0, #25
 80086ca:	4626      	mov	r6, r4
 80086cc:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80086d0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80086d4:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80086d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80086dc:	07d2      	lsls	r2, r2, #31
 80086de:	bf58      	it	pl
 80086e0:	005b      	lslpl	r3, r3, #1
 80086e2:	106d      	asrs	r5, r5, #1
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	1872      	adds	r2, r6, r1
 80086e8:	429a      	cmp	r2, r3
 80086ea:	bfcf      	iteee	gt
 80086ec:	461a      	movgt	r2, r3
 80086ee:	1856      	addle	r6, r2, r1
 80086f0:	1864      	addle	r4, r4, r1
 80086f2:	1a9a      	suble	r2, r3, r2
 80086f4:	3801      	subs	r0, #1
 80086f6:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80086fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80086fe:	d1f2      	bne.n	80086e6 <__ieee754_sqrtf+0x66>
 8008700:	b1ba      	cbz	r2, 8008732 <__ieee754_sqrtf+0xb2>
 8008702:	4e15      	ldr	r6, [pc, #84]	@ (8008758 <__ieee754_sqrtf+0xd8>)
 8008704:	4f15      	ldr	r7, [pc, #84]	@ (800875c <__ieee754_sqrtf+0xdc>)
 8008706:	6830      	ldr	r0, [r6, #0]
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	f7f7 fd25 	bl	8000158 <__aeabi_fsub>
 800870e:	f8d6 8000 	ldr.w	r8, [r6]
 8008712:	4601      	mov	r1, r0
 8008714:	4640      	mov	r0, r8
 8008716:	f7f7 ffd1 	bl	80006bc <__aeabi_fcmple>
 800871a:	b150      	cbz	r0, 8008732 <__ieee754_sqrtf+0xb2>
 800871c:	6830      	ldr	r0, [r6, #0]
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	f7f7 fd1c 	bl	800015c <__addsf3>
 8008724:	6836      	ldr	r6, [r6, #0]
 8008726:	4601      	mov	r1, r0
 8008728:	4630      	mov	r0, r6
 800872a:	f7f7 ffbd 	bl	80006a8 <__aeabi_fcmplt>
 800872e:	b170      	cbz	r0, 800874e <__ieee754_sqrtf+0xce>
 8008730:	3402      	adds	r4, #2
 8008732:	1064      	asrs	r4, r4, #1
 8008734:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008738:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800873c:	e7b1      	b.n	80086a2 <__ieee754_sqrtf+0x22>
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	0218      	lsls	r0, r3, #8
 8008742:	460a      	mov	r2, r1
 8008744:	f101 0101 	add.w	r1, r1, #1
 8008748:	d5f9      	bpl.n	800873e <__ieee754_sqrtf+0xbe>
 800874a:	4252      	negs	r2, r2
 800874c:	e7bb      	b.n	80086c6 <__ieee754_sqrtf+0x46>
 800874e:	3401      	adds	r4, #1
 8008750:	f024 0401 	bic.w	r4, r4, #1
 8008754:	e7ed      	b.n	8008732 <__ieee754_sqrtf+0xb2>
 8008756:	bf00      	nop
 8008758:	08008838 	.word	0x08008838
 800875c:	08008834 	.word	0x08008834

08008760 <_init>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr

0800876c <_fini>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	bf00      	nop
 8008770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008772:	bc08      	pop	{r3}
 8008774:	469e      	mov	lr, r3
 8008776:	4770      	bx	lr
