
Safety_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ce8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008df8  08008df8  00009df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ed0  08008ed0  0000a064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008ed0  08008ed0  0000a064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008ed0  08008ed0  0000a064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ed0  08008ed0  00009ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ed4  08008ed4  00009ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08008ed8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020c4  20000064  08008f3c  0000a064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002128  08008f3c  0000a128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018dea  00000000  00000000  0000a08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c12  00000000  00000000  00022e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00026a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116a  00000000  00000000  000280e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000034ca  00000000  00000000  00029252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019037  00000000  00000000  0002c71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab65  00000000  00000000  00045753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e02b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006280  00000000  00000000  000e02fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e657c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	08008de0 	.word	0x08008de0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	08008de0 	.word	0x08008de0

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_fcmpun>:
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	d102      	bne.n	800070c <__aeabi_fcmpun+0x14>
 8000706:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800070a:	d108      	bne.n	800071e <__aeabi_fcmpun+0x26>
 800070c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000710:	d102      	bne.n	8000718 <__aeabi_fcmpun+0x20>
 8000712:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000716:	d102      	bne.n	800071e <__aeabi_fcmpun+0x26>
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	4770      	bx	lr
 800071e:	f04f 0001 	mov.w	r0, #1
 8000722:	4770      	bx	lr

08000724 <__aeabi_f2uiz>:
 8000724:	0042      	lsls	r2, r0, #1
 8000726:	d20e      	bcs.n	8000746 <__aeabi_f2uiz+0x22>
 8000728:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800072c:	d30b      	bcc.n	8000746 <__aeabi_f2uiz+0x22>
 800072e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000732:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000736:	d409      	bmi.n	800074c <__aeabi_f2uiz+0x28>
 8000738:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800073c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	4770      	bx	lr
 8000746:	f04f 0000 	mov.w	r0, #0
 800074a:	4770      	bx	lr
 800074c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000750:	d101      	bne.n	8000756 <__aeabi_f2uiz+0x32>
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	d102      	bne.n	800075c <__aeabi_f2uiz+0x38>
 8000756:	f04f 30ff 	mov.w	r0, #4294967295
 800075a:	4770      	bx	lr
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop

08000764 <Safety_Monitor_Init>:
Digital_Sensor_t g_digital_sensors[DIGITAL_SENSOR_COUNT];

volatile uint16_t adc_buffer[4];

// Khởi tạo các giá trị mặc định cho các cảm biến
HAL_StatusTypeDef Safety_Monitor_Init(void){
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
    // Hiệu chuẩn ADC trước khi bắt đầu DMA để đảm bảo độ chính xác
    if (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK) {
 800076a:	484f      	ldr	r0, [pc, #316]	@ (80008a8 <Safety_Monitor_Init+0x144>)
 800076c:	f002 f956 	bl	8002a1c <HAL_ADCEx_Calibration_Start>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <Safety_Monitor_Init+0x16>
        return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e091      	b.n	800089e <Safety_Monitor_Init+0x13a>
    }
    // Bắt đầu chuyển đổi ADC ở chế độ quét 4 kênh với DMA vòng
    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 4) != HAL_OK) {
 800077a:	2204      	movs	r2, #4
 800077c:	494b      	ldr	r1, [pc, #300]	@ (80008ac <Safety_Monitor_Init+0x148>)
 800077e:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <Safety_Monitor_Init+0x144>)
 8000780:	f001 fe58 	bl	8002434 <HAL_ADC_Start_DMA>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <Safety_Monitor_Init+0x2a>
        return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e087      	b.n	800089e <Safety_Monitor_Init+0x13a>
    }
    // Khởi tạo trạng thái hoạt động cho cảm biến analog
    g_analog_sensors[0].sensor_active = DEFAULT_ANALOG_1_ENABLE;
 800078e:	4b48      	ldr	r3, [pc, #288]	@ (80008b0 <Safety_Monitor_Init+0x14c>)
 8000790:	2200      	movs	r2, #0
 8000792:	705a      	strb	r2, [r3, #1]
    g_analog_sensors[1].sensor_active = DEFAULT_ANALOG_2_ENABLE;
 8000794:	4b46      	ldr	r3, [pc, #280]	@ (80008b0 <Safety_Monitor_Init+0x14c>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    g_analog_sensors[2].sensor_active = DEFAULT_ANALOG_3_ENABLE;
 800079c:	4b44      	ldr	r3, [pc, #272]	@ (80008b0 <Safety_Monitor_Init+0x14c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    g_analog_sensors[3].sensor_active = DEFAULT_ANALOG_4_ENABLE;
 80007a4:	4b42      	ldr	r3, [pc, #264]	@ (80008b0 <Safety_Monitor_Init+0x14c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5

    // Khởi tạo các thông số cân chỉnh cho cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	e020      	b.n	80007f4 <Safety_Monitor_Init+0x90>
        g_analog_sensors[i].calibration_gain = DEFAULT_ANALOG_COEFFICIENT;
 80007b2:	79fa      	ldrb	r2, [r7, #7]
 80007b4:	493e      	ldr	r1, [pc, #248]	@ (80008b0 <Safety_Monitor_Init+0x14c>)
 80007b6:	4613      	mov	r3, r2
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	1a9b      	subs	r3, r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	440b      	add	r3, r1
 80007c0:	3328      	adds	r3, #40	@ 0x28
 80007c2:	4a3c      	ldr	r2, [pc, #240]	@ (80008b4 <Safety_Monitor_Init+0x150>)
 80007c4:	601a      	str	r2, [r3, #0]
        g_analog_sensors[i].calibration_offset = DEFAULT_ANALOG_CALIBRATION;
 80007c6:	79fa      	ldrb	r2, [r7, #7]
 80007c8:	4939      	ldr	r1, [pc, #228]	@ (80008b0 <Safety_Monitor_Init+0x14c>)
 80007ca:	4613      	mov	r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	440b      	add	r3, r1
 80007d4:	3324      	adds	r3, #36	@ 0x24
 80007d6:	4a38      	ldr	r2, [pc, #224]	@ (80008b8 <Safety_Monitor_Init+0x154>)
 80007d8:	601a      	str	r2, [r3, #0]
        g_analog_sensors[i].error_count = 0;
 80007da:	79fa      	ldrb	r2, [r7, #7]
 80007dc:	4934      	ldr	r1, [pc, #208]	@ (80008b0 <Safety_Monitor_Init+0x14c>)
 80007de:	4613      	mov	r3, r2
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	1a9b      	subs	r3, r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	3338      	adds	r3, #56	@ 0x38
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	3301      	adds	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d9db      	bls.n	80007b2 <Safety_Monitor_Init+0x4e>
    }

    // Khởi tạo giá trị mặc định cho cảm biến digital  
    g_digital_sensors[0].sensor_value = DEFAULT_DI1_STATUS;
 80007fa:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <Safety_Monitor_Init+0x158>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	709a      	strb	r2, [r3, #2]
    g_digital_sensors[1].sensor_value = DEFAULT_DI2_STATUS;
 8000800:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    g_digital_sensors[2].sensor_value = DEFAULT_DI3_STATUS;
 8000808:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <Safety_Monitor_Init+0x158>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    g_digital_sensors[3].sensor_value = DEFAULT_DI4_STATUS;
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

    // Khởi tạo trạng thái hoạt động cho cảm biến digital
    g_digital_sensors[0].sensor_active = DEFAULT_DI1_ENABLE;
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <Safety_Monitor_Init+0x158>)
 800081a:	2200      	movs	r2, #0
 800081c:	705a      	strb	r2, [r3, #1]
    g_digital_sensors[1].sensor_active = DEFAULT_DI2_ENABLE;
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    g_digital_sensors[2].sensor_active = DEFAULT_DI3_ENABLE;
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    g_digital_sensors[3].sensor_active = DEFAULT_DI4_ENABLE;
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

    // Khởi tạo các thông số bổ sung cho cảm biến digital
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000836:	2300      	movs	r3, #0
 8000838:	71bb      	strb	r3, [r7, #6]
 800083a:	e02c      	b.n	8000896 <Safety_Monitor_Init+0x132>
        g_digital_sensors[i].error_count = 0;
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	4a1f      	ldr	r2, [pc, #124]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000840:	015b      	lsls	r3, r3, #5
 8000842:	4413      	add	r3, r2
 8000844:	3318      	adds	r3, #24
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
        g_digital_sensors[i].state_change_count = 0;
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	4a1b      	ldr	r2, [pc, #108]	@ (80008bc <Safety_Monitor_Init+0x158>)
 800084e:	015b      	lsls	r3, r3, #5
 8000850:	4413      	add	r3, r2
 8000852:	3314      	adds	r3, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
        g_digital_sensors[i].last_edge_time = 0;
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	4a18      	ldr	r2, [pc, #96]	@ (80008bc <Safety_Monitor_Init+0x158>)
 800085c:	015b      	lsls	r3, r3, #5
 800085e:	4413      	add	r3, r2
 8000860:	330c      	adds	r3, #12
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
        g_digital_sensors[i].previous_state = 0;
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	4a14      	ldr	r2, [pc, #80]	@ (80008bc <Safety_Monitor_Init+0x158>)
 800086a:	015b      	lsls	r3, r3, #5
 800086c:	4413      	add	r3, r2
 800086e:	3303      	adds	r3, #3
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].debounced_state = 0;
 8000874:	79bb      	ldrb	r3, [r7, #6]
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000878:	015b      	lsls	r3, r3, #5
 800087a:	4413      	add	r3, r2
 800087c:	3304      	adds	r3, #4
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].debounce_time_ms = DEFAULT_SAFETY_RESPONSE_TIME;
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	4a0d      	ldr	r2, [pc, #52]	@ (80008bc <Safety_Monitor_Init+0x158>)
 8000886:	015b      	lsls	r3, r3, #5
 8000888:	4413      	add	r3, r2
 800088a:	3308      	adds	r3, #8
 800088c:	2232      	movs	r2, #50	@ 0x32
 800088e:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	3301      	adds	r3, #1
 8000894:	71bb      	strb	r3, [r7, #6]
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d9cf      	bls.n	800083c <Safety_Monitor_Init+0xd8>
    }
    
    return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000590 	.word	0x20000590
 80008ac:	2000020c 	.word	0x2000020c
 80008b0:	2000009c 	.word	0x2000009c
 80008b4:	452e2000 	.word	0x452e2000
 80008b8:	42e60000 	.word	0x42e60000
 80008bc:	2000018c 	.word	0x2000018c

080008c0 <Safety_Monitor_Process>:

// Xử lý dữ liệu từ các cảm biến
Safety_Monitor_Status_t Safety_Monitor_Process(void){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80008c6:	f001 fcd3 	bl	8002270 <HAL_GetTick>
 80008ca:	6038      	str	r0, [r7, #0]
    Safety_Monitor_Status_t system_status = SAFETY_MONITOR_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	71fb      	strb	r3, [r7, #7]

    // Xử lý tất cả các cảm biến
    Safety_Process_Analog_Sensors();
 80008d0:	f000 fa84 	bl	8000ddc <Safety_Process_Analog_Sensors>
    Safety_Process_Digital_Sensors();
 80008d4:	f000 fb4c 	bl	8000f70 <Safety_Process_Digital_Sensors>

    // Kiểm tra trạng thái của các cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	71bb      	strb	r3, [r7, #6]
 80008dc:	e047      	b.n	800096e <Safety_Monitor_Process+0xae>
        if(g_analog_sensors[i].sensor_active) {
 80008de:	79ba      	ldrb	r2, [r7, #6]
 80008e0:	496a      	ldr	r1, [pc, #424]	@ (8000a8c <Safety_Monitor_Process+0x1cc>)
 80008e2:	4613      	mov	r3, r2
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	1a9b      	subs	r3, r3, r2
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	440b      	add	r3, r1
 80008ec:	3301      	adds	r3, #1
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d039      	beq.n	8000968 <Safety_Monitor_Process+0xa8>
            // Kiểm tra theo thứ tự ưu tiên từ cao đến thấp
            if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_CRITICAL) {
 80008f4:	79ba      	ldrb	r2, [r7, #6]
 80008f6:	4965      	ldr	r1, [pc, #404]	@ (8000a8c <Safety_Monitor_Process+0x1cc>)
 80008f8:	4613      	mov	r3, r2
 80008fa:	011b      	lsls	r3, r3, #4
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	332c      	adds	r3, #44	@ 0x2c
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b02      	cmp	r3, #2
 8000908:	d105      	bne.n	8000916 <Safety_Monitor_Process+0x56>
                system_status = SAFETY_MONITOR_CRITICAL;
 800090a:	2302      	movs	r3, #2
 800090c:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_CRITICAL;
 800090e:	4b60      	ldr	r3, [pc, #384]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000910:	2202      	movs	r2, #2
 8000912:	701a      	strb	r2, [r3, #0]
                break; // Thoát ngay khi phát hiện lỗi nghiêm trọng
 8000914:	e02e      	b.n	8000974 <Safety_Monitor_Process+0xb4>
            }
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 8000916:	79ba      	ldrb	r2, [r7, #6]
 8000918:	495c      	ldr	r1, [pc, #368]	@ (8000a8c <Safety_Monitor_Process+0x1cc>)
 800091a:	4613      	mov	r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	1a9b      	subs	r3, r3, r2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	440b      	add	r3, r1
 8000924:	332c      	adds	r3, #44	@ 0x2c
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d109      	bne.n	8000940 <Safety_Monitor_Process+0x80>
                    g_safety_system.system_status != SAFETY_MONITOR_CRITICAL) {
 800092c:	4b58      	ldr	r3, [pc, #352]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 8000930:	2b02      	cmp	r3, #2
 8000932:	d005      	beq.n	8000940 <Safety_Monitor_Process+0x80>
                system_status = SAFETY_MONITOR_WARNING;
 8000934:	2301      	movs	r3, #1
 8000936:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_WARNING;
 8000938:	4b55      	ldr	r3, [pc, #340]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 800093a:	2201      	movs	r2, #1
 800093c:	701a      	strb	r2, [r3, #0]
 800093e:	e013      	b.n	8000968 <Safety_Monitor_Process+0xa8>
            }
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	4952      	ldr	r1, [pc, #328]	@ (8000a8c <Safety_Monitor_Process+0x1cc>)
 8000944:	4613      	mov	r3, r2
 8000946:	011b      	lsls	r3, r3, #4
 8000948:	1a9b      	subs	r3, r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	440b      	add	r3, r1
 800094e:	332c      	adds	r3, #44	@ 0x2c
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	2b04      	cmp	r3, #4
 8000954:	d108      	bne.n	8000968 <Safety_Monitor_Process+0xa8>
                    g_safety_system.system_status < SAFETY_MONITOR_CRITICAL) {
 8000956:	4b4e      	ldr	r3, [pc, #312]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000958:	781b      	ldrb	r3, [r3, #0]
            else if(g_analog_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 800095a:	2b01      	cmp	r3, #1
 800095c:	d804      	bhi.n	8000968 <Safety_Monitor_Process+0xa8>
                system_status = SAFETY_MONITOR_ERROR;
 800095e:	2304      	movs	r3, #4
 8000960:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_ERROR;
 8000962:	4b4b      	ldr	r3, [pc, #300]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000964:	2204      	movs	r2, #4
 8000966:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	3301      	adds	r3, #1
 800096c:	71bb      	strb	r3, [r7, #6]
 800096e:	79bb      	ldrb	r3, [r7, #6]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d9b4      	bls.n	80008de <Safety_Monitor_Process+0x1e>
            }
        }
    }

    // Kiểm tra trạng thái của các cảm biến digital 
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000974:	2300      	movs	r3, #0
 8000976:	717b      	strb	r3, [r7, #5]
 8000978:	e03b      	b.n	80009f2 <Safety_Monitor_Process+0x132>
        if(g_digital_sensors[i].sensor_active) {
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	4a45      	ldr	r2, [pc, #276]	@ (8000a94 <Safety_Monitor_Process+0x1d4>)
 800097e:	015b      	lsls	r3, r3, #5
 8000980:	4413      	add	r3, r2
 8000982:	3301      	adds	r3, #1
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d030      	beq.n	80009ec <Safety_Monitor_Process+0x12c>
            if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_CRITICAL) {
 800098a:	797b      	ldrb	r3, [r7, #5]
 800098c:	4a41      	ldr	r2, [pc, #260]	@ (8000a94 <Safety_Monitor_Process+0x1d4>)
 800098e:	015b      	lsls	r3, r3, #5
 8000990:	4413      	add	r3, r2
 8000992:	3310      	adds	r3, #16
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d105      	bne.n	80009a6 <Safety_Monitor_Process+0xe6>
                system_status = SAFETY_MONITOR_CRITICAL;
 800099a:	2302      	movs	r3, #2
 800099c:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_CRITICAL;
 800099e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	701a      	strb	r2, [r3, #0]
                break;
 80009a4:	e028      	b.n	80009f8 <Safety_Monitor_Process+0x138>
            }
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 80009a6:	797b      	ldrb	r3, [r7, #5]
 80009a8:	4a3a      	ldr	r2, [pc, #232]	@ (8000a94 <Safety_Monitor_Process+0x1d4>)
 80009aa:	015b      	lsls	r3, r3, #5
 80009ac:	4413      	add	r3, r2
 80009ae:	3310      	adds	r3, #16
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d109      	bne.n	80009ca <Safety_Monitor_Process+0x10a>
                    g_safety_system.system_status != SAFETY_MONITOR_CRITICAL) {
 80009b6:	4b36      	ldr	r3, [pc, #216]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_WARNING && 
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d005      	beq.n	80009ca <Safety_Monitor_Process+0x10a>
                system_status = SAFETY_MONITOR_WARNING;  
 80009be:	2301      	movs	r3, #1
 80009c0:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_WARNING;  
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
 80009c8:	e010      	b.n	80009ec <Safety_Monitor_Process+0x12c>
            }
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 80009ca:	797b      	ldrb	r3, [r7, #5]
 80009cc:	4a31      	ldr	r2, [pc, #196]	@ (8000a94 <Safety_Monitor_Process+0x1d4>)
 80009ce:	015b      	lsls	r3, r3, #5
 80009d0:	4413      	add	r3, r2
 80009d2:	3310      	adds	r3, #16
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	d108      	bne.n	80009ec <Safety_Monitor_Process+0x12c>
                    g_safety_system.system_status < SAFETY_MONITOR_CRITICAL) {
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
            else if(g_digital_sensors[i].sensor_status == SENSOR_STATUS_ERROR && 
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d804      	bhi.n	80009ec <Safety_Monitor_Process+0x12c>
                system_status = SAFETY_MONITOR_ERROR;
 80009e2:	2304      	movs	r3, #4
 80009e4:	71fb      	strb	r3, [r7, #7]
                g_safety_system.system_status = SAFETY_MONITOR_ERROR;
 80009e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	701a      	strb	r2, [r3, #0]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 80009ec:	797b      	ldrb	r3, [r7, #5]
 80009ee:	3301      	adds	r3, #1
 80009f0:	717b      	strb	r3, [r7, #5]
 80009f2:	797b      	ldrb	r3, [r7, #5]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d9c0      	bls.n	800097a <Safety_Monitor_Process+0xba>
            }
        }
    }

    // Cập nhật trạng thái hệ thống
    g_safety_system.last_safety_check = current_time;
 80009f8:	4a25      	ldr	r2, [pc, #148]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	6093      	str	r3, [r2, #8]

    // Cập nhật bộ đếm cảnh báo
    if(system_status == SAFETY_MONITOR_WARNING) {
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d105      	bne.n	8000a10 <Safety_Monitor_Process+0x150>
        g_safety_system.warning_count++;
 8000a04:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000a0c:	60d3      	str	r3, [r2, #12]
 8000a0e:	e010      	b.n	8000a32 <Safety_Monitor_Process+0x172>
    }
    else if(system_status == SAFETY_MONITOR_CRITICAL) {
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d105      	bne.n	8000a22 <Safety_Monitor_Process+0x162>
        g_safety_system.critical_count++;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000a1e:	6113      	str	r3, [r2, #16]
 8000a20:	e007      	b.n	8000a32 <Safety_Monitor_Process+0x172>
    }
    else if(system_status == SAFETY_MONITOR_EMERGENCY) {
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	d104      	bne.n	8000a32 <Safety_Monitor_Process+0x172>
        g_safety_system.emergency_count++;
 8000a28:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000a30:	6153      	str	r3, [r2, #20]
    }
    
    if(system_status == SAFETY_MONITOR_CRITICAL) { 
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d10e      	bne.n	8000a56 <Safety_Monitor_Process+0x196>
        HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4816      	ldr	r0, [pc, #88]	@ (8000a98 <Safety_Monitor_Process+0x1d8>)
 8000a3e:	f002 fede 	bl	80037fe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a48:	4813      	ldr	r0, [pc, #76]	@ (8000a98 <Safety_Monitor_Process+0x1d8>)
 8000a4a:	f002 fed8 	bl	80037fe <HAL_GPIO_WritePin>
        g_holdingRegisters[REG_RESET_FLAG] = 1;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <Safety_Monitor_Process+0x1dc>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	811a      	strh	r2, [r3, #8]
 8000a54:	e011      	b.n	8000a7a <Safety_Monitor_Process+0x1ba>
    }
    else if(system_status == SAFETY_MONITOR_OK 
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d10e      	bne.n	8000a7a <Safety_Monitor_Process+0x1ba>
        && g_holdingRegisters[REG_RESET_FLAG] == 0) {
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <Safety_Monitor_Process+0x1dc>)
 8000a5e:	891b      	ldrh	r3, [r3, #8]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d10a      	bne.n	8000a7a <Safety_Monitor_Process+0x1ba>
        HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2120      	movs	r1, #32
 8000a68:	480b      	ldr	r0, [pc, #44]	@ (8000a98 <Safety_Monitor_Process+0x1d8>)
 8000a6a:	f002 fec8 	bl	80037fe <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a74:	4808      	ldr	r0, [pc, #32]	@ (8000a98 <Safety_Monitor_Process+0x1d8>)
 8000a76:	f002 fec2 	bl	80037fe <HAL_GPIO_WritePin>
    }
    g_safety_system.system_status = system_status;
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <Safety_Monitor_Process+0x1d0>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	7013      	strb	r3, [r2, #0]

    return system_status;
 8000a80:	79fb      	ldrb	r3, [r7, #7]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000009c 	.word	0x2000009c
 8000a90:	20000080 	.word	0x20000080
 8000a94:	2000018c 	.word	0x2000018c
 8000a98:	40010c00 	.word	0x40010c00
 8000a9c:	20000214 	.word	0x20000214

08000aa0 <Safety_Register_Load>:

// Đọc cấu hình từ Modbus registers
HAL_StatusTypeDef Safety_Register_Load(void){
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
    // Đọc cấu hình cho cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e030      	b.n	8000b0e <Safety_Register_Load+0x6e>
        g_analog_sensors[i].sensor_active = g_holdingRegisters[REG_ANALOG_1_ENABLE + i];
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	331a      	adds	r3, #26
 8000ab0:	4a30      	ldr	r2, [pc, #192]	@ (8000b74 <Safety_Register_Load+0xd4>)
 8000ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	b2d8      	uxtb	r0, r3
 8000aba:	492f      	ldr	r1, [pc, #188]	@ (8000b78 <Safety_Register_Load+0xd8>)
 8000abc:	4613      	mov	r3, r2
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	440b      	add	r3, r1
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	4602      	mov	r2, r0
 8000aca:	701a      	strb	r2, [r3, #0]
        g_analog_sensors[i].calibration_gain = 
            (float)g_holdingRegisters[REG_ANALOG_COEFFICIENT];
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <Safety_Register_Load+0xd4>)
 8000ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        g_analog_sensors[i].calibration_gain = 
 8000ad0:	79fc      	ldrb	r4, [r7, #7]
            (float)g_holdingRegisters[REG_ANALOG_COEFFICIENT];
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fbf2 	bl	80002bc <__aeabi_ui2f>
 8000ad8:	4602      	mov	r2, r0
        g_analog_sensors[i].calibration_gain = 
 8000ada:	4927      	ldr	r1, [pc, #156]	@ (8000b78 <Safety_Register_Load+0xd8>)
 8000adc:	4623      	mov	r3, r4
 8000ade:	011b      	lsls	r3, r3, #4
 8000ae0:	1b1b      	subs	r3, r3, r4
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3328      	adds	r3, #40	@ 0x28
 8000ae8:	601a      	str	r2, [r3, #0]
        g_analog_sensors[i].calibration_offset = 
            (float)g_holdingRegisters[REG_ANALOG_CALIBRATION];
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <Safety_Register_Load+0xd4>)
 8000aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
        g_analog_sensors[i].calibration_offset = 
 8000aee:	79fc      	ldrb	r4, [r7, #7]
            (float)g_holdingRegisters[REG_ANALOG_CALIBRATION];
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fbe3 	bl	80002bc <__aeabi_ui2f>
 8000af6:	4602      	mov	r2, r0
        g_analog_sensors[i].calibration_offset = 
 8000af8:	491f      	ldr	r1, [pc, #124]	@ (8000b78 <Safety_Register_Load+0xd8>)
 8000afa:	4623      	mov	r3, r4
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	1b1b      	subs	r3, r3, r4
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	3324      	adds	r3, #36	@ 0x24
 8000b06:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	d9cb      	bls.n	8000aac <Safety_Register_Load+0xc>
    }
    
    // Đọc cấu hình cho cảm biến digital
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000b14:	2300      	movs	r3, #0
 8000b16:	71bb      	strb	r3, [r7, #6]
 8000b18:	e023      	b.n	8000b62 <Safety_Register_Load+0xc2>
        g_digital_sensors[i].sensor_active = g_holdingRegisters[REG_DI1_ENABLE + i];
 8000b1a:	79bb      	ldrb	r3, [r7, #6]
 8000b1c:	3326      	adds	r3, #38	@ 0x26
 8000b1e:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <Safety_Register_Load+0xd4>)
 8000b20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	b2d1      	uxtb	r1, r2
 8000b28:	4a14      	ldr	r2, [pc, #80]	@ (8000b7c <Safety_Register_Load+0xdc>)
 8000b2a:	015b      	lsls	r3, r3, #5
 8000b2c:	4413      	add	r3, r2
 8000b2e:	3301      	adds	r3, #1
 8000b30:	460a      	mov	r2, r1
 8000b32:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].active_level = g_holdingRegisters[REG_DI1_ACTIVE_LEVEL + i];
 8000b34:	79bb      	ldrb	r3, [r7, #6]
 8000b36:	332a      	adds	r3, #42	@ 0x2a
 8000b38:	4a0e      	ldr	r2, [pc, #56]	@ (8000b74 <Safety_Register_Load+0xd4>)
 8000b3a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b3e:	79bb      	ldrb	r3, [r7, #6]
 8000b40:	b2d1      	uxtb	r1, r2
 8000b42:	4a0e      	ldr	r2, [pc, #56]	@ (8000b7c <Safety_Register_Load+0xdc>)
 8000b44:	015b      	lsls	r3, r3, #5
 8000b46:	4413      	add	r3, r2
 8000b48:	3305      	adds	r3, #5
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	701a      	strb	r2, [r3, #0]
        g_digital_sensors[i].debounce_time_ms = DEFAULT_SAFETY_RESPONSE_TIME;
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <Safety_Register_Load+0xdc>)
 8000b52:	015b      	lsls	r3, r3, #5
 8000b54:	4413      	add	r3, r2
 8000b56:	3308      	adds	r3, #8
 8000b58:	2232      	movs	r2, #50	@ 0x32
 8000b5a:	801a      	strh	r2, [r3, #0]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000b5c:	79bb      	ldrb	r3, [r7, #6]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	71bb      	strb	r3, [r7, #6]
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d9d8      	bls.n	8000b1a <Safety_Register_Load+0x7a>
    }
    return HAL_OK;
 8000b68:	2300      	movs	r3, #0

}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000214 	.word	0x20000214
 8000b78:	2000009c 	.word	0x2000009c
 8000b7c:	2000018c 	.word	0x2000018c

08000b80 <Safety_Register_Save>:

// Lưu dữ liệu vào Modbus registers
HAL_StatusTypeDef Safety_Register_Save(void) {
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0

    // Lưu dữ liệu cảm biến analog
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	71fb      	strb	r3, [r7, #7]
 8000b8a:	e025      	b.n	8000bd8 <Safety_Register_Save+0x58>
        // Lưu giá trị điện áp đã được xử lý (mV)
        g_holdingRegisters[REG_ANALOG_INPUT_1 + i] = 
            (uint16_t)(g_analog_sensors[i].filtered_value);
 8000b8c:	79fa      	ldrb	r2, [r7, #7]
 8000b8e:	4930      	ldr	r1, [pc, #192]	@ (8000c50 <Safety_Register_Save+0xd0>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	1a9b      	subs	r3, r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	440b      	add	r3, r1
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	681a      	ldr	r2, [r3, #0]
        g_holdingRegisters[REG_ANALOG_INPUT_1 + i] = 
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f103 0410 	add.w	r4, r3, #16
            (uint16_t)(g_analog_sensors[i].filtered_value);
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f7ff fdbd 	bl	8000724 <__aeabi_f2uiz>
 8000baa:	4603      	mov	r3, r0
 8000bac:	b29a      	uxth	r2, r3
        g_holdingRegisters[REG_ANALOG_INPUT_1 + i] = 
 8000bae:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000bb0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
        
        // Lưu trạng thái kích hoạt của cảm biến
        g_holdingRegisters[REG_ANALOG_1_ENABLE + i] = 
            g_analog_sensors[i].sensor_active;
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	4926      	ldr	r1, [pc, #152]	@ (8000c50 <Safety_Register_Save+0xd0>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	1a9b      	subs	r3, r3, r2
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	781a      	ldrb	r2, [r3, #0]
        g_holdingRegisters[REG_ANALOG_1_ENABLE + i] = 
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	331a      	adds	r3, #26
            g_analog_sensors[i].sensor_active;
 8000bca:	4611      	mov	r1, r2
        g_holdingRegisters[REG_ANALOG_1_ENABLE + i] = 
 8000bcc:	4a21      	ldr	r2, [pc, #132]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000bce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d9d6      	bls.n	8000b8c <Safety_Register_Save+0xc>
    }
    
    // Lưu dữ liệu cảm biến digital 
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	71bb      	strb	r3, [r7, #6]
 8000be2:	e01a      	b.n	8000c1a <Safety_Register_Save+0x9a>
        // Lưu trạng thái và cấu hình của cảm biến digital
        g_holdingRegisters[REG_DI1_STATUS + i] = 
            g_digital_sensors[i].sensor_state;
 8000be4:	79bb      	ldrb	r3, [r7, #6]
 8000be6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c58 <Safety_Register_Save+0xd8>)
 8000be8:	015b      	lsls	r3, r3, #5
 8000bea:	4413      	add	r3, r2
 8000bec:	3306      	adds	r3, #6
 8000bee:	781a      	ldrb	r2, [r3, #0]
        g_holdingRegisters[REG_DI1_STATUS + i] = 
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	3322      	adds	r3, #34	@ 0x22
            g_digital_sensors[i].sensor_state;
 8000bf4:	4611      	mov	r1, r2
        g_holdingRegisters[REG_DI1_STATUS + i] = 
 8000bf6:	4a17      	ldr	r2, [pc, #92]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000bf8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        g_holdingRegisters[REG_DI1_ENABLE + i] = 
            g_digital_sensors[i].sensor_active;
 8000bfc:	79bb      	ldrb	r3, [r7, #6]
 8000bfe:	4a16      	ldr	r2, [pc, #88]	@ (8000c58 <Safety_Register_Save+0xd8>)
 8000c00:	015b      	lsls	r3, r3, #5
 8000c02:	4413      	add	r3, r2
 8000c04:	3301      	adds	r3, #1
 8000c06:	781a      	ldrb	r2, [r3, #0]
        g_holdingRegisters[REG_DI1_ENABLE + i] = 
 8000c08:	79bb      	ldrb	r3, [r7, #6]
 8000c0a:	3326      	adds	r3, #38	@ 0x26
            g_digital_sensors[i].sensor_active;
 8000c0c:	4611      	mov	r1, r2
        g_holdingRegisters[REG_DI1_ENABLE + i] = 
 8000c0e:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000c10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000c14:	79bb      	ldrb	r3, [r7, #6]
 8000c16:	3301      	adds	r3, #1
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	79bb      	ldrb	r3, [r7, #6]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d9e1      	bls.n	8000be4 <Safety_Register_Save+0x64>
    }
    if(g_holdingRegisters[REG_RESET_FLAG] == 1) {
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000c22:	891b      	ldrh	r3, [r3, #8]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d103      	bne.n	8000c30 <Safety_Register_Save+0xb0>
        g_holdingRegisters[REG_SAFETY_SYSTEM_STATUS] = SAFETY_MONITOR_CRITICAL;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000c2a:	2202      	movs	r2, #2
 8000c2c:	801a      	strh	r2, [r3, #0]
 8000c2e:	e004      	b.n	8000c3a <Safety_Register_Save+0xba>
    }
    else {
        g_holdingRegisters[REG_SAFETY_SYSTEM_STATUS] = g_safety_system.system_status;
 8000c30:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <Safety_Register_Save+0xdc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000c38:	801a      	strh	r2, [r3, #0]
    }
    g_holdingRegisters[REG_CONFIG_BAUDRATE] = current_baudrate;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <Safety_Register_Save+0xe0>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <Safety_Register_Save+0xd4>)
 8000c42:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    return HAL_OK;
 8000c46:	2300      	movs	r3, #0
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	2000009c 	.word	0x2000009c
 8000c54:	20000214 	.word	0x20000214
 8000c58:	2000018c 	.word	0x2000018c
 8000c5c:	20000080 	.word	0x20000080
 8000c60:	20000000 	.word	0x20000000

08000c64 <Safety_Get_Digital_State>:


uint8_t Safety_Get_Digital_State(uint8_t sensor_id){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
    
    switch (sensor_id)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d841      	bhi.n	8000cf8 <Safety_Get_Digital_State+0x94>
 8000c74:	a201      	add	r2, pc, #4	@ (adr r2, 8000c7c <Safety_Get_Digital_State+0x18>)
 8000c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7a:	bf00      	nop
 8000c7c:	08000c8d 	.word	0x08000c8d
 8000c80:	08000ca5 	.word	0x08000ca5
 8000c84:	08000cc1 	.word	0x08000cc1
 8000c88:	08000cdd 	.word	0x08000cdd
    {
    case 0:
        g_digital_sensors[0].sensor_value = HAL_GPIO_ReadPin(DI1_GPIO_Port, DI1_Pin);
 8000c8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c90:	481c      	ldr	r0, [pc, #112]	@ (8000d04 <Safety_Get_Digital_State+0xa0>)
 8000c92:	f002 fd9d 	bl	80037d0 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000c9c:	709a      	strb	r2, [r3, #2]
        return g_digital_sensors[0].sensor_value;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000ca0:	789b      	ldrb	r3, [r3, #2]
 8000ca2:	e02a      	b.n	8000cfa <Safety_Get_Digital_State+0x96>
        break;
    case 1:
        g_digital_sensors[1].sensor_value = HAL_GPIO_ReadPin(DI2_GPIO_Port, DI2_Pin);
 8000ca4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ca8:	4816      	ldr	r0, [pc, #88]	@ (8000d04 <Safety_Get_Digital_State+0xa0>)
 8000caa:	f002 fd91 	bl	80037d0 <HAL_GPIO_ReadPin>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000cb4:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        return g_digital_sensors[1].sensor_value;
 8000cb8:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000cba:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000cbe:	e01c      	b.n	8000cfa <Safety_Get_Digital_State+0x96>
        break;
    case 2:
        g_digital_sensors[2].sensor_value = HAL_GPIO_ReadPin(DI3_GPIO_Port, DI3_Pin);
 8000cc0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000cc4:	480f      	ldr	r0, [pc, #60]	@ (8000d04 <Safety_Get_Digital_State+0xa0>)
 8000cc6:	f002 fd83 	bl	80037d0 <HAL_GPIO_ReadPin>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        return g_digital_sensors[2].sensor_value;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000cda:	e00e      	b.n	8000cfa <Safety_Get_Digital_State+0x96>
        break;
    case 3:
        g_digital_sensors[3].sensor_value = HAL_GPIO_ReadPin(DI4_GPIO_Port, DI4_Pin);
 8000cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ce0:	4808      	ldr	r0, [pc, #32]	@ (8000d04 <Safety_Get_Digital_State+0xa0>)
 8000ce2:	f002 fd75 	bl	80037d0 <HAL_GPIO_ReadPin>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000cec:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
        return g_digital_sensors[3].sensor_value;
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <Safety_Get_Digital_State+0xa4>)
 8000cf2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8000cf6:	e000      	b.n	8000cfa <Safety_Get_Digital_State+0x96>
        break;
    default:
        return 0;
 8000cf8:	2300      	movs	r3, #0
    }
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010c00 	.word	0x40010c00
 8000d08:	2000018c 	.word	0x2000018c

08000d0c <Safety_Convert_To_Distance>:
 * @param sensor_id: Sensor ID (0-3) 
 * @return uint16_t Raw ADC value (0-4095)
 * @note Đọc giá trị cảm biến analog từ ADC với xử lý lỗi toàn diện
 */

float Safety_Convert_To_Distance(uint8_t sensor_id){
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
    float distance, voltage;
    voltage = adc_buffer[sensor_id] * 3.3f / 4095.0f;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4a29      	ldr	r2, [pc, #164]	@ (8000dc0 <Safety_Convert_To_Distance+0xb4>)
 8000d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff facf 	bl	80002c4 <__aeabi_i2f>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4926      	ldr	r1, [pc, #152]	@ (8000dc4 <Safety_Convert_To_Distance+0xb8>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fb1e 	bl	800036c <__aeabi_fmul>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4925      	ldr	r1, [pc, #148]	@ (8000dc8 <Safety_Convert_To_Distance+0xbc>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fbcd 	bl	80004d4 <__aeabi_fdiv>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60fb      	str	r3, [r7, #12]
    if(voltage < 0.1f) return 0;
 8000d3e:	4923      	ldr	r1, [pc, #140]	@ (8000dcc <Safety_Convert_To_Distance+0xc0>)
 8000d40:	68f8      	ldr	r0, [r7, #12]
 8000d42:	f7ff fcb1 	bl	80006a8 <__aeabi_fcmplt>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <Safety_Convert_To_Distance+0x46>
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e032      	b.n	8000db8 <Safety_Convert_To_Distance+0xac>

    distance = g_analog_sensors[sensor_id].calibration_gain/100.0f * powf(voltage, (g_analog_sensors[sensor_id].calibration_offset)/(-100.0f));
 8000d52:	79fa      	ldrb	r2, [r7, #7]
 8000d54:	491e      	ldr	r1, [pc, #120]	@ (8000dd0 <Safety_Convert_To_Distance+0xc4>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	1a9b      	subs	r3, r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	440b      	add	r3, r1
 8000d60:	3328      	adds	r3, #40	@ 0x28
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	491b      	ldr	r1, [pc, #108]	@ (8000dd4 <Safety_Convert_To_Distance+0xc8>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fbb4 	bl	80004d4 <__aeabi_fdiv>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461c      	mov	r4, r3
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	4917      	ldr	r1, [pc, #92]	@ (8000dd0 <Safety_Convert_To_Distance+0xc4>)
 8000d74:	4613      	mov	r3, r2
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3324      	adds	r3, #36	@ 0x24
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4915      	ldr	r1, [pc, #84]	@ (8000dd8 <Safety_Convert_To_Distance+0xcc>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fba5 	bl	80004d4 <__aeabi_fdiv>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	68f8      	ldr	r0, [r7, #12]
 8000d90:	f007 fb92 	bl	80084b8 <powf>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4619      	mov	r1, r3
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f7ff fae7 	bl	800036c <__aeabi_fmul>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60bb      	str	r3, [r7, #8]
    g_analog_sensors[sensor_id].filtered_value = distance;
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	490a      	ldr	r1, [pc, #40]	@ (8000dd0 <Safety_Convert_To_Distance+0xc4>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	3308      	adds	r3, #8
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	601a      	str	r2, [r3, #0]
    return distance;
 8000db6:	68bb      	ldr	r3, [r7, #8]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	2000020c 	.word	0x2000020c
 8000dc4:	40533333 	.word	0x40533333
 8000dc8:	457ff000 	.word	0x457ff000
 8000dcc:	3dcccccd 	.word	0x3dcccccd
 8000dd0:	2000009c 	.word	0x2000009c
 8000dd4:	42c80000 	.word	0x42c80000
 8000dd8:	c2c80000 	.word	0xc2c80000

08000ddc <Safety_Process_Analog_Sensors>:
 * @brief Process all analog sensors with comprehensive error handling
 * @param None
 * @return HAL_StatusTypeDef Overall processing status
 */
HAL_StatusTypeDef Safety_Process_Analog_Sensors(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef overall_status = HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73bb      	strb	r3, [r7, #14]
    uint32_t current_time = HAL_GetTick();
 8000de6:	f001 fa43 	bl	8002270 <HAL_GetTick>
 8000dea:	60b8      	str	r0, [r7, #8]
    uint16_t distance;
    uint8_t i;
    
    // Process each analog sensor
    for (i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e0b0      	b.n	8000f54 <Safety_Process_Analog_Sensors+0x178>
        if (g_analog_sensors[i].sensor_active) {
 8000df2:	7bfa      	ldrb	r2, [r7, #15]
 8000df4:	495c      	ldr	r1, [pc, #368]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000df6:	4613      	mov	r3, r2
 8000df8:	011b      	lsls	r3, r3, #4
 8000dfa:	1a9b      	subs	r3, r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	440b      	add	r3, r1
 8000e00:	3301      	adds	r3, #1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80a2 	beq.w	8000f4e <Safety_Process_Analog_Sensors+0x172>
            // Read sensor value
            distance = Safety_Convert_To_Distance(i);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff7d 	bl	8000d0c <Safety_Convert_To_Distance>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fc85 	bl	8000724 <__aeabi_f2uiz>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	80fb      	strh	r3, [r7, #6]
            
            // Kiểm tra các ngưỡng khoảng cách cho từng cảm biến
            if(distance == 0) {
 8000e1e:	88fb      	ldrh	r3, [r7, #6]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d114      	bne.n	8000e4e <Safety_Process_Analog_Sensors+0x72>
                // Cảm biến không hoạt động hoặc lỗi
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_ERROR;
 8000e24:	7bfa      	ldrb	r2, [r7, #15]
 8000e26:	4950      	ldr	r1, [pc, #320]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	332c      	adds	r3, #44	@ 0x2c
 8000e34:	2204      	movs	r2, #4
 8000e36:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x01;
 8000e38:	7bfa      	ldrb	r2, [r7, #15]
 8000e3a:	494b      	ldr	r1, [pc, #300]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	1a9b      	subs	r3, r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	332d      	adds	r3, #45	@ 0x2d
 8000e48:	2201      	movs	r2, #1
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	e07f      	b.n	8000f4e <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE1_THRESHOLD]) {
 8000e4e:	4b47      	ldr	r3, [pc, #284]	@ (8000f6c <Safety_Process_Analog_Sensors+0x190>)
 8000e50:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8000e54:	88fa      	ldrh	r2, [r7, #6]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d814      	bhi.n	8000e84 <Safety_Process_Analog_Sensors+0xa8>
                // Vùng nguy hiểm 1 - Nguy hiểm cao nhất
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_CRITICAL;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	4942      	ldr	r1, [pc, #264]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000e5e:	4613      	mov	r3, r2
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	332c      	adds	r3, #44	@ 0x2c
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x08;
 8000e6e:	7bfa      	ldrb	r2, [r7, #15]
 8000e70:	493d      	ldr	r1, [pc, #244]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000e72:	4613      	mov	r3, r2
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	332d      	adds	r3, #45	@ 0x2d
 8000e7e:	2208      	movs	r2, #8
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e064      	b.n	8000f4e <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE2_THRESHOLD]) {
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <Safety_Process_Analog_Sensors+0x190>)
 8000e86:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 8000e8a:	88fa      	ldrh	r2, [r7, #6]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d814      	bhi.n	8000eba <Safety_Process_Analog_Sensors+0xde>
                // Vùng nguy hiểm 2 - Cảnh báo cao
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_WARNING;
 8000e90:	7bfa      	ldrb	r2, [r7, #15]
 8000e92:	4935      	ldr	r1, [pc, #212]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000e94:	4613      	mov	r3, r2
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	332c      	adds	r3, #44	@ 0x2c
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x04;
 8000ea4:	7bfa      	ldrb	r2, [r7, #15]
 8000ea6:	4930      	ldr	r1, [pc, #192]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	1a9b      	subs	r3, r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	332d      	adds	r3, #45	@ 0x2d
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e049      	b.n	8000f4e <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE3_THRESHOLD]) {
 8000eba:	4b2c      	ldr	r3, [pc, #176]	@ (8000f6c <Safety_Process_Analog_Sensors+0x190>)
 8000ebc:	f8b3 308c 	ldrh.w	r3, [r3, #140]	@ 0x8c
 8000ec0:	88fa      	ldrh	r2, [r7, #6]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d814      	bhi.n	8000ef0 <Safety_Process_Analog_Sensors+0x114>
                // Vùng nguy hiểm 3 - Cảnh báo trung bình
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_WARNING;
 8000ec6:	7bfa      	ldrb	r2, [r7, #15]
 8000ec8:	4927      	ldr	r1, [pc, #156]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	332c      	adds	r3, #44	@ 0x2c
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x02;
 8000eda:	7bfa      	ldrb	r2, [r7, #15]
 8000edc:	4922      	ldr	r1, [pc, #136]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000ede:	4613      	mov	r3, r2
 8000ee0:	011b      	lsls	r3, r3, #4
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	332d      	adds	r3, #45	@ 0x2d
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e02e      	b.n	8000f4e <Safety_Process_Analog_Sensors+0x172>
            }
            else if(distance <= g_holdingRegisters[REG_SAFETY_ZONE4_THRESHOLD]) {
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <Safety_Process_Analog_Sensors+0x190>)
 8000ef2:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 8000ef6:	88fa      	ldrh	r2, [r7, #6]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d814      	bhi.n	8000f26 <Safety_Process_Analog_Sensors+0x14a>
                // Vùng nguy hiểm 4 - Cảnh báo thấp
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_OK;
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	491a      	ldr	r1, [pc, #104]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000f00:	4613      	mov	r3, r2
 8000f02:	011b      	lsls	r3, r3, #4
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	440b      	add	r3, r1
 8000f0a:	332c      	adds	r3, #44	@ 0x2c
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0x01;
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	4915      	ldr	r1, [pc, #84]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000f14:	4613      	mov	r3, r2
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	1a9b      	subs	r3, r3, r2
 8000f1a:	009b      	lsls	r3, r3, #2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	332d      	adds	r3, #45	@ 0x2d
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
 8000f24:	e013      	b.n	8000f4e <Safety_Process_Analog_Sensors+0x172>
            }
            else {
                // Khoảng cách an toàn
                g_analog_sensors[i].sensor_status = SENSOR_STATUS_OK;
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	490f      	ldr	r1, [pc, #60]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	332c      	adds	r3, #44	@ 0x2c
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
                g_analog_sensors[i].alarm_flags = 0;
 8000f3a:	7bfa      	ldrb	r2, [r7, #15]
 8000f3c:	490a      	ldr	r1, [pc, #40]	@ (8000f68 <Safety_Process_Analog_Sensors+0x18c>)
 8000f3e:	4613      	mov	r3, r2
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	1a9b      	subs	r3, r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	440b      	add	r3, r1
 8000f48:	332d      	adds	r3, #45	@ 0x2d
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ANALOG_SENSOR_COUNT; i++) {
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	3301      	adds	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	f67f af4b 	bls.w	8000df2 <Safety_Process_Analog_Sensors+0x16>
            }
        }
    }
    
    return overall_status;
 8000f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000009c 	.word	0x2000009c
 8000f6c:	20000214 	.word	0x20000214

08000f70 <Safety_Process_Digital_Sensors>:

HAL_StatusTypeDef Safety_Process_Digital_Sensors(void){
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef overall_status = HAL_OK;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71bb      	strb	r3, [r7, #6]
    uint32_t current_time = HAL_GetTick();
 8000f7a:	f001 f979 	bl	8002270 <HAL_GetTick>
 8000f7e:	6038      	str	r0, [r7, #0]
    uint8_t i;
    
    for (i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	e050      	b.n	8001028 <Safety_Process_Digital_Sensors+0xb8>
        if (g_digital_sensors[i].sensor_active) {
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4a2b      	ldr	r2, [pc, #172]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000f8a:	015b      	lsls	r3, r3, #5
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d045      	beq.n	8001022 <Safety_Process_Digital_Sensors+0xb2>
            // Read sensor value
            g_digital_sensors[i].sensor_value = Safety_Get_Digital_State(i);
 8000f96:	79fc      	ldrb	r4, [r7, #7]
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe62 	bl	8000c64 <Safety_Get_Digital_State>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4a24      	ldr	r2, [pc, #144]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000fa6:	0163      	lsls	r3, r4, #5
 8000fa8:	4413      	add	r3, r2
 8000faa:	3302      	adds	r3, #2
 8000fac:	460a      	mov	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
            if(g_digital_sensors[i].sensor_value == g_digital_sensors[i].active_level) {
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4a21      	ldr	r2, [pc, #132]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000fb4:	015b      	lsls	r3, r3, #5
 8000fb6:	4413      	add	r3, r2
 8000fb8:	3302      	adds	r3, #2
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	491e      	ldr	r1, [pc, #120]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000fc0:	015b      	lsls	r3, r3, #5
 8000fc2:	440b      	add	r3, r1
 8000fc4:	3305      	adds	r3, #5
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d115      	bne.n	8000ff8 <Safety_Process_Digital_Sensors+0x88>
                g_digital_sensors[i].sensor_status = SENSOR_STATUS_CRITICAL;
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000fd0:	015b      	lsls	r3, r3, #5
 8000fd2:	4413      	add	r3, r2
 8000fd4:	3310      	adds	r3, #16
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].sensor_state = 1;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4a16      	ldr	r2, [pc, #88]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000fde:	015b      	lsls	r3, r3, #5
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3306      	adds	r3, #6
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].alarm_flags = 0x08;
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	4a13      	ldr	r2, [pc, #76]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000fec:	015b      	lsls	r3, r3, #5
 8000fee:	4413      	add	r3, r2
 8000ff0:	331c      	adds	r3, #28
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e014      	b.n	8001022 <Safety_Process_Digital_Sensors+0xb2>
            }
            else {
                g_digital_sensors[i].sensor_status = SENSOR_STATUS_OK;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4a0f      	ldr	r2, [pc, #60]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8000ffc:	015b      	lsls	r3, r3, #5
 8000ffe:	4413      	add	r3, r2
 8001000:	3310      	adds	r3, #16
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].sensor_state = 0;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 800100a:	015b      	lsls	r3, r3, #5
 800100c:	4413      	add	r3, r2
 800100e:	3306      	adds	r3, #6
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
                g_digital_sensors[i].alarm_flags = 0;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <Safety_Process_Digital_Sensors+0xc8>)
 8001018:	015b      	lsls	r3, r3, #5
 800101a:	4413      	add	r3, r2
 800101c:	331c      	adds	r3, #28
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < DIGITAL_SENSOR_COUNT; i++) {
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	3301      	adds	r3, #1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b03      	cmp	r3, #3
 800102c:	d9ab      	bls.n	8000f86 <Safety_Process_Digital_Sensors+0x16>
            }
        }
    }
    
    return overall_status;
 800102e:	79bb      	ldrb	r3, [r7, #6]
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}
 8001038:	2000018c 	.word	0x2000018c

0800103c <initializeModbusRegisters>:
uint32_t g_corruptionCount = 0;
uint8_t g_receivedIndex = 0;



void initializeModbusRegisters(void) {
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
    // Initialize all registers to default values
    
    // System Registers (0x00F0-0x00F6)
    g_holdingRegisters[REG_DEVICE_ID] = DEFAULT_DEVICE_ID;  
 8001042:	4b57      	ldr	r3, [pc, #348]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001044:	2205      	movs	r2, #5
 8001046:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    g_holdingRegisters[REG_CONFIG_BAUDRATE] = DEFAULT_CONFIG_BAUDRATE;
 800104a:	4b55      	ldr	r3, [pc, #340]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800104c:	2205      	movs	r2, #5
 800104e:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    g_holdingRegisters[REG_CONFIG_PARITY] = DEFAULT_CONFIG_PARITY;
 8001052:	4b53      	ldr	r3, [pc, #332]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001054:	2200      	movs	r2, #0
 8001056:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    g_holdingRegisters[REG_CONFIG_STOP_BIT] = DEFAULT_CONFIG_STOP_BIT;
 800105a:	4b51      	ldr	r3, [pc, #324]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800105c:	2201      	movs	r2, #1
 800105e:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
    g_holdingRegisters[REG_MODULE_TYPE] = DEFAULT_MODULE_TYPE;
 8001062:	4b4f      	ldr	r3, [pc, #316]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001064:	2206      	movs	r2, #6
 8001066:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
    g_holdingRegisters[REG_FIRMWARE_VERSION] = DEFAULT_FIRMWARE_VERSION;
 800106a:	4b4d      	ldr	r3, [pc, #308]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800106c:	2201      	movs	r2, #1
 800106e:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
    g_holdingRegisters[REG_HARDWARE_VERSION] = DEFAULT_HARDWARE_VERSION;
 8001072:	4b4b      	ldr	r3, [pc, #300]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001074:	2201      	movs	r2, #1
 8001076:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
    g_holdingRegisters[REG_SYSTEM_STATUS] = DEFAULT_SYSTEM_STATUS;
 800107a:	4b49      	ldr	r3, [pc, #292]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800107c:	2200      	movs	r2, #0
 800107e:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
    g_holdingRegisters[REG_SYSTEM_ERROR] = DEFAULT_SYSTEM_ERROR;
 8001082:	4b47      	ldr	r3, [pc, #284]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001084:	2200      	movs	r2, #0
 8001086:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
    g_holdingRegisters[REG_RESET_ERROR_COMMAND] = DEFAULT_RESET_ERROR_COMMAND;
 800108a:	4b45      	ldr	r3, [pc, #276]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800108c:	2200      	movs	r2, #0
 800108e:	f8a3 2212 	strh.w	r2, [r3, #530]	@ 0x212
    
    // Safety Module Registers (0x0000-0x000C)
    g_holdingRegisters[REG_ANALOG_1_ENABLE] = DEFAULT_ANALOG_1_ENABLE;
 8001092:	4b43      	ldr	r3, [pc, #268]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001094:	2200      	movs	r2, #0
 8001096:	869a      	strh	r2, [r3, #52]	@ 0x34
    g_holdingRegisters[REG_ANALOG_2_ENABLE] = DEFAULT_ANALOG_2_ENABLE;
 8001098:	4b41      	ldr	r3, [pc, #260]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800109a:	2200      	movs	r2, #0
 800109c:	86da      	strh	r2, [r3, #54]	@ 0x36
    g_holdingRegisters[REG_ANALOG_3_ENABLE] = DEFAULT_ANALOG_3_ENABLE;
 800109e:	4b40      	ldr	r3, [pc, #256]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	871a      	strh	r2, [r3, #56]	@ 0x38
    g_holdingRegisters[REG_ANALOG_4_ENABLE] = DEFAULT_ANALOG_4_ENABLE;
 80010a4:	4b3e      	ldr	r3, [pc, #248]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	875a      	strh	r2, [r3, #58]	@ 0x3a
    g_holdingRegisters[REG_ANALOG_COEFFICIENT] = DEFAULT_ANALOG_COEFFICIENT;
 80010aa:	4b3d      	ldr	r3, [pc, #244]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010ac:	f640 22e2 	movw	r2, #2786	@ 0xae2
 80010b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    g_holdingRegisters[REG_ANALOG_CALIBRATION] = DEFAULT_ANALOG_CALIBRATION;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010b4:	2273      	movs	r2, #115	@ 0x73
 80010b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    g_holdingRegisters[REG_DI1_ENABLE] = DEFAULT_DI1_ENABLE;
 80010b8:	4b39      	ldr	r3, [pc, #228]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
    g_holdingRegisters[REG_DI2_ENABLE] = DEFAULT_DI2_ENABLE;
 80010c0:	4b37      	ldr	r3, [pc, #220]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    g_holdingRegisters[REG_DI3_ENABLE] = DEFAULT_DI3_ENABLE;
 80010c8:	4b35      	ldr	r3, [pc, #212]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    g_holdingRegisters[REG_DI4_ENABLE] = DEFAULT_DI4_ENABLE;
 80010d0:	4b33      	ldr	r3, [pc, #204]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    g_holdingRegisters[REG_RELAY1_CONTROL] = DEFAULT_RELAY1_CONTROL;
 80010d8:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
    g_holdingRegisters[REG_RELAY2_CONTROL] = DEFAULT_RELAY2_CONTROL;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    g_holdingRegisters[REG_RELAY3_CONTROL] = DEFAULT_RELAY3_CONTROL;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f8a3 2084 	strh.w	r2, [r3, #132]	@ 0x84
    g_holdingRegisters[REG_RELAY4_CONTROL] = DEFAULT_RELAY4_CONTROL;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    g_holdingRegisters[REG_SAFETY_ZONE1_THRESHOLD] = DEFAULT_SAFETY_ZONE1_THRESHOLD;
 80010f8:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <initializeModbusRegisters+0x164>)
 80010fa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010fe:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    g_holdingRegisters[REG_SAFETY_ZONE2_THRESHOLD] = DEFAULT_SAFETY_ZONE2_THRESHOLD;
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001104:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001108:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
    g_holdingRegisters[REG_SAFETY_ZONE3_THRESHOLD] = DEFAULT_SAFETY_ZONE3_THRESHOLD;
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800110e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001112:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
    g_holdingRegisters[REG_SAFETY_ZONE4_THRESHOLD] = DEFAULT_SAFETY_ZONE4_THRESHOLD;
 8001116:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001118:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800111c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
    g_holdingRegisters[REG_PROXIMITY_THRESHOLD] = DEFAULT_PROXIMITY_THRESHOLD;
 8001120:	4b1f      	ldr	r3, [pc, #124]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001122:	2264      	movs	r2, #100	@ 0x64
 8001124:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    g_holdingRegisters[REG_SAFETY_RESPONSE_TIME] = DEFAULT_SAFETY_RESPONSE_TIME;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800112a:	2232      	movs	r2, #50	@ 0x32
 800112c:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
    g_holdingRegisters[REG_AUTO_RESET_ENABLE] = DEFAULT_AUTO_RESET_ENABLE;
 8001130:	4b1b      	ldr	r3, [pc, #108]	@ (80011a0 <initializeModbusRegisters+0x164>)
 8001132:	2200      	movs	r2, #0
 8001134:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
    g_holdingRegisters[REG_SAFETY_MODE] = DEFAULT_SAFETY_MODE;
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <initializeModbusRegisters+0x164>)
 800113a:	2201      	movs	r2, #1
 800113c:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
    

    // Initialize other arrays
    for (int i = 0; i < INPUT_REG_COUNT; i++) {
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e007      	b.n	8001156 <initializeModbusRegisters+0x11a>
        g_inputRegisters[i] = 0;
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <initializeModbusRegisters+0x168>)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2100      	movs	r1, #0
 800114c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < INPUT_REG_COUNT; i++) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b04      	cmp	r3, #4
 800115a:	ddf4      	ble.n	8001146 <initializeModbusRegisters+0x10a>
    }
    
    for (int i = 0; i < COIL_COUNT; i++) {
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	e007      	b.n	8001172 <initializeModbusRegisters+0x136>
        g_coils[i] = 0;
 8001162:	4a11      	ldr	r2, [pc, #68]	@ (80011a8 <initializeModbusRegisters+0x16c>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4413      	add	r3, r2
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < COIL_COUNT; i++) {
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	3301      	adds	r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2b07      	cmp	r3, #7
 8001176:	ddf4      	ble.n	8001162 <initializeModbusRegisters+0x126>
    }
    
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	e007      	b.n	800118e <initializeModbusRegisters+0x152>
        g_discreteInputs[i] = 0;
 800117e:	4a0b      	ldr	r2, [pc, #44]	@ (80011ac <initializeModbusRegisters+0x170>)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < DISCRETE_COUNT; i++) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b03      	cmp	r3, #3
 8001192:	ddf4      	ble.n	800117e <initializeModbusRegisters+0x142>
    }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20000214 	.word	0x20000214
 80011a4:	2000046c 	.word	0x2000046c
 80011a8:	20000478 	.word	0x20000478
 80011ac:	20000480 	.word	0x20000480

080011b0 <calcCRC>:


uint16_t calcCRC(uint8_t *buf, int len) {
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 80011ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011be:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	e026      	b.n	8001214 <calcCRC+0x64>
        crc ^= (uint16_t)buf[pos];
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	8afb      	ldrh	r3, [r7, #22]
 80011d2:	4053      	eors	r3, r2
 80011d4:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 80011d6:	2308      	movs	r3, #8
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	e015      	b.n	8001208 <calcCRC+0x58>
            if ((crc & 0x0001) != 0) {
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00a      	beq.n	80011fc <calcCRC+0x4c>
                crc >>= 1;
 80011e6:	8afb      	ldrh	r3, [r7, #22]
 80011e8:	085b      	lsrs	r3, r3, #1
 80011ea:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80011ec:	8afb      	ldrh	r3, [r7, #22]
 80011ee:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 80011f2:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 80011f6:	43db      	mvns	r3, r3
 80011f8:	82fb      	strh	r3, [r7, #22]
 80011fa:	e002      	b.n	8001202 <calcCRC+0x52>
            } else {
                crc >>= 1;
 80011fc:	8afb      	ldrh	r3, [r7, #22]
 80011fe:	085b      	lsrs	r3, r3, #1
 8001200:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1e6      	bne.n	80011dc <calcCRC+0x2c>
    for (int pos = 0; pos < len; pos++) {
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbd4      	blt.n	80011c6 <calcCRC+0x16>
            }
        }
    }
    return crc;
 800121c:	8afb      	ldrh	r3, [r7, #22]
}
 800121e:	4618      	mov	r0, r3
 8001220:	371c      	adds	r7, #28
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2d      	ldr	r2, [pc, #180]	@ (80012ec <HAL_UART_RxCpltCallback+0xc4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d154      	bne.n	80012e4 <HAL_UART_RxCpltCallback+0xbc>
        g_lastUARTActivity = HAL_GetTick();
 800123a:	f001 f819 	bl	8002270 <HAL_GetTick>
 800123e:	4603      	mov	r3, r0
 8001240:	4a2b      	ldr	r2, [pc, #172]	@ (80012f0 <HAL_UART_RxCpltCallback+0xc8>)
 8001242:	6013      	str	r3, [r2, #0]
        
        if (rxIndex < RX_BUFFER_SIZE - 1) {
 8001244:	4b2b      	ldr	r3, [pc, #172]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2bff      	cmp	r3, #255	@ 0xff
 800124a:	d03b      	beq.n	80012c4 <HAL_UART_RxCpltCallback+0x9c>
            rxBuffer[rxIndex++] = huart->Instance->DR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6859      	ldr	r1, [r3, #4]
 8001252:	4b28      	ldr	r3, [pc, #160]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	b2d0      	uxtb	r0, r2
 800125a:	4a26      	ldr	r2, [pc, #152]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 800125c:	7010      	strb	r0, [r2, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	b2c9      	uxtb	r1, r1
 8001262:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001264:	5499      	strb	r1, [r3, r2]
            frameReceived = 1;
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <HAL_UART_RxCpltCallback+0xd4>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]
            
            if (rxIndex >= 6) {
 800126c:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b05      	cmp	r3, #5
 8001272:	d92d      	bls.n	80012d0 <HAL_UART_RxCpltCallback+0xa8>
                uint8_t expectedLength = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
                if (rxBuffer[1] == 3 || rxBuffer[1] == 6) {
 8001278:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <HAL_UART_RxCpltCallback+0xd0>)
 800127a:	785b      	ldrb	r3, [r3, #1]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d003      	beq.n	8001288 <HAL_UART_RxCpltCallback+0x60>
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001282:	785b      	ldrb	r3, [r3, #1]
 8001284:	2b06      	cmp	r3, #6
 8001286:	d102      	bne.n	800128e <HAL_UART_RxCpltCallback+0x66>
                    expectedLength = 8;
 8001288:	2308      	movs	r3, #8
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e012      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x8c>
                } else if (rxBuffer[1] == 4) {
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d102      	bne.n	800129c <HAL_UART_RxCpltCallback+0x74>
                    expectedLength = 8;
 8001296:	2308      	movs	r3, #8
 8001298:	73fb      	strb	r3, [r7, #15]
 800129a:	e00b      	b.n	80012b4 <HAL_UART_RxCpltCallback+0x8c>
                } else if (rxBuffer[1] == 16) {
 800129c:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <HAL_UART_RxCpltCallback+0xd0>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d107      	bne.n	80012b4 <HAL_UART_RxCpltCallback+0x8c>
                    if (rxIndex >= 7) {
 80012a4:	4b13      	ldr	r3, [pc, #76]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d903      	bls.n	80012b4 <HAL_UART_RxCpltCallback+0x8c>
                        expectedLength = 9 + rxBuffer[6];
 80012ac:	4b12      	ldr	r3, [pc, #72]	@ (80012f8 <HAL_UART_RxCpltCallback+0xd0>)
 80012ae:	799b      	ldrb	r3, [r3, #6]
 80012b0:	3309      	adds	r3, #9
 80012b2:	73fb      	strb	r3, [r7, #15]
                    }
                }
                
                if (rxIndex >= expectedLength) {
 80012b4:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	7bfa      	ldrb	r2, [r7, #15]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d808      	bhi.n	80012d0 <HAL_UART_RxCpltCallback+0xa8>
                    processModbusFrame();
 80012be:	f000 f865 	bl	800138c <processModbusFrame>
 80012c2:	e005      	b.n	80012d0 <HAL_UART_RxCpltCallback+0xa8>
                }
            }
        } else {
            rxIndex = 0;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
            frameReceived = 0;
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_UART_RxCpltCallback+0xd4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_UART_RxCpltCallback+0xcc>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b08      	ldr	r3, [pc, #32]	@ (80012f8 <HAL_UART_RxCpltCallback+0xd0>)
 80012d8:	4413      	add	r3, r2
 80012da:	2201      	movs	r2, #1
 80012dc:	4619      	mov	r1, r3
 80012de:	4808      	ldr	r0, [pc, #32]	@ (8001300 <HAL_UART_RxCpltCallback+0xd8>)
 80012e0:	f003 fcef 	bl	8004cc2 <HAL_UART_Receive_IT>
    }
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40004400 	.word	0x40004400
 80012f0:	2000058c 	.word	0x2000058c
 80012f4:	20000588 	.word	0x20000588
 80012f8:	20000488 	.word	0x20000488
 80012fc:	20000589 	.word	0x20000589
 8001300:	2000064c 	.word	0x2000064c

08001304 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0c      	ldr	r2, [pc, #48]	@ (8001344 <HAL_UART_ErrorCallback+0x40>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d112      	bne.n	800133c <HAL_UART_ErrorCallback+0x38>
        rxIndex = 0;
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <HAL_UART_ErrorCallback+0x44>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
        frameReceived = 0;
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_UART_ErrorCallback+0x48>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
        HAL_UART_Abort(&huart2);
 8001322:	480b      	ldr	r0, [pc, #44]	@ (8001350 <HAL_UART_ErrorCallback+0x4c>)
 8001324:	f003 fcf2 	bl	8004d0c <HAL_UART_Abort>
        HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1);
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <HAL_UART_ErrorCallback+0x44>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_UART_ErrorCallback+0x50>)
 8001330:	4413      	add	r3, r2
 8001332:	2201      	movs	r2, #1
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	@ (8001350 <HAL_UART_ErrorCallback+0x4c>)
 8001338:	f003 fcc3 	bl	8004cc2 <HAL_UART_Receive_IT>
    }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40004400 	.word	0x40004400
 8001348:	20000588 	.word	0x20000588
 800134c:	20000589 	.word	0x20000589
 8001350:	2000064c 	.word	0x2000064c
 8001354:	20000488 	.word	0x20000488

08001358 <resetUARTCommunication>:

void resetUARTCommunication(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
    HAL_UART_Abort(&huart2);
 800135c:	4807      	ldr	r0, [pc, #28]	@ (800137c <resetUARTCommunication+0x24>)
 800135e:	f003 fcd5 	bl	8004d0c <HAL_UART_Abort>
    rxIndex = 0;
 8001362:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <resetUARTCommunication+0x28>)
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
    frameReceived = 0;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <resetUARTCommunication+0x2c>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, &rxBuffer[0], 1);
 800136e:	2201      	movs	r2, #1
 8001370:	4905      	ldr	r1, [pc, #20]	@ (8001388 <resetUARTCommunication+0x30>)
 8001372:	4802      	ldr	r0, [pc, #8]	@ (800137c <resetUARTCommunication+0x24>)
 8001374:	f003 fca5 	bl	8004cc2 <HAL_UART_Receive_IT>
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2000064c 	.word	0x2000064c
 8001380:	20000588 	.word	0x20000588
 8001384:	20000589 	.word	0x20000589
 8001388:	20000488 	.word	0x20000488

0800138c <processModbusFrame>:

void processModbusFrame(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b0ca      	sub	sp, #296	@ 0x128
 8001390:	af00      	add	r7, sp, #0
    if (rxIndex < 6) return;
 8001392:	4ba2      	ldr	r3, [pc, #648]	@ (800161c <processModbusFrame+0x290>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b05      	cmp	r3, #5
 8001398:	f240 8299 	bls.w	80018ce <processModbusFrame+0x542>
    if (rxBuffer[0] != MODBUS_SLAVE_ADDRESS) return;
 800139c:	4ba0      	ldr	r3, [pc, #640]	@ (8001620 <processModbusFrame+0x294>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b05      	cmp	r3, #5
 80013a2:	f040 8296 	bne.w	80018d2 <processModbusFrame+0x546>

    uint16_t crc = calcCRC(rxBuffer, rxIndex - 2);
 80013a6:	4b9d      	ldr	r3, [pc, #628]	@ (800161c <processModbusFrame+0x290>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	3b02      	subs	r3, #2
 80013ac:	4619      	mov	r1, r3
 80013ae:	489c      	ldr	r0, [pc, #624]	@ (8001620 <processModbusFrame+0x294>)
 80013b0:	f7ff fefe 	bl	80011b0 <calcCRC>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    if (rxBuffer[rxIndex - 2] != (crc & 0xFF) || rxBuffer[rxIndex - 1] != (crc >> 8)) {
 80013ba:	4b98      	ldr	r3, [pc, #608]	@ (800161c <processModbusFrame+0x290>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	3b02      	subs	r3, #2
 80013c0:	4a97      	ldr	r2, [pc, #604]	@ (8001620 <processModbusFrame+0x294>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	461a      	mov	r2, r3
 80013c6:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 8282 	bne.w	80018d6 <processModbusFrame+0x54a>
 80013d2:	4b92      	ldr	r3, [pc, #584]	@ (800161c <processModbusFrame+0x290>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	4a91      	ldr	r2, [pc, #580]	@ (8001620 <processModbusFrame+0x294>)
 80013da:	5cd3      	ldrb	r3, [r2, r3]
 80013dc:	461a      	mov	r2, r3
 80013de:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	429a      	cmp	r2, r3
 80013e8:	f040 8275 	bne.w	80018d6 <processModbusFrame+0x54a>
        return;
    }

    uint8_t funcCode = rxBuffer[1];
 80013ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001620 <processModbusFrame+0x294>)
 80013ee:	785b      	ldrb	r3, [r3, #1]
 80013f0:	f887 3115 	strb.w	r3, [r7, #277]	@ 0x115
    uint8_t txBuffer[256];
    uint8_t txIndex = 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    txBuffer[0] = MODBUS_SLAVE_ADDRESS;
 80013fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001402:	2205      	movs	r2, #5
 8001404:	701a      	strb	r2, [r3, #0]
    txBuffer[1] = funcCode;
 8001406:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800140a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800140e:	f897 2115 	ldrb.w	r2, [r7, #277]	@ 0x115
 8001412:	705a      	strb	r2, [r3, #1]

    if (funcCode == 3) {
 8001414:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001418:	2b03      	cmp	r3, #3
 800141a:	d17d      	bne.n	8001518 <processModbusFrame+0x18c>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 800141c:	4b80      	ldr	r3, [pc, #512]	@ (8001620 <processModbusFrame+0x294>)
 800141e:	789b      	ldrb	r3, [r3, #2]
 8001420:	b21b      	sxth	r3, r3
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b7e      	ldr	r3, [pc, #504]	@ (8001620 <processModbusFrame+0x294>)
 8001428:	78db      	ldrb	r3, [r3, #3]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 8001434:	4b7a      	ldr	r3, [pc, #488]	@ (8001620 <processModbusFrame+0x294>)
 8001436:	791b      	ldrb	r3, [r3, #4]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	4b78      	ldr	r3, [pc, #480]	@ (8001620 <processModbusFrame+0x294>)
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	b21b      	sxth	r3, r3
 8001444:	4313      	orrs	r3, r2
 8001446:	b21b      	sxth	r3, r3
 8001448:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
        if (addr + qty <= HOLDING_REG_COUNT) {
 800144c:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8001450:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001454:	4413      	add	r3, r2
 8001456:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800145a:	dc46      	bgt.n	80014ea <processModbusFrame+0x15e>
            txBuffer[2] = qty * 2;
 800145c:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8001460:	b2db      	uxtb	r3, r3
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	b2da      	uxtb	r2, r3
 8001466:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800146a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800146e:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001470:	2303      	movs	r3, #3
 8001472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            for (int i = 0; i < qty; i++) {
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800147c:	e02e      	b.n	80014dc <processModbusFrame+0x150>
                txBuffer[txIndex++] = g_holdingRegisters[addr + i] >> 8;
 800147e:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 8001482:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001486:	4413      	add	r3, r2
 8001488:	4a66      	ldr	r2, [pc, #408]	@ (8001624 <processModbusFrame+0x298>)
 800148a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	b299      	uxth	r1, r3
 8001492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 800149c:	461a      	mov	r2, r3
 800149e:	b2c9      	uxtb	r1, r1
 80014a0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014a8:	5499      	strb	r1, [r3, r2]
                txBuffer[txIndex++] = g_holdingRegisters[addr + i] & 0xFF;
 80014aa:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 80014ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014b2:	4413      	add	r3, r2
 80014b4:	4a5b      	ldr	r2, [pc, #364]	@ (8001624 <processModbusFrame+0x298>)
 80014b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80014ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 80014c4:	461a      	mov	r2, r3
 80014c6:	b2c9      	uxtb	r1, r1
 80014c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014cc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014d0:	5499      	strb	r1, [r3, r2]
            for (int i = 0; i < qty; i++) {
 80014d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014d6:	3301      	adds	r3, #1
 80014d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80014dc:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 80014e0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbca      	blt.n	800147e <processModbusFrame+0xf2>
 80014e8:	e1b4      	b.n	8001854 <processModbusFrame+0x4c8>
            }
        } else {
            txBuffer[1] |= 0x80;
 80014ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80014fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001502:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 8001504:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001508:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800150c:	2202      	movs	r2, #2
 800150e:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001510:	2303      	movs	r3, #3
 8001512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8001516:	e19d      	b.n	8001854 <processModbusFrame+0x4c8>
        }
    } else if (funcCode == 4) {
 8001518:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800151c:	2b04      	cmp	r3, #4
 800151e:	f040 8085 	bne.w	800162c <processModbusFrame+0x2a0>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 8001522:	4b3f      	ldr	r3, [pc, #252]	@ (8001620 <processModbusFrame+0x294>)
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	b21b      	sxth	r3, r3
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	4b3c      	ldr	r3, [pc, #240]	@ (8001620 <processModbusFrame+0x294>)
 800152e:	78db      	ldrb	r3, [r3, #3]
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21b      	sxth	r3, r3
 8001536:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 800153a:	4b39      	ldr	r3, [pc, #228]	@ (8001620 <processModbusFrame+0x294>)
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	b21b      	sxth	r3, r3
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b36      	ldr	r3, [pc, #216]	@ (8001620 <processModbusFrame+0x294>)
 8001546:	795b      	ldrb	r3, [r3, #5]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        if (addr + qty <= INPUT_REG_COUNT) {
 8001552:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 8001556:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 800155a:	4413      	add	r3, r2
 800155c:	2b05      	cmp	r3, #5
 800155e:	dc46      	bgt.n	80015ee <processModbusFrame+0x262>
            txBuffer[2] = qty * 2;
 8001560:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 8001564:	b2db      	uxtb	r3, r3
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800156e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001572:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001574:	2303      	movs	r3, #3
 8001576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            for (int i = 0; i < qty; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001580:	e02e      	b.n	80015e0 <processModbusFrame+0x254>
                txBuffer[txIndex++] = g_inputRegisters[addr + i] >> 8;
 8001582:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 8001586:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800158a:	4413      	add	r3, r2
 800158c:	4a26      	ldr	r2, [pc, #152]	@ (8001628 <processModbusFrame+0x29c>)
 800158e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	b299      	uxth	r1, r3
 8001596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 80015a0:	461a      	mov	r2, r3
 80015a2:	b2c9      	uxtb	r1, r1
 80015a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80015a8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015ac:	5499      	strb	r1, [r3, r2]
                txBuffer[txIndex++] = g_inputRegisters[addr + i] & 0xFF;
 80015ae:	f8b7 2108 	ldrh.w	r2, [r7, #264]	@ 0x108
 80015b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015b6:	4413      	add	r3, r2
 80015b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001628 <processModbusFrame+0x29c>)
 80015ba:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80015c2:	1c5a      	adds	r2, r3, #1
 80015c4:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 80015c8:	461a      	mov	r2, r3
 80015ca:	b2c9      	uxtb	r1, r1
 80015cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80015d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015d4:	5499      	strb	r1, [r3, r2]
            for (int i = 0; i < qty; i++) {
 80015d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80015da:	3301      	adds	r3, #1
 80015dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80015e0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80015e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbca      	blt.n	8001582 <processModbusFrame+0x1f6>
 80015ec:	e132      	b.n	8001854 <processModbusFrame+0x4c8>
            }
        } else {
            txBuffer[1] |= 0x80;
 80015ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80015f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001602:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001606:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 8001608:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800160c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001610:	2202      	movs	r2, #2
 8001612:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001614:	2303      	movs	r3, #3
 8001616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 800161a:	e11b      	b.n	8001854 <processModbusFrame+0x4c8>
 800161c:	20000588 	.word	0x20000588
 8001620:	20000488 	.word	0x20000488
 8001624:	20000214 	.word	0x20000214
 8001628:	2000046c 	.word	0x2000046c
        }
    } else if (funcCode == 6) {
 800162c:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8001630:	2b06      	cmp	r3, #6
 8001632:	d168      	bne.n	8001706 <processModbusFrame+0x37a>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 8001634:	4baa      	ldr	r3, [pc, #680]	@ (80018e0 <processModbusFrame+0x554>)
 8001636:	789b      	ldrb	r3, [r3, #2]
 8001638:	b21b      	sxth	r3, r3
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	b21a      	sxth	r2, r3
 800163e:	4ba8      	ldr	r3, [pc, #672]	@ (80018e0 <processModbusFrame+0x554>)
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	b21b      	sxth	r3, r3
 8001644:	4313      	orrs	r3, r2
 8001646:	b21b      	sxth	r3, r3
 8001648:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
        uint16_t value = (rxBuffer[4] << 8) | rxBuffer[5];
 800164c:	4ba4      	ldr	r3, [pc, #656]	@ (80018e0 <processModbusFrame+0x554>)
 800164e:	791b      	ldrb	r3, [r3, #4]
 8001650:	b21b      	sxth	r3, r3
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b21a      	sxth	r2, r3
 8001656:	4ba2      	ldr	r3, [pc, #648]	@ (80018e0 <processModbusFrame+0x554>)
 8001658:	795b      	ldrb	r3, [r3, #5]
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        if (addr < HOLDING_REG_COUNT) {
 8001664:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8001668:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800166c:	d234      	bcs.n	80016d8 <processModbusFrame+0x34c>
            g_holdingRegisters[addr] = value;
 800166e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8001672:	499c      	ldr	r1, [pc, #624]	@ (80018e4 <processModbusFrame+0x558>)
 8001674:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 8001678:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            
            // Handle special register writes
            if (addr == REG_RESET_ERROR_COMMAND && value == 1) {
 800167c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8001680:	f240 1209 	movw	r2, #265	@ 0x109
 8001684:	4293      	cmp	r3, r2
 8001686:	d107      	bne.n	8001698 <processModbusFrame+0x30c>
 8001688:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 800168c:	2b01      	cmp	r3, #1
 800168e:	d103      	bne.n	8001698 <processModbusFrame+0x30c>
                g_holdingRegisters[REG_SYSTEM_ERROR] = 0;
 8001690:	4b94      	ldr	r3, [pc, #592]	@ (80018e4 <processModbusFrame+0x558>)
 8001692:	2200      	movs	r2, #0
 8001694:	f8a3 2210 	strh.w	r2, [r3, #528]	@ 0x210
            }
            
            txBuffer[2] = rxBuffer[2];
 8001698:	4b91      	ldr	r3, [pc, #580]	@ (80018e0 <processModbusFrame+0x554>)
 800169a:	789a      	ldrb	r2, [r3, #2]
 800169c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016a0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016a4:	709a      	strb	r2, [r3, #2]
            txBuffer[3] = rxBuffer[3];
 80016a6:	4b8e      	ldr	r3, [pc, #568]	@ (80018e0 <processModbusFrame+0x554>)
 80016a8:	78da      	ldrb	r2, [r3, #3]
 80016aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016b2:	70da      	strb	r2, [r3, #3]
            txBuffer[4] = rxBuffer[4];
 80016b4:	4b8a      	ldr	r3, [pc, #552]	@ (80018e0 <processModbusFrame+0x554>)
 80016b6:	791a      	ldrb	r2, [r3, #4]
 80016b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016c0:	711a      	strb	r2, [r3, #4]
            txBuffer[5] = rxBuffer[5];
 80016c2:	4b87      	ldr	r3, [pc, #540]	@ (80018e0 <processModbusFrame+0x554>)
 80016c4:	795a      	ldrb	r2, [r3, #5]
 80016c6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016ce:	715a      	strb	r2, [r3, #5]
            txIndex = 6;
 80016d0:	2306      	movs	r3, #6
 80016d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80016d6:	e0bd      	b.n	8001854 <processModbusFrame+0x4c8>
        } else {
            txBuffer[1] |= 0x80;
 80016d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016e0:	785b      	ldrb	r3, [r3, #1]
 80016e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016f0:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 80016f2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80016f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80016fa:	2202      	movs	r2, #2
 80016fc:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 80016fe:	2303      	movs	r3, #3
 8001700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8001704:	e0a6      	b.n	8001854 <processModbusFrame+0x4c8>
        }
    } else if (funcCode == 16) {
 8001706:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800170a:	2b10      	cmp	r3, #16
 800170c:	f040 808c 	bne.w	8001828 <processModbusFrame+0x49c>
        uint16_t addr = (rxBuffer[2] << 8) | rxBuffer[3];
 8001710:	4b73      	ldr	r3, [pc, #460]	@ (80018e0 <processModbusFrame+0x554>)
 8001712:	789b      	ldrb	r3, [r3, #2]
 8001714:	b21b      	sxth	r3, r3
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	4b71      	ldr	r3, [pc, #452]	@ (80018e0 <processModbusFrame+0x554>)
 800171c:	78db      	ldrb	r3, [r3, #3]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21b      	sxth	r3, r3
 8001724:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
        uint16_t qty = (rxBuffer[4] << 8) | rxBuffer[5];
 8001728:	4b6d      	ldr	r3, [pc, #436]	@ (80018e0 <processModbusFrame+0x554>)
 800172a:	791b      	ldrb	r3, [r3, #4]
 800172c:	b21b      	sxth	r3, r3
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b6b      	ldr	r3, [pc, #428]	@ (80018e0 <processModbusFrame+0x554>)
 8001734:	795b      	ldrb	r3, [r3, #5]
 8001736:	b21b      	sxth	r3, r3
 8001738:	4313      	orrs	r3, r2
 800173a:	b21b      	sxth	r3, r3
 800173c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
        uint8_t byteCount = rxBuffer[6];
 8001740:	4b67      	ldr	r3, [pc, #412]	@ (80018e0 <processModbusFrame+0x554>)
 8001742:	799b      	ldrb	r3, [r3, #6]
 8001744:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
        if (addr + qty <= HOLDING_REG_COUNT && byteCount == qty * 2) {
 8001748:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 800174c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8001750:	4413      	add	r3, r2
 8001752:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001756:	dc50      	bgt.n	80017fa <processModbusFrame+0x46e>
 8001758:	f897 210f 	ldrb.w	r2, [r7, #271]	@ 0x10f
 800175c:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	429a      	cmp	r2, r3
 8001764:	d149      	bne.n	80017fa <processModbusFrame+0x46e>
            for (int i = 0; i < qty; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800176c:	e01f      	b.n	80017ae <processModbusFrame+0x422>
                g_holdingRegisters[addr + i] = (rxBuffer[7 + i*2] << 8) | rxBuffer[8 + i*2];
 800176e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	3307      	adds	r3, #7
 8001776:	4a5a      	ldr	r2, [pc, #360]	@ (80018e0 <processModbusFrame+0x554>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	b21b      	sxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001784:	3304      	adds	r3, #4
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4955      	ldr	r1, [pc, #340]	@ (80018e0 <processModbusFrame+0x554>)
 800178a:	5ccb      	ldrb	r3, [r1, r3]
 800178c:	b21b      	sxth	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b219      	sxth	r1, r3
 8001792:	f8b7 2112 	ldrh.w	r2, [r7, #274]	@ 0x112
 8001796:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800179a:	4413      	add	r3, r2
 800179c:	b289      	uxth	r1, r1
 800179e:	4a51      	ldr	r2, [pc, #324]	@ (80018e4 <processModbusFrame+0x558>)
 80017a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            for (int i = 0; i < qty; i++) {
 80017a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80017a8:	3301      	adds	r3, #1
 80017aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80017ae:	f8b7 3110 	ldrh.w	r3, [r7, #272]	@ 0x110
 80017b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbd9      	blt.n	800176e <processModbusFrame+0x3e2>
            }
            txBuffer[2] = rxBuffer[2];
 80017ba:	4b49      	ldr	r3, [pc, #292]	@ (80018e0 <processModbusFrame+0x554>)
 80017bc:	789a      	ldrb	r2, [r3, #2]
 80017be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017c6:	709a      	strb	r2, [r3, #2]
            txBuffer[3] = rxBuffer[3];
 80017c8:	4b45      	ldr	r3, [pc, #276]	@ (80018e0 <processModbusFrame+0x554>)
 80017ca:	78da      	ldrb	r2, [r3, #3]
 80017cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017d4:	70da      	strb	r2, [r3, #3]
            txBuffer[4] = rxBuffer[4];
 80017d6:	4b42      	ldr	r3, [pc, #264]	@ (80018e0 <processModbusFrame+0x554>)
 80017d8:	791a      	ldrb	r2, [r3, #4]
 80017da:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017e2:	711a      	strb	r2, [r3, #4]
            txBuffer[5] = rxBuffer[5];
 80017e4:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <processModbusFrame+0x554>)
 80017e6:	795a      	ldrb	r2, [r3, #5]
 80017e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017f0:	715a      	strb	r2, [r3, #5]
            txIndex = 6;
 80017f2:	2306      	movs	r3, #6
 80017f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 80017f8:	e02c      	b.n	8001854 <processModbusFrame+0x4c8>
        } else {
            txBuffer[1] |= 0x80;
 80017fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80017fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001802:	785b      	ldrb	r3, [r3, #1]
 8001804:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001808:	b2da      	uxtb	r2, r3
 800180a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800180e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001812:	705a      	strb	r2, [r3, #1]
            txBuffer[2] = 0x02;
 8001814:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001818:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800181c:	2202      	movs	r2, #2
 800181e:	709a      	strb	r2, [r3, #2]
            txIndex = 3;
 8001820:	2303      	movs	r3, #3
 8001822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
 8001826:	e015      	b.n	8001854 <processModbusFrame+0x4c8>
        }
    } else {
        txBuffer[1] |= 0x80;
 8001828:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800182c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001836:	b2da      	uxtb	r2, r3
 8001838:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800183c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001840:	705a      	strb	r2, [r3, #1]
        txBuffer[2] = 0x01;
 8001842:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001846:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800184a:	2201      	movs	r2, #1
 800184c:	709a      	strb	r2, [r3, #2]
        txIndex = 3;
 800184e:	2303      	movs	r3, #3
 8001850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    }

    crc = calcCRC(txBuffer, txIndex);
 8001854:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8001858:	463b      	mov	r3, r7
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fca7 	bl	80011b0 <calcCRC>
 8001862:	4603      	mov	r3, r0
 8001864:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
    txBuffer[txIndex++] = crc & 0xFF;
 8001868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001872:	461a      	mov	r2, r3
 8001874:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001878:	b2d9      	uxtb	r1, r3
 800187a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800187e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001882:	5499      	strb	r1, [r3, r2]
    txBuffer[txIndex++] = crc >> 8;
 8001884:	f8b7 3116 	ldrh.w	r3, [r7, #278]	@ 0x116
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	b299      	uxth	r1, r3
 800188c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	f887 2127 	strb.w	r2, [r7, #295]	@ 0x127
 8001896:	461a      	mov	r2, r3
 8001898:	b2c9      	uxtb	r1, r1
 800189a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800189e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80018a2:	5499      	strb	r1, [r3, r2]
    
    if (HAL_UART_Transmit(&huart2, txBuffer, txIndex, 100) != HAL_OK) {
 80018a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	4639      	mov	r1, r7
 80018ac:	2364      	movs	r3, #100	@ 0x64
 80018ae:	480e      	ldr	r0, [pc, #56]	@ (80018e8 <processModbusFrame+0x55c>)
 80018b0:	f003 f97c 	bl	8004bac <HAL_UART_Transmit>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d002      	beq.n	80018c0 <processModbusFrame+0x534>
        HAL_UART_Abort(&huart2);
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <processModbusFrame+0x55c>)
 80018bc:	f003 fa26 	bl	8004d0c <HAL_UART_Abort>

    } else {
    }
    
    rxIndex = 0;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <processModbusFrame+0x560>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
    frameReceived = 0;
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <processModbusFrame+0x564>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	e004      	b.n	80018d8 <processModbusFrame+0x54c>
    if (rxIndex < 6) return;
 80018ce:	bf00      	nop
 80018d0:	e002      	b.n	80018d8 <processModbusFrame+0x54c>
    if (rxBuffer[0] != MODBUS_SLAVE_ADDRESS) return;
 80018d2:	bf00      	nop
 80018d4:	e000      	b.n	80018d8 <processModbusFrame+0x54c>
        return;
 80018d6:	bf00      	nop
}
 80018d8:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000488 	.word	0x20000488
 80018e4:	20000214 	.word	0x20000214
 80018e8:	2000064c 	.word	0x2000064c
 80018ec:	20000588 	.word	0x20000588
 80018f0:	20000589 	.word	0x20000589

080018f4 <updateBaudrate>:

void updateBaudrate(void) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
    if(current_baudrate == g_holdingRegisters[REG_CONFIG_BAUDRATE])
 80018f8:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <updateBaudrate+0xe8>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b38      	ldr	r3, [pc, #224]	@ (80019e0 <updateBaudrate+0xec>)
 8001900:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 8001904:	429a      	cmp	r2, r3
 8001906:	d067      	beq.n	80019d8 <updateBaudrate+0xe4>
        return;
    else {
        switch(g_holdingRegisters[REG_CONFIG_BAUDRATE]) {
 8001908:	4b35      	ldr	r3, [pc, #212]	@ (80019e0 <updateBaudrate+0xec>)
 800190a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800190e:	3b01      	subs	r3, #1
 8001910:	2b04      	cmp	r3, #4
 8001912:	d853      	bhi.n	80019bc <updateBaudrate+0xc8>
 8001914:	a201      	add	r2, pc, #4	@ (adr r2, 800191c <updateBaudrate+0x28>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001931 	.word	0x08001931
 8001920:	0800194d 	.word	0x0800194d
 8001924:	08001969 	.word	0x08001969
 8001928:	08001985 	.word	0x08001985
 800192c:	080019a1 	.word	0x080019a1
            case 1:
                current_baudrate = 1;
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <updateBaudrate+0xe8>)
 8001932:	2201      	movs	r2, #1
 8001934:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 9600;
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <updateBaudrate+0xf0>)
 8001938:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800193c:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 800193e:	4829      	ldr	r0, [pc, #164]	@ (80019e4 <updateBaudrate+0xf0>)
 8001940:	f003 f902 	bl	8004b48 <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 8001944:	4827      	ldr	r0, [pc, #156]	@ (80019e4 <updateBaudrate+0xf0>)
 8001946:	f003 f8af 	bl	8004aa8 <HAL_UART_Init>
                break;
 800194a:	e046      	b.n	80019da <updateBaudrate+0xe6>
            case 2:
                current_baudrate = 2;
 800194c:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <updateBaudrate+0xe8>)
 800194e:	2202      	movs	r2, #2
 8001950:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 19200;
 8001952:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <updateBaudrate+0xf0>)
 8001954:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001958:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 800195a:	4822      	ldr	r0, [pc, #136]	@ (80019e4 <updateBaudrate+0xf0>)
 800195c:	f003 f8f4 	bl	8004b48 <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 8001960:	4820      	ldr	r0, [pc, #128]	@ (80019e4 <updateBaudrate+0xf0>)
 8001962:	f003 f8a1 	bl	8004aa8 <HAL_UART_Init>
                break;
 8001966:	e038      	b.n	80019da <updateBaudrate+0xe6>
            case 3:
                current_baudrate = 3;
 8001968:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <updateBaudrate+0xe8>)
 800196a:	2203      	movs	r2, #3
 800196c:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 38400;
 800196e:	4b1d      	ldr	r3, [pc, #116]	@ (80019e4 <updateBaudrate+0xf0>)
 8001970:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001974:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 8001976:	481b      	ldr	r0, [pc, #108]	@ (80019e4 <updateBaudrate+0xf0>)
 8001978:	f003 f8e6 	bl	8004b48 <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 800197c:	4819      	ldr	r0, [pc, #100]	@ (80019e4 <updateBaudrate+0xf0>)
 800197e:	f003 f893 	bl	8004aa8 <HAL_UART_Init>
                break;
 8001982:	e02a      	b.n	80019da <updateBaudrate+0xe6>
            case 4:
                current_baudrate = 4;
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <updateBaudrate+0xe8>)
 8001986:	2204      	movs	r2, #4
 8001988:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 57600;
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <updateBaudrate+0xf0>)
 800198c:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8001990:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 8001992:	4814      	ldr	r0, [pc, #80]	@ (80019e4 <updateBaudrate+0xf0>)
 8001994:	f003 f8d8 	bl	8004b48 <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 8001998:	4812      	ldr	r0, [pc, #72]	@ (80019e4 <updateBaudrate+0xf0>)
 800199a:	f003 f885 	bl	8004aa8 <HAL_UART_Init>
                break;
 800199e:	e01c      	b.n	80019da <updateBaudrate+0xe6>
            case 5:
                current_baudrate = 5;
 80019a0:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <updateBaudrate+0xe8>)
 80019a2:	2205      	movs	r2, #5
 80019a4:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 115200;
 80019a6:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <updateBaudrate+0xf0>)
 80019a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019ac:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 80019ae:	480d      	ldr	r0, [pc, #52]	@ (80019e4 <updateBaudrate+0xf0>)
 80019b0:	f003 f8ca 	bl	8004b48 <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 80019b4:	480b      	ldr	r0, [pc, #44]	@ (80019e4 <updateBaudrate+0xf0>)
 80019b6:	f003 f877 	bl	8004aa8 <HAL_UART_Init>
                break;
 80019ba:	e00e      	b.n	80019da <updateBaudrate+0xe6>
            default:
                current_baudrate = 5;
 80019bc:	4b07      	ldr	r3, [pc, #28]	@ (80019dc <updateBaudrate+0xe8>)
 80019be:	2205      	movs	r2, #5
 80019c0:	701a      	strb	r2, [r3, #0]
                huart2.Init.BaudRate = 115200;
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <updateBaudrate+0xf0>)
 80019c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019c8:	605a      	str	r2, [r3, #4]
                HAL_UART_DeInit(&huart2);
 80019ca:	4806      	ldr	r0, [pc, #24]	@ (80019e4 <updateBaudrate+0xf0>)
 80019cc:	f003 f8bc 	bl	8004b48 <HAL_UART_DeInit>
                HAL_UART_Init(&huart2);
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <updateBaudrate+0xf0>)
 80019d2:	f003 f869 	bl	8004aa8 <HAL_UART_Init>
                break;
 80019d6:	e000      	b.n	80019da <updateBaudrate+0xe6>
        return;
 80019d8:	bf00      	nop
        }
    }
}
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000214 	.word	0x20000214
 80019e4:	2000064c 	.word	0x2000064c

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ec:	f000 fbe8 	bl	80021c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f0:	f000 f830 	bl	8001a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f4:	f000 f972 	bl	8001cdc <MX_GPIO_Init>
  MX_DMA_Init();
 80019f8:	f000 f952 	bl	8001ca0 <MX_DMA_Init>
  MX_TIM2_Init();
 80019fc:	f000 f8da 	bl	8001bb4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001a00:	f000 f924 	bl	8001c4c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001a04:	f000 f880 	bl	8001b08 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initializeModbusRegisters();
 8001a08:	f7ff fb18 	bl	800103c <initializeModbusRegisters>
  Safety_Monitor_Init();
 8001a0c:	f7fe feaa 	bl	8000764 <Safety_Monitor_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a10:	f003 fffe 	bl	8005a10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001a14:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <main+0x54>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	4809      	ldr	r0, [pc, #36]	@ (8001a40 <main+0x58>)
 8001a1a:	f004 f841 	bl	8005aa0 <osThreadNew>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a08      	ldr	r2, [pc, #32]	@ (8001a44 <main+0x5c>)
 8001a22:	6013      	str	r3, [r2, #0]

  /* creation of modbusTask */
  modbusTaskHandle = osThreadNew(StartModbusTask, NULL, &modbusTask_attributes);
 8001a24:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <main+0x60>)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <main+0x64>)
 8001a2a:	f004 f839 	bl	8005aa0 <osThreadNew>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <main+0x68>)
 8001a32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a34:	f004 f80e 	bl	8005a54 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <main+0x50>
 8001a3c:	08008e28 	.word	0x08008e28
 8001a40:	08001d8d 	.word	0x08001d8d
 8001a44:	20000694 	.word	0x20000694
 8001a48:	08008e4c 	.word	0x08008e4c
 8001a4c:	08001db1 	.word	0x08001db1
 8001a50:	20000698 	.word	0x20000698

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	@ 0x50
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a5e:	2228      	movs	r2, #40	@ 0x28
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f006 fce8 	bl	8008438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	1d3b      	adds	r3, r7, #4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a84:	2301      	movs	r3, #1
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a92:	2301      	movs	r3, #1
 8001a94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a96:	2302      	movs	r3, #2
 8001a98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aa4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fed9 	bl	8003860 <HAL_RCC_OscConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001ab4:	f000 f9ae 	bl	8001e14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ab8:	230f      	movs	r3, #15
 8001aba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ac4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ac8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 f945 	bl	8003d64 <HAL_RCC_ClockConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001ae0:	f000 f998 	bl	8001e14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 fac6 	bl	8004080 <HAL_RCCEx_PeriphCLKConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001afa:	f000 f98b 	bl	8001e14 <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	3750      	adds	r7, #80	@ 0x50
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b18:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b1a:	4a25      	ldr	r2, [pc, #148]	@ (8001bb0 <MX_ADC1_Init+0xa8>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001b1e:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b26:	4b21      	ldr	r3, [pc, #132]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b34:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001b38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001b40:	4b1a      	ldr	r3, [pc, #104]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b42:	2204      	movs	r2, #4
 8001b44:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b46:	4819      	ldr	r0, [pc, #100]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b48:	f000 fb9c 	bl	8002284 <HAL_ADC_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001b52:	f000 f95f 	bl	8001e14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001b56:	2307      	movs	r3, #7
 8001b58:	60fb      	str	r3, [r7, #12]

  sConfig.Channel = ADC_CHANNEL_0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4811      	ldr	r0, [pc, #68]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b68:	f000 fd5e 	bl	8002628 <HAL_ADC_ConfigChannel>

  sConfig.Channel = ADC_CHANNEL_1;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4619      	mov	r1, r3
 8001b78:	480c      	ldr	r0, [pc, #48]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b7a:	f000 fd55 	bl	8002628 <HAL_ADC_ConfigChannel>

  sConfig.Channel = ADC_CHANNEL_4;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001b82:	2303      	movs	r3, #3
 8001b84:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4808      	ldr	r0, [pc, #32]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b8c:	f000 fd4c 	bl	8002628 <HAL_ADC_ConfigChannel>

  sConfig.Channel = ADC_CHANNEL_8;
 8001b90:	2308      	movs	r3, #8
 8001b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001b94:	2304      	movs	r3, #4
 8001b96:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4803      	ldr	r0, [pc, #12]	@ (8001bac <MX_ADC1_Init+0xa4>)
 8001b9e:	f000 fd43 	bl	8002628 <HAL_ADC_ConfigChannel>
 /* USER CODE BEGIN ADC1_Init 2 */

 /* USER CODE END ADC1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000590 	.word	0x20000590
 8001bb0:	40012400 	.word	0x40012400

08001bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001be4:	4b18      	ldr	r3, [pc, #96]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001be6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bf8:	4813      	ldr	r0, [pc, #76]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001bfa:	f002 fbad 	bl	8004358 <HAL_TIM_Base_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c04:	f000 f906 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c0e:	f107 0308 	add.w	r3, r7, #8
 8001c12:	4619      	mov	r1, r3
 8001c14:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001c16:	f002 fcde 	bl	80045d6 <HAL_TIM_ConfigClockSource>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c20:	f000 f8f8 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <MX_TIM2_Init+0x94>)
 8001c32:	f002 fec9 	bl	80049c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c3c:	f000 f8ea 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000604 	.word	0x20000604

08001c4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <MX_USART2_UART_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	@ (8001c98 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f002 ff10 	bl	8004aa8 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f000 f8c1 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2000064c 	.word	0x2000064c
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <MX_DMA_Init+0x38>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd8 <MX_DMA_Init+0x38>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <MX_DMA_Init+0x38>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	200b      	movs	r0, #11
 8001cc4:	f001 f853 	bl	8002d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001cc8:	200b      	movs	r0, #11
 8001cca:	f001 f86c 	bl	8002da6 <HAL_NVIC_EnableIRQ>

}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce2:	f107 0310 	add.w	r3, r7, #16
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cf0:	4b24      	ldr	r3, [pc, #144]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a23      	ldr	r2, [pc, #140]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001cf6:	f043 0320 	orr.w	r3, r3, #32
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	4b1e      	ldr	r3, [pc, #120]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001d0e:	f043 0304 	orr.w	r3, r3, #4
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <MX_GPIO_Init+0xa8>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|RELAY2_Pin|RELAY1_Pin, GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 6143 	mov.w	r1, #3120	@ 0xc30
 8001d3e:	4812      	ldr	r0, [pc, #72]	@ (8001d88 <MX_GPIO_Init+0xac>)
 8001d40:	f001 fd5d 	bl	80037fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin RELAY2_Pin RELAY1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|RELAY2_Pin|RELAY1_Pin;
 8001d44:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2302      	movs	r3, #2
 8001d54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	480a      	ldr	r0, [pc, #40]	@ (8001d88 <MX_GPIO_Init+0xac>)
 8001d5e:	f001 faf7 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin;
 8001d62:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	4619      	mov	r1, r3
 8001d76:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <MX_GPIO_Init+0xac>)
 8001d78:	f001 faea 	bl	8003350 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d7c:	bf00      	nop
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010c00 	.word	0x40010c00

08001d8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  { 
    Safety_Register_Load();
 8001d94:	f7fe fe84 	bl	8000aa0 <Safety_Register_Load>
    updateBaudrate();
 8001d98:	f7ff fdac 	bl	80018f4 <updateBaudrate>
    Safety_Monitor_Process();
 8001d9c:	f7fe fd90 	bl	80008c0 <Safety_Monitor_Process>
    Safety_Register_Save();
 8001da0:	f7fe feee 	bl	8000b80 <Safety_Register_Save>
    osDelay(1);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f003 ff0d 	bl	8005bc4 <osDelay>
    Safety_Register_Load();
 8001daa:	bf00      	nop
 8001dac:	e7f2      	b.n	8001d94 <StartDefaultTask+0x8>
	...

08001db0 <StartModbusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartModbusTask */
void StartModbusTask(void *argument)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModbusTask */
  /* Infinite loop */
  for(;;)
  {
    // Update Modbus counter
    g_modbusCounter++;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <StartModbusTask+0x54>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	4a11      	ldr	r2, [pc, #68]	@ (8001e04 <StartModbusTask+0x54>)
 8001dc0:	6013      	str	r3, [r2, #0]
    
    // Check for UART timeout (10 seconds)
    if (HAL_GetTick() - g_lastUARTActivity > 10000) {
 8001dc2:	f000 fa55 	bl	8002270 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <StartModbusTask+0x58>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d906      	bls.n	8001de4 <StartModbusTask+0x34>
      resetUARTCommunication();
 8001dd6:	f7ff fabf 	bl	8001358 <resetUARTCommunication>
      g_lastUARTActivity = HAL_GetTick();
 8001dda:	f000 fa49 	bl	8002270 <HAL_GetTick>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a09      	ldr	r2, [pc, #36]	@ (8001e08 <StartModbusTask+0x58>)
 8001de2:	6013      	str	r3, [r2, #0]
    }
    
    // Process Modbus frame if received
    if (frameReceived) {
 8001de4:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <StartModbusTask+0x5c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <StartModbusTask+0x40>
      processModbusFrame();
 8001dec:	f7ff face 	bl	800138c <processModbusFrame>
    }
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001df0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001df4:	4806      	ldr	r0, [pc, #24]	@ (8001e10 <StartModbusTask+0x60>)
 8001df6:	f001 fd1a 	bl	800382e <HAL_GPIO_TogglePin>
    osDelay(100); // 100ms delay
 8001dfa:	2064      	movs	r0, #100	@ 0x64
 8001dfc:	f003 fee2 	bl	8005bc4 <osDelay>
    g_modbusCounter++;
 8001e00:	e7da      	b.n	8001db8 <StartModbusTask+0x8>
 8001e02:	bf00      	nop
 8001e04:	20000484 	.word	0x20000484
 8001e08:	2000058c 	.word	0x2000058c
 8001e0c:	20000589 	.word	0x20000589
 8001e10:	40010c00 	.word	0x40010c00

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e1c:	bf00      	nop
 8001e1e:	e7fd      	b.n	8001e1c <Error_Handler+0x8>

08001e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e26:	4b1c      	ldr	r3, [pc, #112]	@ (8001e98 <HAL_MspInit+0x78>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e98 <HAL_MspInit+0x78>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6193      	str	r3, [r2, #24]
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_MspInit+0x78>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_MspInit+0x78>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a15      	ldr	r2, [pc, #84]	@ (8001e98 <HAL_MspInit+0x78>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_MspInit+0x78>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	210f      	movs	r1, #15
 8001e5a:	f06f 0001 	mvn.w	r0, #1
 8001e5e:	f000 ff86 	bl	8002d6e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2105      	movs	r1, #5
 8001e66:	2005      	movs	r0, #5
 8001e68:	f000 ff81 	bl	8002d6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e6c:	2005      	movs	r0, #5
 8001e6e:	f000 ff9a 	bl	8002da6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_MspInit+0x7c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <HAL_MspInit+0x7c>)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000

08001ea0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0318 	add.w	r3, r7, #24
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a34      	ldr	r2, [pc, #208]	@ (8001f8c <HAL_ADC_MspInit+0xec>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d160      	bne.n	8001f82 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ec0:	4b33      	ldr	r3, [pc, #204]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a32      	ldr	r2, [pc, #200]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b30      	ldr	r3, [pc, #192]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a2c      	ldr	r2, [pc, #176]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <HAL_ADC_MspInit+0xf0>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = AI4_Pin|AI3_Pin|AI2_Pin;
 8001f08:	2313      	movs	r3, #19
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 0318 	add.w	r3, r7, #24
 8001f14:	4619      	mov	r1, r3
 8001f16:	481f      	ldr	r0, [pc, #124]	@ (8001f94 <HAL_ADC_MspInit+0xf4>)
 8001f18:	f001 fa1a 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AI1_Pin;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f20:	2303      	movs	r3, #3
 8001f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AI1_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481b      	ldr	r0, [pc, #108]	@ (8001f98 <HAL_ADC_MspInit+0xf8>)
 8001f2c:	f001 fa10 	bl	8003350 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f32:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa0 <HAL_ADC_MspInit+0x100>)
 8001f34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b16      	ldr	r3, [pc, #88]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f44:	2280      	movs	r2, #128	@ 0x80
 8001f46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f48:	4b14      	ldr	r3, [pc, #80]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f50:	4b12      	ldr	r3, [pc, #72]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f58:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f66:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f68:	f000 ff46 	bl	8002df8 <HAL_DMA_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8001f72:	f7ff ff4f 	bl	8001e14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a08      	ldr	r2, [pc, #32]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f7a:	621a      	str	r2, [r3, #32]
 8001f7c:	4a07      	ldr	r2, [pc, #28]	@ (8001f9c <HAL_ADC_MspInit+0xfc>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	@ 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40012400 	.word	0x40012400
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40010800 	.word	0x40010800
 8001f98:	40010c00 	.word	0x40010c00
 8001f9c:	200005c0 	.word	0x200005c0
 8001fa0:	40020008 	.word	0x40020008

08001fa4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb4:	d113      	bne.n	8001fde <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x44>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x44>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x44>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	201c      	movs	r0, #28
 8001fd4:	f000 fecb 	bl	8002d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd8:	201c      	movs	r0, #28
 8001fda:	f000 fee4 	bl	8002da6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b088      	sub	sp, #32
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a1f      	ldr	r2, [pc, #124]	@ (8002084 <HAL_UART_MspInit+0x98>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d137      	bne.n	800207c <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800200c:	4b1e      	ldr	r3, [pc, #120]	@ (8002088 <HAL_UART_MspInit+0x9c>)
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_UART_MspInit+0x9c>)
 8002012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002016:	61d3      	str	r3, [r2, #28]
 8002018:	4b1b      	ldr	r3, [pc, #108]	@ (8002088 <HAL_UART_MspInit+0x9c>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <HAL_UART_MspInit+0x9c>)
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_UART_MspInit+0x9c>)
 800202a:	f043 0304 	orr.w	r3, r3, #4
 800202e:	6193      	str	r3, [r2, #24]
 8002030:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_UART_MspInit+0x9c>)
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800203c:	2304      	movs	r3, #4
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 0310 	add.w	r3, r7, #16
 800204c:	4619      	mov	r1, r3
 800204e:	480f      	ldr	r0, [pc, #60]	@ (800208c <HAL_UART_MspInit+0xa0>)
 8002050:	f001 f97e 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002054:	2308      	movs	r3, #8
 8002056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	4809      	ldr	r0, [pc, #36]	@ (800208c <HAL_UART_MspInit+0xa0>)
 8002068:	f001 f972 	bl	8003350 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800206c:	2200      	movs	r2, #0
 800206e:	2105      	movs	r1, #5
 8002070:	2026      	movs	r0, #38	@ 0x26
 8002072:	f000 fe7c 	bl	8002d6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002076:	2026      	movs	r0, #38	@ 0x26
 8002078:	f000 fe95 	bl	8002da6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800207c:	bf00      	nop
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40004400 	.word	0x40004400
 8002088:	40021000 	.word	0x40021000
 800208c:	40010800 	.word	0x40010800

08002090 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a09      	ldr	r2, [pc, #36]	@ (80020c4 <HAL_UART_MspDeInit+0x34>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <HAL_UART_MspDeInit+0x38>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a08      	ldr	r2, [pc, #32]	@ (80020c8 <HAL_UART_MspDeInit+0x38>)
 80020a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80020ac:	61d3      	str	r3, [r2, #28]

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80020ae:	210c      	movs	r1, #12
 80020b0:	4806      	ldr	r0, [pc, #24]	@ (80020cc <HAL_UART_MspDeInit+0x3c>)
 80020b2:	f001 fad1 	bl	8003658 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80020b6:	2026      	movs	r0, #38	@ 0x26
 80020b8:	f000 fe83 	bl	8002dc2 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40004400 	.word	0x40004400
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010800 	.word	0x40010800

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d4:	bf00      	nop
 80020d6:	e7fd      	b.n	80020d4 <NMI_Handler+0x4>

080020d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020dc:	bf00      	nop
 80020de:	e7fd      	b.n	80020dc <HardFault_Handler+0x4>

080020e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e4:	bf00      	nop
 80020e6:	e7fd      	b.n	80020e4 <MemManage_Handler+0x4>

080020e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f000 f8a0 	bl	800224c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800210c:	f005 f978 	bl	8007400 <xTaskGetSchedulerState>
 8002110:	4603      	mov	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	d001      	beq.n	800211a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002116:	f005 ff1f 	bl	8007f58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}

0800211e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
	...

0800212c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002130:	4802      	ldr	r0, [pc, #8]	@ (800213c <DMA1_Channel1_IRQHandler+0x10>)
 8002132:	f000 ffcf 	bl	80030d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200005c0 	.word	0x200005c0

08002140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002144:	4802      	ldr	r0, [pc, #8]	@ (8002150 <TIM2_IRQHandler+0x10>)
 8002146:	f002 f956 	bl	80043f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20000604 	.word	0x20000604

08002154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <USART2_IRQHandler+0x10>)
 800215a:	f002 fec3 	bl	8004ee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000064c 	.word	0x2000064c

08002168 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002174:	f7ff fff8 	bl	8002168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480b      	ldr	r0, [pc, #44]	@ (80021a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800217a:	490c      	ldr	r1, [pc, #48]	@ (80021ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800217c:	4a0c      	ldr	r2, [pc, #48]	@ (80021b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a09      	ldr	r2, [pc, #36]	@ (80021b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002190:	4c09      	ldr	r4, [pc, #36]	@ (80021b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219e:	f006 f959 	bl	8008454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a2:	f7ff fc21 	bl	80019e8 <main>
  bx lr
 80021a6:	4770      	bx	lr
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80021b0:	08008ed8 	.word	0x08008ed8
  ldr r2, =_sbss
 80021b4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80021b8:	20002128 	.word	0x20002128

080021bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC1_2_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c4:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_Init+0x28>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a07      	ldr	r2, [pc, #28]	@ (80021e8 <HAL_Init+0x28>)
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d0:	2003      	movs	r0, #3
 80021d2:	f000 fdc1 	bl	8002d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d6:	200f      	movs	r0, #15
 80021d8:	f000 f808 	bl	80021ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021dc:	f7ff fe20 	bl	8001e20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40022000 	.word	0x40022000

080021ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f4:	4b12      	ldr	r3, [pc, #72]	@ (8002240 <HAL_InitTick+0x54>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <HAL_InitTick+0x58>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	4619      	mov	r1, r3
 80021fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002202:	fbb3 f3f1 	udiv	r3, r3, r1
 8002206:	fbb2 f3f3 	udiv	r3, r2, r3
 800220a:	4618      	mov	r0, r3
 800220c:	f000 fde7 	bl	8002dde <HAL_SYSTICK_Config>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e00e      	b.n	8002238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b0f      	cmp	r3, #15
 800221e:	d80a      	bhi.n	8002236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002220:	2200      	movs	r2, #0
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f000 fda1 	bl	8002d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800222c:	4a06      	ldr	r2, [pc, #24]	@ (8002248 <HAL_InitTick+0x5c>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e000      	b.n	8002238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000004 	.word	0x20000004
 8002244:	2000000c 	.word	0x2000000c
 8002248:	20000008 	.word	0x20000008

0800224c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_IncTick+0x1c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	461a      	mov	r2, r3
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_IncTick+0x20>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4413      	add	r3, r2
 800225c:	4a03      	ldr	r2, [pc, #12]	@ (800226c <HAL_IncTick+0x20>)
 800225e:	6013      	str	r3, [r2, #0]
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	2000000c 	.word	0x2000000c
 800226c:	2000069c 	.word	0x2000069c

08002270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b02      	ldr	r3, [pc, #8]	@ (8002280 <HAL_GetTick+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	2000069c 	.word	0x2000069c

08002284 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0be      	b.n	8002424 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d109      	bne.n	80022c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fdec 	bl	8001ea0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 faff 	bl	80028cc <ADC_ConversionStop_Disable>
 80022ce:	4603      	mov	r3, r0
 80022d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 8099 	bne.w	8002412 <HAL_ADC_Init+0x18e>
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8095 	bne.w	8002412 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80022f0:	f023 0302 	bic.w	r3, r3, #2
 80022f4:	f043 0202 	orr.w	r2, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002304:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7b1b      	ldrb	r3, [r3, #12]
 800230a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800230c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	4313      	orrs	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800231c:	d003      	beq.n	8002326 <HAL_ADC_Init+0xa2>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <HAL_ADC_Init+0xa8>
 8002326:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800232a:	e000      	b.n	800232e <HAL_ADC_Init+0xaa>
 800232c:	2300      	movs	r3, #0
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	7d1b      	ldrb	r3, [r3, #20]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d119      	bne.n	8002370 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7b1b      	ldrb	r3, [r3, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	3b01      	subs	r3, #1
 800234a:	035a      	lsls	r2, r3, #13
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e00b      	b.n	8002370 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	f043 0220 	orr.w	r2, r3, #32
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002368:	f043 0201 	orr.w	r2, r3, #1
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	430a      	orrs	r2, r1
 8002382:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	4b28      	ldr	r3, [pc, #160]	@ (800242c <HAL_ADC_Init+0x1a8>)
 800238c:	4013      	ands	r3, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	430b      	orrs	r3, r1
 8002396:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a0:	d003      	beq.n	80023aa <HAL_ADC_Init+0x126>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d104      	bne.n	80023b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	051b      	lsls	r3, r3, #20
 80023b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <HAL_ADC_Init+0x1ac>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10b      	bne.n	80023f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	f023 0303 	bic.w	r3, r3, #3
 80023e6:	f043 0201 	orr.w	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023ee:	e018      	b.n	8002422 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	f023 0312 	bic.w	r3, r3, #18
 80023f8:	f043 0210 	orr.w	r2, r3, #16
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002404:	f043 0201 	orr.w	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002410:	e007      	b.n	8002422 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	f043 0210 	orr.w	r2, r3, #16
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002422:	7dfb      	ldrb	r3, [r7, #23]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	ffe1f7fd 	.word	0xffe1f7fd
 8002430:	ff1f0efe 	.word	0xff1f0efe

08002434 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a64      	ldr	r2, [pc, #400]	@ (80025dc <HAL_ADC_Start_DMA+0x1a8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_ADC_Start_DMA+0x24>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a63      	ldr	r2, [pc, #396]	@ (80025e0 <HAL_ADC_Start_DMA+0x1ac>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d106      	bne.n	8002466 <HAL_ADC_Start_DMA+0x32>
 8002458:	4b60      	ldr	r3, [pc, #384]	@ (80025dc <HAL_ADC_Start_DMA+0x1a8>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f040 80b3 	bne.w	80025cc <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_ADC_Start_DMA+0x40>
 8002470:	2302      	movs	r3, #2
 8002472:	e0ae      	b.n	80025d2 <HAL_ADC_Start_DMA+0x19e>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f9cb 	bl	8002818 <ADC_Enable>
 8002482:	4603      	mov	r3, r0
 8002484:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002486:	7dfb      	ldrb	r3, [r7, #23]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 809a 	bne.w	80025c2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a4e      	ldr	r2, [pc, #312]	@ (80025e0 <HAL_ADC_Start_DMA+0x1ac>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_Start_DMA+0x84>
 80024ac:	4b4b      	ldr	r3, [pc, #300]	@ (80025dc <HAL_ADC_Start_DMA+0x1a8>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d115      	bne.n	80024e4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d026      	beq.n	8002520 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024e2:	e01d      	b.n	8002520 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a39      	ldr	r2, [pc, #228]	@ (80025dc <HAL_ADC_Start_DMA+0x1a8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_ADC_Start_DMA+0xd0>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a38      	ldr	r2, [pc, #224]	@ (80025e0 <HAL_ADC_Start_DMA+0x1ac>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d10d      	bne.n	8002520 <HAL_ADC_Start_DMA+0xec>
 8002504:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <HAL_ADC_Start_DMA+0x1a8>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d007      	beq.n	8002520 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002514:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002518:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002530:	f023 0206 	bic.w	r2, r3, #6
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002538:	e002      	b.n	8002540 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4a25      	ldr	r2, [pc, #148]	@ (80025e4 <HAL_ADC_Start_DMA+0x1b0>)
 800254e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <HAL_ADC_Start_DMA+0x1b4>)
 8002556:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4a23      	ldr	r2, [pc, #140]	@ (80025ec <HAL_ADC_Start_DMA+0x1b8>)
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0202 	mvn.w	r2, #2
 8002568:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002578:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a18      	ldr	r0, [r3, #32]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	334c      	adds	r3, #76	@ 0x4c
 8002584:	4619      	mov	r1, r3
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f000 fc8f 	bl	8002eac <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002598:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800259c:	d108      	bne.n	80025b0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80025ac:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025ae:	e00f      	b.n	80025d0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80025be:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80025c0:	e006      	b.n	80025d0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80025ca:	e001      	b.n	80025d0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40012400 	.word	0x40012400
 80025e0:	40012800 	.word	0x40012800
 80025e4:	0800294f 	.word	0x0800294f
 80025e8:	080029cb 	.word	0x080029cb
 80025ec:	080029e7 	.word	0x080029e7

080025f0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
	...

08002628 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x20>
 8002644:	2302      	movs	r3, #2
 8002646:	e0dc      	b.n	8002802 <HAL_ADC_ConfigChannel+0x1da>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b06      	cmp	r3, #6
 8002656:	d81c      	bhi.n	8002692 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	3b05      	subs	r3, #5
 800266a:	221f      	movs	r2, #31
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	4019      	ands	r1, r3
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685a      	ldr	r2, [r3, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	3b05      	subs	r3, #5
 8002684:	fa00 f203 	lsl.w	r2, r0, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002690:	e03c      	b.n	800270c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d81c      	bhi.n	80026d4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	3b23      	subs	r3, #35	@ 0x23
 80026ac:	221f      	movs	r2, #31
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	4019      	ands	r1, r3
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	3b23      	subs	r3, #35	@ 0x23
 80026c6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80026d2:	e01b      	b.n	800270c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b41      	subs	r3, #65	@ 0x41
 80026e6:	221f      	movs	r2, #31
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	4019      	ands	r1, r3
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	3b41      	subs	r3, #65	@ 0x41
 8002700:	fa00 f203 	lsl.w	r2, r0, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	430a      	orrs	r2, r1
 800270a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b09      	cmp	r3, #9
 8002712:	d91c      	bls.n	800274e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68d9      	ldr	r1, [r3, #12]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	3b1e      	subs	r3, #30
 8002726:	2207      	movs	r2, #7
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	4019      	ands	r1, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	6898      	ldr	r0, [r3, #8]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4413      	add	r3, r2
 800273e:	3b1e      	subs	r3, #30
 8002740:	fa00 f203 	lsl.w	r2, r0, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	e019      	b.n	8002782 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6919      	ldr	r1, [r3, #16]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4613      	mov	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4413      	add	r3, r2
 800275e:	2207      	movs	r2, #7
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	4019      	ands	r1, r3
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6898      	ldr	r0, [r3, #8]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	fa00 f203 	lsl.w	r2, r0, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d003      	beq.n	8002792 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800278e:	2b11      	cmp	r3, #17
 8002790:	d132      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <HAL_ADC_ConfigChannel+0x1e4>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d125      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d126      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027b8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d11a      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027c2:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_ADC_ConfigChannel+0x1e8>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a13      	ldr	r2, [pc, #76]	@ (8002814 <HAL_ADC_ConfigChannel+0x1ec>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	0c9a      	lsrs	r2, r3, #18
 80027ce:	4613      	mov	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027d8:	e002      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f9      	bne.n	80027da <HAL_ADC_ConfigChannel+0x1b2>
 80027e6:	e007      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002800:	7bfb      	ldrb	r3, [r7, #15]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	40012400 	.word	0x40012400
 8002810:	20000004 	.word	0x20000004
 8002814:	431bde83 	.word	0x431bde83

08002818 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b01      	cmp	r3, #1
 8002834:	d040      	beq.n	80028b8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002846:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <ADC_Enable+0xac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1f      	ldr	r2, [pc, #124]	@ (80028c8 <ADC_Enable+0xb0>)
 800284c:	fba2 2303 	umull	r2, r3, r2, r3
 8002850:	0c9b      	lsrs	r3, r3, #18
 8002852:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002854:	e002      	b.n	800285c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	3b01      	subs	r3, #1
 800285a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f9      	bne.n	8002856 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002862:	f7ff fd05 	bl	8002270 <HAL_GetTick>
 8002866:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002868:	e01f      	b.n	80028aa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800286a:	f7ff fd01 	bl	8002270 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d918      	bls.n	80028aa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b01      	cmp	r3, #1
 8002884:	d011      	beq.n	80028aa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288a:	f043 0210 	orr.w	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d1d8      	bne.n	800286a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000004 	.word	0x20000004
 80028c8:	431bde83 	.word	0x431bde83

080028cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d12e      	bne.n	8002944 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0201 	bic.w	r2, r2, #1
 80028f4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028f6:	f7ff fcbb 	bl	8002270 <HAL_GetTick>
 80028fa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028fc:	e01b      	b.n	8002936 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028fe:	f7ff fcb7 	bl	8002270 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d914      	bls.n	8002936 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d10d      	bne.n	8002936 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800291e:	f043 0210 	orr.w	r2, r3, #16
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	f043 0201 	orr.w	r2, r3, #1
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e007      	b.n	8002946 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b01      	cmp	r3, #1
 8002942:	d0dc      	beq.n	80028fe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002960:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002964:	2b00      	cmp	r3, #0
 8002966:	d127      	bne.n	80029b8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800297e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002982:	d115      	bne.n	80029b0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff fe1d 	bl	80025f0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80029b6:	e004      	b.n	80029c2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
}
 80029c2:	bf00      	nop
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f7ff fe12 	bl	8002602 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f7ff fe01 	bl	8002614 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002a1c:	b590      	push	{r4, r7, lr}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADCEx_Calibration_Start+0x1e>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e097      	b.n	8002b6a <HAL_ADCEx_Calibration_Start+0x14e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff42 	bl	80028cc <ADC_ConversionStop_Disable>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff fee3 	bl	8002818 <ADC_Enable>
 8002a52:	4603      	mov	r3, r0
 8002a54:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f040 8081 	bne.w	8002b60 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a66:	f023 0302 	bic.w	r3, r3, #2
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a72:	4b40      	ldr	r3, [pc, #256]	@ (8002b74 <HAL_ADCEx_Calibration_Start+0x158>)
 8002a74:	681c      	ldr	r4, [r3, #0]
 8002a76:	2002      	movs	r0, #2
 8002a78:	f001 fbb8 	bl	80041ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002a82:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002a84:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002a86:	e002      	b.n	8002a8e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0208 	orr.w	r2, r2, #8
 8002aa2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002aa4:	f7ff fbe4 	bl	8002270 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aaa:	e01b      	b.n	8002ae4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002aac:	f7ff fbe0 	bl	8002270 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b0a      	cmp	r3, #10
 8002ab8:	d914      	bls.n	8002ae4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	f023 0312 	bic.w	r3, r3, #18
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e042      	b.n	8002b6a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1dc      	bne.n	8002aac <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0204 	orr.w	r2, r2, #4
 8002b00:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b02:	f7ff fbb5 	bl	8002270 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b08:	e01b      	b.n	8002b42 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b0a:	f7ff fbb1 	bl	8002270 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b0a      	cmp	r3, #10
 8002b16:	d914      	bls.n	8002b42 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	f023 0312 	bic.w	r3, r3, #18
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e013      	b.n	8002b6a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0304 	and.w	r3, r3, #4
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1dc      	bne.n	8002b0a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b54:	f023 0303 	bic.w	r3, r3, #3
 8002b58:	f043 0201 	orr.w	r2, r3, #1
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd90      	pop	{r4, r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000004 	.word	0x20000004

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4906      	ldr	r1, [pc, #24]	@ (8002c10 <__NVIC_EnableIRQ+0x34>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db12      	blt.n	8002c4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	490a      	ldr	r1, [pc, #40]	@ (8002c58 <__NVIC_DisableIRQ+0x44>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	3320      	adds	r3, #32
 8002c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c40:	f3bf 8f4f 	dsb	sy
}
 8002c44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c46:	f3bf 8f6f 	isb	sy
}
 8002c4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	6039      	str	r1, [r7, #0]
 8002c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	db0a      	blt.n	8002c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	490c      	ldr	r1, [pc, #48]	@ (8002ca8 <__NVIC_SetPriority+0x4c>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	0112      	lsls	r2, r2, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c84:	e00a      	b.n	8002c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4908      	ldr	r1, [pc, #32]	@ (8002cac <__NVIC_SetPriority+0x50>)
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	3b04      	subs	r3, #4
 8002c94:	0112      	lsls	r2, r2, #4
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	440b      	add	r3, r1
 8002c9a:	761a      	strb	r2, [r3, #24]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000e100 	.word	0xe000e100
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	@ 0x24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f1c3 0307 	rsb	r3, r3, #7
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	bf28      	it	cs
 8002cce:	2304      	movcs	r3, #4
 8002cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d902      	bls.n	8002ce0 <NVIC_EncodePriority+0x30>
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3b03      	subs	r3, #3
 8002cde:	e000      	b.n	8002ce2 <NVIC_EncodePriority+0x32>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43da      	mvns	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43d9      	mvns	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	4313      	orrs	r3, r2
         );
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d24:	d301      	bcc.n	8002d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00f      	b.n	8002d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d54 <SysTick_Config+0x40>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d32:	210f      	movs	r1, #15
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295
 8002d38:	f7ff ff90 	bl	8002c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <SysTick_Config+0x40>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d42:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <SysTick_Config+0x40>)
 8002d44:	2207      	movs	r2, #7
 8002d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	e000e010 	.word	0xe000e010

08002d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ff09 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b086      	sub	sp, #24
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
 8002d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d80:	f7ff ff1e 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f7ff ff90 	bl	8002cb0 <NVIC_EncodePriority>
 8002d90:	4602      	mov	r2, r0
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff5f 	bl	8002c5c <__NVIC_SetPriority>
}
 8002d9e:	bf00      	nop
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff11 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff1f 	bl	8002c14 <__NVIC_DisableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ff94 	bl	8002d14 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e043      	b.n	8002e96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <HAL_DMA_Init+0xa8>)
 8002e16:	4413      	add	r3, r2
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_DMA_Init+0xac>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	009a      	lsls	r2, r3, #2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea8 <HAL_DMA_Init+0xb0>)
 8002e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e42:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	bffdfff8 	.word	0xbffdfff8
 8002ea4:	cccccccd 	.word	0xcccccccd
 8002ea8:	40020000 	.word	0x40020000

08002eac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_DMA_Start_IT+0x20>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e04b      	b.n	8002f64 <HAL_DMA_Start_IT+0xb8>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d13a      	bne.n	8002f56 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0201 	bic.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f9f6 	bl	80032f6 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d008      	beq.n	8002f24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 020e 	orr.w	r2, r2, #14
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e00f      	b.n	8002f44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0204 	bic.w	r2, r2, #4
 8002f32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 020a 	orr.w	r2, r2, #10
 8002f42:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0201 	orr.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	e005      	b.n	8002f62 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d008      	beq.n	8002f96 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2204      	movs	r2, #4
 8002f88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e020      	b.n	8002fd8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 020e 	bic.w	r2, r2, #14
 8002fa4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d005      	beq.n	8003008 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2204      	movs	r2, #4
 8003000:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
 8003006:	e051      	b.n	80030ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 020e 	bic.w	r2, r2, #14
 8003016:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0201 	bic.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a22      	ldr	r2, [pc, #136]	@ (80030b8 <HAL_DMA_Abort_IT+0xd4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d029      	beq.n	8003086 <HAL_DMA_Abort_IT+0xa2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a21      	ldr	r2, [pc, #132]	@ (80030bc <HAL_DMA_Abort_IT+0xd8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <HAL_DMA_Abort_IT+0x9e>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	@ (80030c0 <HAL_DMA_Abort_IT+0xdc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d01a      	beq.n	800307c <HAL_DMA_Abort_IT+0x98>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	@ (80030c4 <HAL_DMA_Abort_IT+0xe0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d012      	beq.n	8003076 <HAL_DMA_Abort_IT+0x92>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	@ (80030c8 <HAL_DMA_Abort_IT+0xe4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00a      	beq.n	8003070 <HAL_DMA_Abort_IT+0x8c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	@ (80030cc <HAL_DMA_Abort_IT+0xe8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d102      	bne.n	800306a <HAL_DMA_Abort_IT+0x86>
 8003064:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003068:	e00e      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 800306a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800306e:	e00b      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003070:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003074:	e008      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003076:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800307a:	e005      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 800307c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003080:	e002      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003082:	2310      	movs	r3, #16
 8003084:	e000      	b.n	8003088 <HAL_DMA_Abort_IT+0xa4>
 8003086:	2301      	movs	r3, #1
 8003088:	4a11      	ldr	r2, [pc, #68]	@ (80030d0 <HAL_DMA_Abort_IT+0xec>)
 800308a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
    } 
  }
  return status;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40020008 	.word	0x40020008
 80030bc:	4002001c 	.word	0x4002001c
 80030c0:	40020030 	.word	0x40020030
 80030c4:	40020044 	.word	0x40020044
 80030c8:	40020058 	.word	0x40020058
 80030cc:	4002006c 	.word	0x4002006c
 80030d0:	40020000 	.word	0x40020000

080030d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	2204      	movs	r2, #4
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d04f      	beq.n	800319c <HAL_DMA_IRQHandler+0xc8>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	d04a      	beq.n	800319c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d107      	bne.n	8003124 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0204 	bic.w	r2, r2, #4
 8003122:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a66      	ldr	r2, [pc, #408]	@ (80032c4 <HAL_DMA_IRQHandler+0x1f0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d029      	beq.n	8003182 <HAL_DMA_IRQHandler+0xae>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a65      	ldr	r2, [pc, #404]	@ (80032c8 <HAL_DMA_IRQHandler+0x1f4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d022      	beq.n	800317e <HAL_DMA_IRQHandler+0xaa>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a63      	ldr	r2, [pc, #396]	@ (80032cc <HAL_DMA_IRQHandler+0x1f8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01a      	beq.n	8003178 <HAL_DMA_IRQHandler+0xa4>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a62      	ldr	r2, [pc, #392]	@ (80032d0 <HAL_DMA_IRQHandler+0x1fc>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d012      	beq.n	8003172 <HAL_DMA_IRQHandler+0x9e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a60      	ldr	r2, [pc, #384]	@ (80032d4 <HAL_DMA_IRQHandler+0x200>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00a      	beq.n	800316c <HAL_DMA_IRQHandler+0x98>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a5f      	ldr	r2, [pc, #380]	@ (80032d8 <HAL_DMA_IRQHandler+0x204>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d102      	bne.n	8003166 <HAL_DMA_IRQHandler+0x92>
 8003160:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003164:	e00e      	b.n	8003184 <HAL_DMA_IRQHandler+0xb0>
 8003166:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800316a:	e00b      	b.n	8003184 <HAL_DMA_IRQHandler+0xb0>
 800316c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003170:	e008      	b.n	8003184 <HAL_DMA_IRQHandler+0xb0>
 8003172:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003176:	e005      	b.n	8003184 <HAL_DMA_IRQHandler+0xb0>
 8003178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800317c:	e002      	b.n	8003184 <HAL_DMA_IRQHandler+0xb0>
 800317e:	2340      	movs	r3, #64	@ 0x40
 8003180:	e000      	b.n	8003184 <HAL_DMA_IRQHandler+0xb0>
 8003182:	2304      	movs	r3, #4
 8003184:	4a55      	ldr	r2, [pc, #340]	@ (80032dc <HAL_DMA_IRQHandler+0x208>)
 8003186:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 8094 	beq.w	80032ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800319a:	e08e      	b.n	80032ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	2202      	movs	r2, #2
 80031a2:	409a      	lsls	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d056      	beq.n	800325a <HAL_DMA_IRQHandler+0x186>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d051      	beq.n	800325a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 020a 	bic.w	r2, r2, #10
 80031d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a38      	ldr	r2, [pc, #224]	@ (80032c4 <HAL_DMA_IRQHandler+0x1f0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d029      	beq.n	800323a <HAL_DMA_IRQHandler+0x166>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a37      	ldr	r2, [pc, #220]	@ (80032c8 <HAL_DMA_IRQHandler+0x1f4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d022      	beq.n	8003236 <HAL_DMA_IRQHandler+0x162>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a35      	ldr	r2, [pc, #212]	@ (80032cc <HAL_DMA_IRQHandler+0x1f8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01a      	beq.n	8003230 <HAL_DMA_IRQHandler+0x15c>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a34      	ldr	r2, [pc, #208]	@ (80032d0 <HAL_DMA_IRQHandler+0x1fc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d012      	beq.n	800322a <HAL_DMA_IRQHandler+0x156>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a32      	ldr	r2, [pc, #200]	@ (80032d4 <HAL_DMA_IRQHandler+0x200>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00a      	beq.n	8003224 <HAL_DMA_IRQHandler+0x150>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a31      	ldr	r2, [pc, #196]	@ (80032d8 <HAL_DMA_IRQHandler+0x204>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d102      	bne.n	800321e <HAL_DMA_IRQHandler+0x14a>
 8003218:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800321c:	e00e      	b.n	800323c <HAL_DMA_IRQHandler+0x168>
 800321e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003222:	e00b      	b.n	800323c <HAL_DMA_IRQHandler+0x168>
 8003224:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003228:	e008      	b.n	800323c <HAL_DMA_IRQHandler+0x168>
 800322a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800322e:	e005      	b.n	800323c <HAL_DMA_IRQHandler+0x168>
 8003230:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003234:	e002      	b.n	800323c <HAL_DMA_IRQHandler+0x168>
 8003236:	2320      	movs	r3, #32
 8003238:	e000      	b.n	800323c <HAL_DMA_IRQHandler+0x168>
 800323a:	2302      	movs	r3, #2
 800323c:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <HAL_DMA_IRQHandler+0x208>)
 800323e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d034      	beq.n	80032ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003258:	e02f      	b.n	80032ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2208      	movs	r2, #8
 8003260:	409a      	lsls	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4013      	ands	r3, r2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <HAL_DMA_IRQHandler+0x1e8>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d023      	beq.n	80032bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 020e 	bic.w	r2, r2, #14
 8003282:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d004      	beq.n	80032bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	4798      	blx	r3
    }
  }
  return;
 80032ba:	bf00      	nop
 80032bc:	bf00      	nop
}
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40020008 	.word	0x40020008
 80032c8:	4002001c 	.word	0x4002001c
 80032cc:	40020030 	.word	0x40020030
 80032d0:	40020044 	.word	0x40020044
 80032d4:	40020058 	.word	0x40020058
 80032d8:	4002006c 	.word	0x4002006c
 80032dc:	40020000 	.word	0x40020000

080032e0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b085      	sub	sp, #20
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	2101      	movs	r1, #1
 800330e:	fa01 f202 	lsl.w	r2, r1, r2
 8003312:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b10      	cmp	r3, #16
 8003322:	d108      	bne.n	8003336 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003334:	e007      	b.n	8003346 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	60da      	str	r2, [r3, #12]
}
 8003346:	bf00      	nop
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b08b      	sub	sp, #44	@ 0x2c
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003362:	e169      	b.n	8003638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003364:	2201      	movs	r2, #1
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	429a      	cmp	r2, r3
 800337e:	f040 8158 	bne.w	8003632 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a9a      	ldr	r2, [pc, #616]	@ (80035f0 <HAL_GPIO_Init+0x2a0>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d05e      	beq.n	800344a <HAL_GPIO_Init+0xfa>
 800338c:	4a98      	ldr	r2, [pc, #608]	@ (80035f0 <HAL_GPIO_Init+0x2a0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d875      	bhi.n	800347e <HAL_GPIO_Init+0x12e>
 8003392:	4a98      	ldr	r2, [pc, #608]	@ (80035f4 <HAL_GPIO_Init+0x2a4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d058      	beq.n	800344a <HAL_GPIO_Init+0xfa>
 8003398:	4a96      	ldr	r2, [pc, #600]	@ (80035f4 <HAL_GPIO_Init+0x2a4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d86f      	bhi.n	800347e <HAL_GPIO_Init+0x12e>
 800339e:	4a96      	ldr	r2, [pc, #600]	@ (80035f8 <HAL_GPIO_Init+0x2a8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d052      	beq.n	800344a <HAL_GPIO_Init+0xfa>
 80033a4:	4a94      	ldr	r2, [pc, #592]	@ (80035f8 <HAL_GPIO_Init+0x2a8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d869      	bhi.n	800347e <HAL_GPIO_Init+0x12e>
 80033aa:	4a94      	ldr	r2, [pc, #592]	@ (80035fc <HAL_GPIO_Init+0x2ac>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d04c      	beq.n	800344a <HAL_GPIO_Init+0xfa>
 80033b0:	4a92      	ldr	r2, [pc, #584]	@ (80035fc <HAL_GPIO_Init+0x2ac>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d863      	bhi.n	800347e <HAL_GPIO_Init+0x12e>
 80033b6:	4a92      	ldr	r2, [pc, #584]	@ (8003600 <HAL_GPIO_Init+0x2b0>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d046      	beq.n	800344a <HAL_GPIO_Init+0xfa>
 80033bc:	4a90      	ldr	r2, [pc, #576]	@ (8003600 <HAL_GPIO_Init+0x2b0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d85d      	bhi.n	800347e <HAL_GPIO_Init+0x12e>
 80033c2:	2b12      	cmp	r3, #18
 80033c4:	d82a      	bhi.n	800341c <HAL_GPIO_Init+0xcc>
 80033c6:	2b12      	cmp	r3, #18
 80033c8:	d859      	bhi.n	800347e <HAL_GPIO_Init+0x12e>
 80033ca:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_GPIO_Init+0x80>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	0800344b 	.word	0x0800344b
 80033d4:	08003425 	.word	0x08003425
 80033d8:	08003437 	.word	0x08003437
 80033dc:	08003479 	.word	0x08003479
 80033e0:	0800347f 	.word	0x0800347f
 80033e4:	0800347f 	.word	0x0800347f
 80033e8:	0800347f 	.word	0x0800347f
 80033ec:	0800347f 	.word	0x0800347f
 80033f0:	0800347f 	.word	0x0800347f
 80033f4:	0800347f 	.word	0x0800347f
 80033f8:	0800347f 	.word	0x0800347f
 80033fc:	0800347f 	.word	0x0800347f
 8003400:	0800347f 	.word	0x0800347f
 8003404:	0800347f 	.word	0x0800347f
 8003408:	0800347f 	.word	0x0800347f
 800340c:	0800347f 	.word	0x0800347f
 8003410:	0800347f 	.word	0x0800347f
 8003414:	0800342d 	.word	0x0800342d
 8003418:	08003441 	.word	0x08003441
 800341c:	4a79      	ldr	r2, [pc, #484]	@ (8003604 <HAL_GPIO_Init+0x2b4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003422:	e02c      	b.n	800347e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	623b      	str	r3, [r7, #32]
          break;
 800342a:	e029      	b.n	8003480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	3304      	adds	r3, #4
 8003432:	623b      	str	r3, [r7, #32]
          break;
 8003434:	e024      	b.n	8003480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	3308      	adds	r3, #8
 800343c:	623b      	str	r3, [r7, #32]
          break;
 800343e:	e01f      	b.n	8003480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	330c      	adds	r3, #12
 8003446:	623b      	str	r3, [r7, #32]
          break;
 8003448:	e01a      	b.n	8003480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003452:	2304      	movs	r3, #4
 8003454:	623b      	str	r3, [r7, #32]
          break;
 8003456:	e013      	b.n	8003480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003460:	2308      	movs	r3, #8
 8003462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69fa      	ldr	r2, [r7, #28]
 8003468:	611a      	str	r2, [r3, #16]
          break;
 800346a:	e009      	b.n	8003480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800346c:	2308      	movs	r3, #8
 800346e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69fa      	ldr	r2, [r7, #28]
 8003474:	615a      	str	r2, [r3, #20]
          break;
 8003476:	e003      	b.n	8003480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003478:	2300      	movs	r3, #0
 800347a:	623b      	str	r3, [r7, #32]
          break;
 800347c:	e000      	b.n	8003480 <HAL_GPIO_Init+0x130>
          break;
 800347e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2bff      	cmp	r3, #255	@ 0xff
 8003484:	d801      	bhi.n	800348a <HAL_GPIO_Init+0x13a>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	e001      	b.n	800348e <HAL_GPIO_Init+0x13e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3304      	adds	r3, #4
 800348e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2bff      	cmp	r3, #255	@ 0xff
 8003494:	d802      	bhi.n	800349c <HAL_GPIO_Init+0x14c>
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	e002      	b.n	80034a2 <HAL_GPIO_Init+0x152>
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	3b08      	subs	r3, #8
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	210f      	movs	r1, #15
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	6a39      	ldr	r1, [r7, #32]
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	431a      	orrs	r2, r3
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80b1 	beq.w	8003632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034d0:	4b4d      	ldr	r3, [pc, #308]	@ (8003608 <HAL_GPIO_Init+0x2b8>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003608 <HAL_GPIO_Init+0x2b8>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6193      	str	r3, [r2, #24]
 80034dc:	4b4a      	ldr	r3, [pc, #296]	@ (8003608 <HAL_GPIO_Init+0x2b8>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034e8:	4a48      	ldr	r2, [pc, #288]	@ (800360c <HAL_GPIO_Init+0x2bc>)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	089b      	lsrs	r3, r3, #2
 80034ee:	3302      	adds	r3, #2
 80034f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a40      	ldr	r2, [pc, #256]	@ (8003610 <HAL_GPIO_Init+0x2c0>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d013      	beq.n	800353c <HAL_GPIO_Init+0x1ec>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3f      	ldr	r2, [pc, #252]	@ (8003614 <HAL_GPIO_Init+0x2c4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d00d      	beq.n	8003538 <HAL_GPIO_Init+0x1e8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a3e      	ldr	r2, [pc, #248]	@ (8003618 <HAL_GPIO_Init+0x2c8>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d007      	beq.n	8003534 <HAL_GPIO_Init+0x1e4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a3d      	ldr	r2, [pc, #244]	@ (800361c <HAL_GPIO_Init+0x2cc>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_GPIO_Init+0x1e0>
 800352c:	2303      	movs	r3, #3
 800352e:	e006      	b.n	800353e <HAL_GPIO_Init+0x1ee>
 8003530:	2304      	movs	r3, #4
 8003532:	e004      	b.n	800353e <HAL_GPIO_Init+0x1ee>
 8003534:	2302      	movs	r3, #2
 8003536:	e002      	b.n	800353e <HAL_GPIO_Init+0x1ee>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_GPIO_Init+0x1ee>
 800353c:	2300      	movs	r3, #0
 800353e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003540:	f002 0203 	and.w	r2, r2, #3
 8003544:	0092      	lsls	r2, r2, #2
 8003546:	4093      	lsls	r3, r2
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800354e:	492f      	ldr	r1, [pc, #188]	@ (800360c <HAL_GPIO_Init+0x2bc>)
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3302      	adds	r3, #2
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d006      	beq.n	8003576 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003568:	4b2d      	ldr	r3, [pc, #180]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	492c      	ldr	r1, [pc, #176]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]
 8003574:	e006      	b.n	8003584 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003576:	4b2a      	ldr	r3, [pc, #168]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	43db      	mvns	r3, r3
 800357e:	4928      	ldr	r1, [pc, #160]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 8003580:	4013      	ands	r3, r2
 8003582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d006      	beq.n	800359e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003590:	4b23      	ldr	r3, [pc, #140]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	4922      	ldr	r1, [pc, #136]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	4313      	orrs	r3, r2
 800359a:	60cb      	str	r3, [r1, #12]
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800359e:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	43db      	mvns	r3, r3
 80035a6:	491e      	ldr	r1, [pc, #120]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035b8:	4b19      	ldr	r3, [pc, #100]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035ba:	685a      	ldr	r2, [r3, #4]
 80035bc:	4918      	ldr	r1, [pc, #96]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
 80035c4:	e006      	b.n	80035d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035c6:	4b16      	ldr	r3, [pc, #88]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	4914      	ldr	r1, [pc, #80]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d021      	beq.n	8003624 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	490e      	ldr	r1, [pc, #56]	@ (8003620 <HAL_GPIO_Init+0x2d0>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	600b      	str	r3, [r1, #0]
 80035ec:	e021      	b.n	8003632 <HAL_GPIO_Init+0x2e2>
 80035ee:	bf00      	nop
 80035f0:	10320000 	.word	0x10320000
 80035f4:	10310000 	.word	0x10310000
 80035f8:	10220000 	.word	0x10220000
 80035fc:	10210000 	.word	0x10210000
 8003600:	10120000 	.word	0x10120000
 8003604:	10110000 	.word	0x10110000
 8003608:	40021000 	.word	0x40021000
 800360c:	40010000 	.word	0x40010000
 8003610:	40010800 	.word	0x40010800
 8003614:	40010c00 	.word	0x40010c00
 8003618:	40011000 	.word	0x40011000
 800361c:	40011400 	.word	0x40011400
 8003620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003624:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <HAL_GPIO_Init+0x304>)
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	43db      	mvns	r3, r3
 800362c:	4909      	ldr	r1, [pc, #36]	@ (8003654 <HAL_GPIO_Init+0x304>)
 800362e:	4013      	ands	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	3301      	adds	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	fa22 f303 	lsr.w	r3, r2, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	f47f ae8e 	bne.w	8003364 <HAL_GPIO_Init+0x14>
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	372c      	adds	r7, #44	@ 0x2c
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr
 8003654:	40010400 	.word	0x40010400

08003658 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	@ 0x24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003666:	e09a      	b.n	800379e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003668:	2201      	movs	r2, #1
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 808d 	beq.w	8003798 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800367e:	4a4e      	ldr	r2, [pc, #312]	@ (80037b8 <HAL_GPIO_DeInit+0x160>)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	089b      	lsrs	r3, r3, #2
 8003684:	3302      	adds	r3, #2
 8003686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	220f      	movs	r2, #15
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4013      	ands	r3, r2
 800369e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a46      	ldr	r2, [pc, #280]	@ (80037bc <HAL_GPIO_DeInit+0x164>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d013      	beq.n	80036d0 <HAL_GPIO_DeInit+0x78>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a45      	ldr	r2, [pc, #276]	@ (80037c0 <HAL_GPIO_DeInit+0x168>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00d      	beq.n	80036cc <HAL_GPIO_DeInit+0x74>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a44      	ldr	r2, [pc, #272]	@ (80037c4 <HAL_GPIO_DeInit+0x16c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <HAL_GPIO_DeInit+0x70>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a43      	ldr	r2, [pc, #268]	@ (80037c8 <HAL_GPIO_DeInit+0x170>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_GPIO_DeInit+0x6c>
 80036c0:	2303      	movs	r3, #3
 80036c2:	e006      	b.n	80036d2 <HAL_GPIO_DeInit+0x7a>
 80036c4:	2304      	movs	r3, #4
 80036c6:	e004      	b.n	80036d2 <HAL_GPIO_DeInit+0x7a>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e002      	b.n	80036d2 <HAL_GPIO_DeInit+0x7a>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <HAL_GPIO_DeInit+0x7a>
 80036d0:	2300      	movs	r3, #0
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	f002 0203 	and.w	r2, r2, #3
 80036d8:	0092      	lsls	r2, r2, #2
 80036da:	4093      	lsls	r3, r2
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d132      	bne.n	8003748 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80036e2:	4b3a      	ldr	r3, [pc, #232]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	4938      	ldr	r1, [pc, #224]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80036f0:	4b36      	ldr	r3, [pc, #216]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	43db      	mvns	r3, r3
 80036f8:	4934      	ldr	r1, [pc, #208]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80036fe:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	43db      	mvns	r3, r3
 8003706:	4931      	ldr	r1, [pc, #196]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 8003708:	4013      	ands	r3, r2
 800370a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800370c:	4b2f      	ldr	r3, [pc, #188]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	43db      	mvns	r3, r3
 8003714:	492d      	ldr	r1, [pc, #180]	@ (80037cc <HAL_GPIO_DeInit+0x174>)
 8003716:	4013      	ands	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	220f      	movs	r2, #15
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800372a:	4a23      	ldr	r2, [pc, #140]	@ (80037b8 <HAL_GPIO_DeInit+0x160>)
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	089b      	lsrs	r3, r3, #2
 8003730:	3302      	adds	r3, #2
 8003732:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	43da      	mvns	r2, r3
 800373a:	481f      	ldr	r0, [pc, #124]	@ (80037b8 <HAL_GPIO_DeInit+0x160>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	400a      	ands	r2, r1
 8003742:	3302      	adds	r3, #2
 8003744:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2bff      	cmp	r3, #255	@ 0xff
 800374c:	d801      	bhi.n	8003752 <HAL_GPIO_DeInit+0xfa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	e001      	b.n	8003756 <HAL_GPIO_DeInit+0xfe>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	2bff      	cmp	r3, #255	@ 0xff
 800375c:	d802      	bhi.n	8003764 <HAL_GPIO_DeInit+0x10c>
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	e002      	b.n	800376a <HAL_GPIO_DeInit+0x112>
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	3b08      	subs	r3, #8
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	210f      	movs	r1, #15
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	401a      	ands	r2, r3
 800377c:	2104      	movs	r1, #4
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	431a      	orrs	r2, r3
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3301      	adds	r3, #1
 800379c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	fa22 f303 	lsr.w	r3, r2, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f47f af5e 	bne.w	8003668 <HAL_GPIO_DeInit+0x10>
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3724      	adds	r7, #36	@ 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bc80      	pop	{r7}
 80037b6:	4770      	bx	lr
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40010800 	.word	0x40010800
 80037c0:	40010c00 	.word	0x40010c00
 80037c4:	40011000 	.word	0x40011000
 80037c8:	40011400 	.word	0x40011400
 80037cc:	40010400 	.word	0x40010400

080037d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	887b      	ldrh	r3, [r7, #2]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
 80037ec:	e001      	b.n	80037f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	807b      	strh	r3, [r7, #2]
 800380a:	4613      	mov	r3, r2
 800380c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800380e:	787b      	ldrb	r3, [r7, #1]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003814:	887a      	ldrh	r2, [r7, #2]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800381a:	e003      	b.n	8003824 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	041a      	lsls	r2, r3, #16
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	611a      	str	r2, [r3, #16]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003840:	887a      	ldrh	r2, [r7, #2]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	041a      	lsls	r2, r3, #16
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	43d9      	mvns	r1, r3
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	400b      	ands	r3, r1
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	611a      	str	r2, [r3, #16]
}
 8003856:	bf00      	nop
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e272      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 8087 	beq.w	800398e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003880:	4b92      	ldr	r3, [pc, #584]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b04      	cmp	r3, #4
 800388a:	d00c      	beq.n	80038a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800388c:	4b8f      	ldr	r3, [pc, #572]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d112      	bne.n	80038be <HAL_RCC_OscConfig+0x5e>
 8003898:	4b8c      	ldr	r3, [pc, #560]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a4:	d10b      	bne.n	80038be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a6:	4b89      	ldr	r3, [pc, #548]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d06c      	beq.n	800398c <HAL_RCC_OscConfig+0x12c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d168      	bne.n	800398c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e24c      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_OscConfig+0x76>
 80038c8:	4b80      	ldr	r3, [pc, #512]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a7f      	ldr	r2, [pc, #508]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80038ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	e02e      	b.n	8003934 <HAL_RCC_OscConfig+0xd4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x98>
 80038de:	4b7b      	ldr	r3, [pc, #492]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7a      	ldr	r2, [pc, #488]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80038e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e8:	6013      	str	r3, [r2, #0]
 80038ea:	4b78      	ldr	r3, [pc, #480]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a77      	ldr	r2, [pc, #476]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80038f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	e01d      	b.n	8003934 <HAL_RCC_OscConfig+0xd4>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003900:	d10c      	bne.n	800391c <HAL_RCC_OscConfig+0xbc>
 8003902:	4b72      	ldr	r3, [pc, #456]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a71      	ldr	r2, [pc, #452]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800390c:	6013      	str	r3, [r2, #0]
 800390e:	4b6f      	ldr	r3, [pc, #444]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6e      	ldr	r2, [pc, #440]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	e00b      	b.n	8003934 <HAL_RCC_OscConfig+0xd4>
 800391c:	4b6b      	ldr	r3, [pc, #428]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a6a      	ldr	r2, [pc, #424]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	4b68      	ldr	r3, [pc, #416]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a67      	ldr	r2, [pc, #412]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 800392e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003932:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d013      	beq.n	8003964 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fc98 	bl	8002270 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fe fc94 	bl	8002270 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	@ 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e200      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003956:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d0f0      	beq.n	8003944 <HAL_RCC_OscConfig+0xe4>
 8003962:	e014      	b.n	800398e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe fc84 	bl	8002270 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800396c:	f7fe fc80 	bl	8002270 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	@ 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e1ec      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800397e:	4b53      	ldr	r3, [pc, #332]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x10c>
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d063      	beq.n	8003a62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800399a:	4b4c      	ldr	r3, [pc, #304]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00b      	beq.n	80039be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039a6:	4b49      	ldr	r3, [pc, #292]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f003 030c 	and.w	r3, r3, #12
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d11c      	bne.n	80039ec <HAL_RCC_OscConfig+0x18c>
 80039b2:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d116      	bne.n	80039ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	4b43      	ldr	r3, [pc, #268]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <HAL_RCC_OscConfig+0x176>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d001      	beq.n	80039d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e1c0      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d6:	4b3d      	ldr	r3, [pc, #244]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4939      	ldr	r1, [pc, #228]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ea:	e03a      	b.n	8003a62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d020      	beq.n	8003a36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f4:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <HAL_RCC_OscConfig+0x270>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fa:	f7fe fc39 	bl	8002270 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a02:	f7fe fc35 	bl	8002270 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e1a1      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a14:	4b2d      	ldr	r3, [pc, #180]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4927      	ldr	r1, [pc, #156]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	600b      	str	r3, [r1, #0]
 8003a34:	e015      	b.n	8003a62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a36:	4b26      	ldr	r3, [pc, #152]	@ (8003ad0 <HAL_RCC_OscConfig+0x270>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fc18 	bl	8002270 <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a44:	f7fe fc14 	bl	8002270 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e180      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0302 	and.w	r3, r3, #2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d03a      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d019      	beq.n	8003aaa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a76:	4b17      	ldr	r3, [pc, #92]	@ (8003ad4 <HAL_RCC_OscConfig+0x274>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7c:	f7fe fbf8 	bl	8002270 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a84:	f7fe fbf4 	bl	8002270 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e160      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <HAL_RCC_OscConfig+0x26c>)
 8003a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f000 face 	bl	8004044 <RCC_Delay>
 8003aa8:	e01c      	b.n	8003ae4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <HAL_RCC_OscConfig+0x274>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab0:	f7fe fbde 	bl	8002270 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab6:	e00f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ab8:	f7fe fbda 	bl	8002270 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d908      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e146      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	42420000 	.word	0x42420000
 8003ad4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	4b92      	ldr	r3, [pc, #584]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e9      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f000 80a6 	beq.w	8003c3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af2:	2300      	movs	r3, #0
 8003af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af6:	4b8b      	ldr	r3, [pc, #556]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10d      	bne.n	8003b1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b02:	4b88      	ldr	r3, [pc, #544]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	4a87      	ldr	r2, [pc, #540]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	61d3      	str	r3, [r2, #28]
 8003b0e:	4b85      	ldr	r3, [pc, #532]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b82      	ldr	r3, [pc, #520]	@ (8003d28 <HAL_RCC_OscConfig+0x4c8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d118      	bne.n	8003b5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d28 <HAL_RCC_OscConfig+0x4c8>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d28 <HAL_RCC_OscConfig+0x4c8>)
 8003b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b36:	f7fe fb9b 	bl	8002270 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b3e:	f7fe fb97 	bl	8002270 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b64      	cmp	r3, #100	@ 0x64
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e103      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b50:	4b75      	ldr	r3, [pc, #468]	@ (8003d28 <HAL_RCC_OscConfig+0x4c8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d0f0      	beq.n	8003b3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x312>
 8003b64:	4b6f      	ldr	r3, [pc, #444]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4a6e      	ldr	r2, [pc, #440]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	6213      	str	r3, [r2, #32]
 8003b70:	e02d      	b.n	8003bce <HAL_RCC_OscConfig+0x36e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x334>
 8003b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a69      	ldr	r2, [pc, #420]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	6213      	str	r3, [r2, #32]
 8003b86:	4b67      	ldr	r3, [pc, #412]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4a66      	ldr	r2, [pc, #408]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b8c:	f023 0304 	bic.w	r3, r3, #4
 8003b90:	6213      	str	r3, [r2, #32]
 8003b92:	e01c      	b.n	8003bce <HAL_RCC_OscConfig+0x36e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	d10c      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x356>
 8003b9c:	4b61      	ldr	r3, [pc, #388]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	4a60      	ldr	r2, [pc, #384]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	f043 0304 	orr.w	r3, r3, #4
 8003ba6:	6213      	str	r3, [r2, #32]
 8003ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	6a1b      	ldr	r3, [r3, #32]
 8003bac:	4a5d      	ldr	r2, [pc, #372]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	f043 0301 	orr.w	r3, r3, #1
 8003bb2:	6213      	str	r3, [r2, #32]
 8003bb4:	e00b      	b.n	8003bce <HAL_RCC_OscConfig+0x36e>
 8003bb6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	4a5a      	ldr	r2, [pc, #360]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003bbc:	f023 0301 	bic.w	r3, r3, #1
 8003bc0:	6213      	str	r3, [r2, #32]
 8003bc2:	4b58      	ldr	r3, [pc, #352]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	4a57      	ldr	r2, [pc, #348]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd6:	f7fe fb4b 	bl	8002270 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fe fb47 	bl	8002270 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e0b1      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ee      	beq.n	8003bde <HAL_RCC_OscConfig+0x37e>
 8003c00:	e014      	b.n	8003c2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c02:	f7fe fb35 	bl	8002270 <HAL_GetTick>
 8003c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	e00a      	b.n	8003c20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fe fb31 	bl	8002270 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e09b      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c20:	4b40      	ldr	r3, [pc, #256]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ee      	bne.n	8003c0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	4a3b      	ldr	r2, [pc, #236]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8087 	beq.w	8003d56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d061      	beq.n	8003d18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d146      	bne.n	8003cea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5c:	4b33      	ldr	r3, [pc, #204]	@ (8003d2c <HAL_RCC_OscConfig+0x4cc>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c62:	f7fe fb05 	bl	8002270 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6a:	f7fe fb01 	bl	8002270 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e06d      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c7c:	4b29      	ldr	r3, [pc, #164]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f0      	bne.n	8003c6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d108      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c92:	4b24      	ldr	r3, [pc, #144]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	4921      	ldr	r1, [pc, #132]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a19      	ldr	r1, [r3, #32]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	491b      	ldr	r1, [pc, #108]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x4cc>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc2:	f7fe fad5 	bl	8002270 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cca:	f7fe fad1 	bl	8002270 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e03d      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0f0      	beq.n	8003cca <HAL_RCC_OscConfig+0x46a>
 8003ce8:	e035      	b.n	8003d56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <HAL_RCC_OscConfig+0x4cc>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fabe 	bl	8002270 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf8:	f7fe faba 	bl	8002270 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e026      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <HAL_RCC_OscConfig+0x4c4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x498>
 8003d16:	e01e      	b.n	8003d56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d107      	bne.n	8003d30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e019      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40007000 	.word	0x40007000
 8003d2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d30:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <HAL_RCC_OscConfig+0x500>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d001      	beq.n	8003d56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000

08003d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0d0      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d78:	4b6a      	ldr	r3, [pc, #424]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d910      	bls.n	8003da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d86:	4b67      	ldr	r3, [pc, #412]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 0207 	bic.w	r2, r3, #7
 8003d8e:	4965      	ldr	r1, [pc, #404]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d96:	4b63      	ldr	r3, [pc, #396]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0b8      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d020      	beq.n	8003df6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc0:	4b59      	ldr	r3, [pc, #356]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a58      	ldr	r2, [pc, #352]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dd8:	4b53      	ldr	r3, [pc, #332]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	4a52      	ldr	r2, [pc, #328]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003de2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de4:	4b50      	ldr	r3, [pc, #320]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	494d      	ldr	r1, [pc, #308]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d040      	beq.n	8003e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d107      	bne.n	8003e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0a:	4b47      	ldr	r3, [pc, #284]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d115      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e07f      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d107      	bne.n	8003e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e22:	4b41      	ldr	r3, [pc, #260]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d109      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e073      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e32:	4b3d      	ldr	r3, [pc, #244]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06b      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e42:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f023 0203 	bic.w	r2, r3, #3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4936      	ldr	r1, [pc, #216]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e54:	f7fe fa0c 	bl	8002270 <HAL_GetTick>
 8003e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5a:	e00a      	b.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e5c:	f7fe fa08 	bl	8002270 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e053      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e72:	4b2d      	ldr	r3, [pc, #180]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 020c 	and.w	r2, r3, #12
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d1eb      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e84:	4b27      	ldr	r3, [pc, #156]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d210      	bcs.n	8003eb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e92:	4b24      	ldr	r3, [pc, #144]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f023 0207 	bic.w	r2, r3, #7
 8003e9a:	4922      	ldr	r1, [pc, #136]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea2:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e032      	b.n	8003f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d008      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec0:	4b19      	ldr	r3, [pc, #100]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	4916      	ldr	r1, [pc, #88]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ede:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	490e      	ldr	r1, [pc, #56]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ef2:	f000 f821 	bl	8003f38 <HAL_RCC_GetSysClockFreq>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <HAL_RCC_ClockConfig+0x1c4>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	091b      	lsrs	r3, r3, #4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	490a      	ldr	r1, [pc, #40]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c8>)
 8003f04:	5ccb      	ldrb	r3, [r1, r3]
 8003f06:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0a:	4a09      	ldr	r2, [pc, #36]	@ (8003f30 <HAL_RCC_ClockConfig+0x1cc>)
 8003f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f0e:	4b09      	ldr	r3, [pc, #36]	@ (8003f34 <HAL_RCC_ClockConfig+0x1d0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe f96a 	bl	80021ec <HAL_InitTick>

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40022000 	.word	0x40022000
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08008e70 	.word	0x08008e70
 8003f30:	20000004 	.word	0x20000004
 8003f34:	20000008 	.word	0x20000008

08003f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	2300      	movs	r3, #0
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f52:	4b1e      	ldr	r3, [pc, #120]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d002      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x30>
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d003      	beq.n	8003f6e <HAL_RCC_GetSysClockFreq+0x36>
 8003f66:	e027      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f68:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f6a:	613b      	str	r3, [r7, #16]
      break;
 8003f6c:	e027      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	0c9b      	lsrs	r3, r3, #18
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	4a17      	ldr	r2, [pc, #92]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f78:	5cd3      	ldrb	r3, [r2, r3]
 8003f7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d010      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f86:	4b11      	ldr	r3, [pc, #68]	@ (8003fcc <HAL_RCC_GetSysClockFreq+0x94>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	0c5b      	lsrs	r3, r3, #17
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	4a11      	ldr	r2, [pc, #68]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f92:	5cd3      	ldrb	r3, [r2, r3]
 8003f94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f9a:	fb03 f202 	mul.w	r2, r3, r2
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0c      	ldr	r2, [pc, #48]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fac:	fb02 f303 	mul.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	613b      	str	r3, [r7, #16]
      break;
 8003fb6:	e002      	b.n	8003fbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fba:	613b      	str	r3, [r7, #16]
      break;
 8003fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fbe:	693b      	ldr	r3, [r7, #16]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	007a1200 	.word	0x007a1200
 8003fd4:	08008e88 	.word	0x08008e88
 8003fd8:	08008e98 	.word	0x08008e98
 8003fdc:	003d0900 	.word	0x003d0900

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b02      	ldr	r3, [pc, #8]	@ (8003ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr
 8003ff0:	20000004 	.word	0x20000004

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff8:	f7ff fff2 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	4903      	ldr	r1, [pc, #12]	@ (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800400a:	5ccb      	ldrb	r3, [r1, r3]
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	08008e80 	.word	0x08008e80

0800401c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004020:	f7ff ffde 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	0adb      	lsrs	r3, r3, #11
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4903      	ldr	r1, [pc, #12]	@ (8004040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40021000 	.word	0x40021000
 8004040:	08008e80 	.word	0x08008e80

08004044 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800404c:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <RCC_Delay+0x34>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <RCC_Delay+0x38>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	0a5b      	lsrs	r3, r3, #9
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004060:	bf00      	nop
  }
  while (Delay --);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1e5a      	subs	r2, r3, #1
 8004066:	60fa      	str	r2, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1f9      	bne.n	8004060 <RCC_Delay+0x1c>
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	bc80      	pop	{r7}
 8004076:	4770      	bx	lr
 8004078:	20000004 	.word	0x20000004
 800407c:	10624dd3 	.word	0x10624dd3

08004080 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004088:	2300      	movs	r3, #0
 800408a:	613b      	str	r3, [r7, #16]
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d07d      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800409c:	2300      	movs	r3, #0
 800409e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040a0:	4b4f      	ldr	r3, [pc, #316]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10d      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	4b4c      	ldr	r3, [pc, #304]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	4a4b      	ldr	r2, [pc, #300]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b6:	61d3      	str	r3, [r2, #28]
 80040b8:	4b49      	ldr	r3, [pc, #292]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	4b46      	ldr	r3, [pc, #280]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d118      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d4:	4b43      	ldr	r3, [pc, #268]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a42      	ldr	r2, [pc, #264]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040e0:	f7fe f8c6 	bl	8002270 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	e008      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e8:	f7fe f8c2 	bl	8002270 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	@ 0x64
 80040f4:	d901      	bls.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e06d      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fa:	4b3a      	ldr	r3, [pc, #232]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f0      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004106:	4b36      	ldr	r3, [pc, #216]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800410e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02e      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	429a      	cmp	r2, r3
 8004122:	d027      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004124:	4b2e      	ldr	r3, [pc, #184]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800412e:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004130:	2201      	movs	r2, #1
 8004132:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004134:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800413a:	4a29      	ldr	r2, [pc, #164]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d014      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fe f891 	bl	8002270 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004150:	e00a      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f7fe f88d 	bl	8002270 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e036      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004168:	4b1d      	ldr	r3, [pc, #116]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ee      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004174:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4917      	ldr	r1, [pc, #92]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	4313      	orrs	r3, r2
 8004184:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004186:	7dfb      	ldrb	r3, [r7, #23]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d105      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800418c:	4b14      	ldr	r3, [pc, #80]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4a13      	ldr	r2, [pc, #76]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004192:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004196:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a4:	4b0e      	ldr	r3, [pc, #56]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	490b      	ldr	r1, [pc, #44]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0310 	and.w	r3, r3, #16
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c2:	4b07      	ldr	r3, [pc, #28]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	4904      	ldr	r1, [pc, #16]	@ (80041e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	40007000 	.word	0x40007000
 80041e8:	42420440 	.word	0x42420440

080041ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	2300      	movs	r3, #0
 8004206:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b10      	cmp	r3, #16
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b10      	cmp	r3, #16
 8004212:	f200 808a 	bhi.w	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d045      	beq.n	80042a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d075      	beq.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004222:	e082      	b.n	800432a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004224:	4b46      	ldr	r3, [pc, #280]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800422a:	4b45      	ldr	r3, [pc, #276]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d07b      	beq.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	0c9b      	lsrs	r3, r3, #18
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	4a41      	ldr	r2, [pc, #260]	@ (8004344 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004240:	5cd3      	ldrb	r3, [r2, r3]
 8004242:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800424e:	4b3c      	ldr	r3, [pc, #240]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	0c5b      	lsrs	r3, r3, #17
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	4a3b      	ldr	r2, [pc, #236]	@ (8004348 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800425a:	5cd3      	ldrb	r3, [r2, r3]
 800425c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00d      	beq.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004268:	4a38      	ldr	r2, [pc, #224]	@ (800434c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	fb02 f303 	mul.w	r3, r2, r3
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	e004      	b.n	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	4a34      	ldr	r2, [pc, #208]	@ (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004284:	4b2e      	ldr	r3, [pc, #184]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004290:	d102      	bne.n	8004298 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	61bb      	str	r3, [r7, #24]
      break;
 8004296:	e04a      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	005b      	lsls	r3, r3, #1
 800429c:	4a2d      	ldr	r2, [pc, #180]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	61bb      	str	r3, [r7, #24]
      break;
 80042a6:	e042      	b.n	800432e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80042a8:	4b25      	ldr	r3, [pc, #148]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b8:	d108      	bne.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80042c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042c8:	61bb      	str	r3, [r7, #24]
 80042ca:	e01f      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042d6:	d109      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80042d8:	4b19      	ldr	r3, [pc, #100]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80042e4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e00f      	b.n	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f6:	d11c      	bne.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80042f8:	4b11      	ldr	r3, [pc, #68]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004300:	2b00      	cmp	r3, #0
 8004302:	d016      	beq.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004304:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8004308:	61bb      	str	r3, [r7, #24]
      break;
 800430a:	e012      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800430c:	e011      	b.n	8004332 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800430e:	f7ff fe85 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 8004312:	4602      	mov	r2, r0
 8004314:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	0b9b      	lsrs	r3, r3, #14
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	3301      	adds	r3, #1
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	fbb2 f3f3 	udiv	r3, r2, r3
 8004326:	61bb      	str	r3, [r7, #24]
      break;
 8004328:	e004      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800432a:	bf00      	nop
 800432c:	e002      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004332:	bf00      	nop
    }
  }
  return (frequency);
 8004334:	69bb      	ldr	r3, [r7, #24]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	08008e9c 	.word	0x08008e9c
 8004348:	08008eac 	.word	0x08008eac
 800434c:	007a1200 	.word	0x007a1200
 8004350:	003d0900 	.word	0x003d0900
 8004354:	aaaaaaab 	.word	0xaaaaaaab

08004358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e041      	b.n	80043ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fd fe10 	bl	8001fa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2202      	movs	r2, #2
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f000 fa12 	bl	80047c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01b      	beq.n	800445a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f06f 0202 	mvn.w	r2, #2
 800442a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f9a1 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004446:	e005      	b.n	8004454 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f994 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f9a3 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01b      	beq.n	80044a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f06f 0204 	mvn.w	r2, #4
 8004476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f97b 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 8004492:	e005      	b.n	80044a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f96e 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f97d 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d01b      	beq.n	80044f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f06f 0208 	mvn.w	r2, #8
 80044c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2204      	movs	r2, #4
 80044c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f955 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 80044de:	e005      	b.n	80044ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f948 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f957 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f003 0310 	and.w	r3, r3, #16
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d020      	beq.n	800453e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01b      	beq.n	800453e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0210 	mvn.w	r2, #16
 800450e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2208      	movs	r2, #8
 8004514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f92f 	bl	8004788 <HAL_TIM_IC_CaptureCallback>
 800452a:	e005      	b.n	8004538 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f922 	bl	8004776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f931 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00c      	beq.n	8004562 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0201 	mvn.w	r2, #1
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f901 	bl	8004764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa88 	bl	8004a96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f901 	bl	80047ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00c      	beq.n	80045ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f06f 0220 	mvn.w	r2, #32
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fa5b 	bl	8004a84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b084      	sub	sp, #16
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_ConfigClockSource+0x1c>
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0b4      	b.n	800475c <HAL_TIM_ConfigClockSource+0x186>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004610:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004618:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800462a:	d03e      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0xd4>
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004630:	f200 8087 	bhi.w	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004638:	f000 8086 	beq.w	8004748 <HAL_TIM_ConfigClockSource+0x172>
 800463c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004640:	d87f      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 8004642:	2b70      	cmp	r3, #112	@ 0x70
 8004644:	d01a      	beq.n	800467c <HAL_TIM_ConfigClockSource+0xa6>
 8004646:	2b70      	cmp	r3, #112	@ 0x70
 8004648:	d87b      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 800464a:	2b60      	cmp	r3, #96	@ 0x60
 800464c:	d050      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0x11a>
 800464e:	2b60      	cmp	r3, #96	@ 0x60
 8004650:	d877      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 8004652:	2b50      	cmp	r3, #80	@ 0x50
 8004654:	d03c      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0xfa>
 8004656:	2b50      	cmp	r3, #80	@ 0x50
 8004658:	d873      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	d058      	beq.n	8004710 <HAL_TIM_ConfigClockSource+0x13a>
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d86f      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 8004662:	2b30      	cmp	r3, #48	@ 0x30
 8004664:	d064      	beq.n	8004730 <HAL_TIM_ConfigClockSource+0x15a>
 8004666:	2b30      	cmp	r3, #48	@ 0x30
 8004668:	d86b      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 800466a:	2b20      	cmp	r3, #32
 800466c:	d060      	beq.n	8004730 <HAL_TIM_ConfigClockSource+0x15a>
 800466e:	2b20      	cmp	r3, #32
 8004670:	d867      	bhi.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
 8004672:	2b00      	cmp	r3, #0
 8004674:	d05c      	beq.n	8004730 <HAL_TIM_ConfigClockSource+0x15a>
 8004676:	2b10      	cmp	r3, #16
 8004678:	d05a      	beq.n	8004730 <HAL_TIM_ConfigClockSource+0x15a>
 800467a:	e062      	b.n	8004742 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800468c:	f000 f97d 	bl	800498a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800469e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	609a      	str	r2, [r3, #8]
      break;
 80046a8:	e04f      	b.n	800474a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046ba:	f000 f966 	bl	800498a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046cc:	609a      	str	r2, [r3, #8]
      break;
 80046ce:	e03c      	b.n	800474a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046dc:	461a      	mov	r2, r3
 80046de:	f000 f8dd 	bl	800489c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2150      	movs	r1, #80	@ 0x50
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f934 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 80046ee:	e02c      	b.n	800474a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fc:	461a      	mov	r2, r3
 80046fe:	f000 f8fb 	bl	80048f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2160      	movs	r1, #96	@ 0x60
 8004708:	4618      	mov	r0, r3
 800470a:	f000 f924 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800470e:	e01c      	b.n	800474a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471c:	461a      	mov	r2, r3
 800471e:	f000 f8bd 	bl	800489c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2140      	movs	r1, #64	@ 0x40
 8004728:	4618      	mov	r0, r3
 800472a:	f000 f914 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 800472e:	e00c      	b.n	800474a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 f90b 	bl	8004956 <TIM_ITRx_SetConfig>
      break;
 8004740:	e003      	b.n	800474a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
      break;
 8004746:	e000      	b.n	800474a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004748:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bc80      	pop	{r7}
 80047aa:	4770      	bx	lr

080047ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
	...

080047c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004890 <TIM_Base_SetConfig+0xd0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <TIM_Base_SetConfig+0x30>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047de:	d007      	beq.n	80047f0 <TIM_Base_SetConfig+0x30>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a2c      	ldr	r2, [pc, #176]	@ (8004894 <TIM_Base_SetConfig+0xd4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <TIM_Base_SetConfig+0x30>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004898 <TIM_Base_SetConfig+0xd8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d108      	bne.n	8004802 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a22      	ldr	r2, [pc, #136]	@ (8004890 <TIM_Base_SetConfig+0xd0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d00b      	beq.n	8004822 <TIM_Base_SetConfig+0x62>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004810:	d007      	beq.n	8004822 <TIM_Base_SetConfig+0x62>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <TIM_Base_SetConfig+0xd4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_Base_SetConfig+0x62>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a1e      	ldr	r2, [pc, #120]	@ (8004898 <TIM_Base_SetConfig+0xd8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d108      	bne.n	8004834 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0d      	ldr	r2, [pc, #52]	@ (8004890 <TIM_Base_SetConfig+0xd0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d103      	bne.n	8004868 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f023 0201 	bic.w	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	611a      	str	r2, [r3, #16]
  }
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800

0800489c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0201 	bic.w	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f023 030a 	bic.w	r3, r3, #10
 80048d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bc80      	pop	{r7}
 80048f6:	4770      	bx	lr

080048f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f023 0210 	bic.w	r2, r3, #16
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004922:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004934:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	4313      	orrs	r3, r2
 800493e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	621a      	str	r2, [r3, #32]
}
 800494c:	bf00      	nop
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr

08004956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	f043 0307 	orr.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	609a      	str	r2, [r3, #8]
}
 8004980:	bf00      	nop
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr

0800498a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800498a:	b480      	push	{r7}
 800498c:	b087      	sub	sp, #28
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	607a      	str	r2, [r7, #4]
 8004996:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80049a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	021a      	lsls	r2, r3, #8
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	609a      	str	r2, [r3, #8]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049dc:	2302      	movs	r3, #2
 80049de:	e046      	b.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a16      	ldr	r2, [pc, #88]	@ (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2c:	d009      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a12      	ldr	r2, [pc, #72]	@ (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a10      	ldr	r2, [pc, #64]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d10c      	bne.n	8004a5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68ba      	ldr	r2, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bc80      	pop	{r7}
 8004a76:	4770      	bx	lr
 8004a78:	40012c00 	.word	0x40012c00
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800

08004a84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bc80      	pop	{r7}
 8004a94:	4770      	bx	lr

08004a96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b083      	sub	sp, #12
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bc80      	pop	{r7}
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e042      	b.n	8004b40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fd fa8c 	bl	8001fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2224      	movs	r2, #36	@ 0x24
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fecd 	bl	800588c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e024      	b.n	8004ba4 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2224      	movs	r2, #36	@ 0x24
 8004b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b70:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7fd fa8c 	bl	8002090 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	@ 0x28
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	603b      	str	r3, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d175      	bne.n	8004cb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <HAL_UART_Transmit+0x2c>
 8004bd2:	88fb      	ldrh	r3, [r7, #6]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e06e      	b.n	8004cba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2200      	movs	r2, #0
 8004be0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2221      	movs	r2, #33	@ 0x21
 8004be6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bea:	f7fd fb41 	bl	8002270 <HAL_GetTick>
 8004bee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c04:	d108      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d104      	bne.n	8004c18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e003      	b.n	8004c20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c20:	e02e      	b.n	8004c80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2180      	movs	r1, #128	@ 0x80
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fbff 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d005      	beq.n	8004c44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e03a      	b.n	8004cba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10b      	bne.n	8004c62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	3302      	adds	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e007      	b.n	8004c72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	781a      	ldrb	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1cb      	bne.n	8004c22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	2140      	movs	r1, #64	@ 0x40
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fbcb 	bl	8005430 <UART_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	e000      	b.n	8004cba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	60f8      	str	r0, [r7, #12]
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d112      	bne.n	8004d02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_UART_Receive_IT+0x26>
 8004ce2:	88fb      	ldrh	r3, [r7, #6]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e00b      	b.n	8004d04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cf2:	88fb      	ldrh	r3, [r7, #6]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 fbf2 	bl	80054e2 <UART_Start_Receive_IT>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	e000      	b.n	8004d04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b0a0      	sub	sp, #128	@ 0x80
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	330c      	adds	r3, #12
 8004d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d1e:	e853 3f00 	ldrex	r3, [r3]
 8004d22:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8004d24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d26:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8004d2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	330c      	adds	r3, #12
 8004d32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004d34:	66ba      	str	r2, [r7, #104]	@ 0x68
 8004d36:	667b      	str	r3, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d38:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8004d3a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004d3c:	e841 2300 	strex	r3, r2, [r1]
 8004d40:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8004d42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e5      	bne.n	8004d14 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3314      	adds	r3, #20
 8004d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3314      	adds	r3, #20
 8004d66:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8004d68:	657a      	str	r2, [r7, #84]	@ 0x54
 8004d6a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004d6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d119      	bne.n	8004db8 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	f023 0310 	bic.w	r3, r3, #16
 8004d9a:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004da4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004daa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d036      	beq.n	8004e34 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3314      	adds	r3, #20
 8004dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ddc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e5      	bne.n	8004dc6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d018      	beq.n	8004e34 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	2200      	movs	r2, #0
 8004e08:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe f8ac 	bl	8002f6c <HAL_DMA_Abort>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fe fa5e 	bl	80032e0 <HAL_DMA_GetError>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	d104      	bne.n	8004e34 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e052      	b.n	8004eda <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d036      	beq.n	8004eb0 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3314      	adds	r3, #20
 8004e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3314      	adds	r3, #20
 8004e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e62:	61ba      	str	r2, [r7, #24]
 8004e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6979      	ldr	r1, [r7, #20]
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e5      	bne.n	8004e42 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d018      	beq.n	8004eb0 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	2200      	movs	r2, #0
 8004e84:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe f86e 	bl	8002f6c <HAL_DMA_Abort>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fa20 	bl	80032e0 <HAL_DMA_GetError>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b20      	cmp	r3, #32
 8004ea4:	d104      	bne.n	8004eb0 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2210      	movs	r2, #16
 8004eaa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	e014      	b.n	8004eda <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3780      	adds	r7, #128	@ 0x80
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b0ba      	sub	sp, #232	@ 0xe8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004f22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_UART_IRQHandler+0x66>
 8004f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fbe3 	bl	800570e <UART_Receive_IT>
      return;
 8004f48:	e25b      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	f000 80de 	beq.w	8005110 <HAL_UART_IRQHandler+0x22c>
 8004f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80d1 	beq.w	8005110 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00b      	beq.n	8004f92 <HAL_UART_IRQHandler+0xae>
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d005      	beq.n	8004f92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	f043 0201 	orr.w	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xd2>
 8004f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fae:	f043 0202 	orr.w	r2, r3, #2
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HAL_UART_IRQHandler+0xf6>
 8004fc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	f043 0204 	orr.w	r2, r3, #4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <HAL_UART_IRQHandler+0x126>
 8004fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	f043 0208 	orr.w	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 81f2 	beq.w	80053f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_UART_IRQHandler+0x14e>
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fb6e 	bl	800570e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf14      	ite	ne
 8005040:	2301      	movne	r3, #1
 8005042:	2300      	moveq	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d103      	bne.n	800505e <HAL_UART_IRQHandler+0x17a>
 8005056:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d04f      	beq.n	80050fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa78 	bl	8005554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d041      	beq.n	80050f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3314      	adds	r3, #20
 8005078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005080:	e853 3f00 	ldrex	r3, [r3]
 8005084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005088:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800508c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005090:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800509e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80050a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80050aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80050b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1d9      	bne.n	8005072 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d013      	beq.n	80050ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ca:	4a7e      	ldr	r2, [pc, #504]	@ (80052c4 <HAL_UART_IRQHandler+0x3e0>)
 80050cc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fd ff86 	bl	8002fe4 <HAL_DMA_Abort_IT>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d016      	beq.n	800510c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80050e8:	4610      	mov	r0, r2
 80050ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	e00e      	b.n	800510c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fc f908 	bl	8001304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f4:	e00a      	b.n	800510c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc f904 	bl	8001304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050fc:	e006      	b.n	800510c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc f900 	bl	8001304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800510a:	e175      	b.n	80053f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800510c:	bf00      	nop
    return;
 800510e:	e173      	b.n	80053f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 814f 	bne.w	80053b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8148 	beq.w	80053b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8141 	beq.w	80053b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	f000 80b6 	beq.w	80052c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005168:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8145 	beq.w	80053fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800517a:	429a      	cmp	r2, r3
 800517c:	f080 813e 	bcs.w	80053fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005186:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b20      	cmp	r3, #32
 8005190:	f000 8088 	beq.w	80052a4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80051aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80051c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80051cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80051d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1d9      	bne.n	8005194 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80051f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051f2:	f023 0301 	bic.w	r3, r3, #1
 80051f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3314      	adds	r3, #20
 8005200:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005204:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005208:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800520c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005216:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e1      	bne.n	80051e0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3314      	adds	r3, #20
 8005222:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800522c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800522e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005240:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005242:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005246:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800524e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e3      	bne.n	800521c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005274:	f023 0310 	bic.w	r3, r3, #16
 8005278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	330c      	adds	r3, #12
 8005282:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005286:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005288:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800528c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800528e:	e841 2300 	strex	r3, r2, [r1]
 8005292:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1e3      	bne.n	8005262 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fd fe64 	bl	8002f6c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8ad 	bl	800541a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052c0:	e09c      	b.n	80053fc <HAL_UART_IRQHandler+0x518>
 80052c2:	bf00      	nop
 80052c4:	08005619 	.word	0x08005619
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 808e 	beq.w	8005400 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80052e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8089 	beq.w	8005400 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005304:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005312:	647a      	str	r2, [r7, #68]	@ 0x44
 8005314:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005316:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800531a:	e841 2300 	strex	r3, r2, [r1]
 800531e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1e3      	bne.n	80052ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3314      	adds	r3, #20
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	623b      	str	r3, [r7, #32]
   return(result);
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3314      	adds	r3, #20
 8005346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800534a:	633a      	str	r2, [r7, #48]	@ 0x30
 800534c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e3      	bne.n	8005326 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	60fb      	str	r3, [r7, #12]
   return(result);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0310 	bic.w	r3, r3, #16
 8005382:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	330c      	adds	r3, #12
 800538c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005390:	61fa      	str	r2, [r7, #28]
 8005392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005394:	69b9      	ldr	r1, [r7, #24]
 8005396:	69fa      	ldr	r2, [r7, #28]
 8005398:	e841 2300 	strex	r3, r2, [r1]
 800539c:	617b      	str	r3, [r7, #20]
   return(result);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1e3      	bne.n	800536c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053ae:	4619      	mov	r1, r3
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f832 	bl	800541a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053b6:	e023      	b.n	8005400 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d009      	beq.n	80053d8 <HAL_UART_IRQHandler+0x4f4>
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f935 	bl	8005640 <UART_Transmit_IT>
    return;
 80053d6:	e014      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <HAL_UART_IRQHandler+0x51e>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f974 	bl	80056de <UART_EndTransmit_IT>
    return;
 80053f6:	e004      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
    return;
 80053f8:	bf00      	nop
 80053fa:	e002      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
      return;
 80053fc:	bf00      	nop
 80053fe:	e000      	b.n	8005402 <HAL_UART_IRQHandler+0x51e>
      return;
 8005400:	bf00      	nop
  }
}
 8005402:	37e8      	adds	r7, #232	@ 0xe8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr

08005430 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	e03b      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005442:	6a3b      	ldr	r3, [r7, #32]
 8005444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005448:	d037      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800544a:	f7fc ff11 	bl	8002270 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	429a      	cmp	r2, r3
 8005458:	d302      	bcc.n	8005460 <UART_WaitOnFlagUntilTimeout+0x30>
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e03a      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0304 	and.w	r3, r3, #4
 800546e:	2b00      	cmp	r3, #0
 8005470:	d023      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b80      	cmp	r3, #128	@ 0x80
 8005476:	d020      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b40      	cmp	r3, #64	@ 0x40
 800547c:	d01d      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b08      	cmp	r3, #8
 800548a:	d116      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f000 f856 	bl	8005554 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2208      	movs	r2, #8
 80054ac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e00f      	b.n	80054da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d0b4      	beq.n	8005442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e2:	b480      	push	{r7}
 80054e4:	b085      	sub	sp, #20
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	4613      	mov	r3, r2
 80054ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	88fa      	ldrh	r2, [r7, #6]
 80054fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2222      	movs	r2, #34	@ 0x22
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d007      	beq.n	8005528 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005526:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695a      	ldr	r2, [r3, #20]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0220 	orr.w	r2, r2, #32
 8005546:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005554:	b480      	push	{r7}
 8005556:	b095      	sub	sp, #84	@ 0x54
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005566:	e853 3f00 	ldrex	r3, [r3]
 800556a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	330c      	adds	r3, #12
 800557a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800557c:	643a      	str	r2, [r7, #64]	@ 0x40
 800557e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005582:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800558a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e5      	bne.n	800555c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3314      	adds	r3, #20
 80055ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d119      	bne.n	8005600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	330c      	adds	r3, #12
 80055d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	e853 3f00 	ldrex	r3, [r3]
 80055da:	60bb      	str	r3, [r7, #8]
   return(result);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f023 0310 	bic.w	r3, r3, #16
 80055e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	330c      	adds	r3, #12
 80055ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ec:	61ba      	str	r2, [r7, #24]
 80055ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6979      	ldr	r1, [r7, #20]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	e841 2300 	strex	r3, r2, [r1]
 80055f8:	613b      	str	r3, [r7, #16]
   return(result);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1e5      	bne.n	80055cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800560e:	bf00      	nop
 8005610:	3754      	adds	r7, #84	@ 0x54
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7fb fe66 	bl	8001304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005638:	bf00      	nop
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b21      	cmp	r3, #33	@ 0x21
 8005652:	d13e      	bne.n	80056d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800565c:	d114      	bne.n	8005688 <UART_Transmit_IT+0x48>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d110      	bne.n	8005688 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800567a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	1c9a      	adds	r2, r3, #2
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	621a      	str	r2, [r3, #32]
 8005686:	e008      	b.n	800569a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	1c59      	adds	r1, r3, #1
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6211      	str	r1, [r2, #32]
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4619      	mov	r1, r3
 80056a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10f      	bne.n	80056ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e000      	b.n	80056d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056d2:	2302      	movs	r3, #2
  }
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	bc80      	pop	{r7}
 80056dc:	4770      	bx	lr

080056de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b082      	sub	sp, #8
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fe82 	bl	8005408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b08c      	sub	sp, #48	@ 0x30
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b22      	cmp	r3, #34	@ 0x22
 8005720:	f040 80ae 	bne.w	8005880 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572c:	d117      	bne.n	800575e <UART_Receive_IT+0x50>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d113      	bne.n	800575e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800573e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574c:	b29a      	uxth	r2, r3
 800574e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005750:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005756:	1c9a      	adds	r2, r3, #2
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	@ 0x28
 800575c:	e026      	b.n	80057ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005764:	2300      	movs	r3, #0
 8005766:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005770:	d007      	beq.n	8005782 <UART_Receive_IT+0x74>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <UART_Receive_IT+0x82>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	b2da      	uxtb	r2, r3
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	e008      	b.n	80057a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800579c:	b2da      	uxtb	r2, r3
 800579e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	4619      	mov	r1, r3
 80057ba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d15d      	bne.n	800587c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0220 	bic.w	r2, r2, #32
 80057ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695a      	ldr	r2, [r3, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	2b01      	cmp	r3, #1
 8005804:	d135      	bne.n	8005872 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	613b      	str	r3, [r7, #16]
   return(result);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 0310 	bic.w	r3, r3, #16
 8005822:	627b      	str	r3, [r7, #36]	@ 0x24
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800582c:	623a      	str	r2, [r7, #32]
 800582e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	69f9      	ldr	r1, [r7, #28]
 8005832:	6a3a      	ldr	r2, [r7, #32]
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	61bb      	str	r3, [r7, #24]
   return(result);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e5      	bne.n	800580c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b10      	cmp	r3, #16
 800584c:	d10a      	bne.n	8005864 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fdd5 	bl	800541a <HAL_UARTEx_RxEventCallback>
 8005870:	e002      	b.n	8005878 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fb fcd8 	bl	8001228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	e002      	b.n	8005882 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800587c:	2300      	movs	r3, #0
 800587e:	e000      	b.n	8005882 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
  }
}
 8005882:	4618      	mov	r0, r3
 8005884:	3730      	adds	r7, #48	@ 0x30
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
	...

0800588c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80058c6:	f023 030c 	bic.w	r3, r3, #12
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	6812      	ldr	r2, [r2, #0]
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	430b      	orrs	r3, r1
 80058d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2c      	ldr	r2, [pc, #176]	@ (80059a0 <UART_SetConfig+0x114>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d103      	bne.n	80058fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fe fb92 	bl	800401c <HAL_RCC_GetPCLK2Freq>
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	e002      	b.n	8005902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80058fc:	f7fe fb7a 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8005900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4613      	mov	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	009a      	lsls	r2, r3, #2
 800590c:	441a      	add	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	fbb2 f3f3 	udiv	r3, r2, r3
 8005918:	4a22      	ldr	r2, [pc, #136]	@ (80059a4 <UART_SetConfig+0x118>)
 800591a:	fba2 2303 	umull	r2, r3, r2, r3
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	0119      	lsls	r1, r3, #4
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4613      	mov	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	4413      	add	r3, r2
 800592a:	009a      	lsls	r2, r3, #2
 800592c:	441a      	add	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	fbb2 f2f3 	udiv	r2, r2, r3
 8005938:	4b1a      	ldr	r3, [pc, #104]	@ (80059a4 <UART_SetConfig+0x118>)
 800593a:	fba3 0302 	umull	r0, r3, r3, r2
 800593e:	095b      	lsrs	r3, r3, #5
 8005940:	2064      	movs	r0, #100	@ 0x64
 8005942:	fb00 f303 	mul.w	r3, r0, r3
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	3332      	adds	r3, #50	@ 0x32
 800594c:	4a15      	ldr	r2, [pc, #84]	@ (80059a4 <UART_SetConfig+0x118>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	095b      	lsrs	r3, r3, #5
 8005954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005958:	4419      	add	r1, r3
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	009a      	lsls	r2, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005970:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <UART_SetConfig+0x118>)
 8005972:	fba3 0302 	umull	r0, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2064      	movs	r0, #100	@ 0x64
 800597a:	fb00 f303 	mul.w	r3, r0, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	3332      	adds	r3, #50	@ 0x32
 8005984:	4a07      	ldr	r2, [pc, #28]	@ (80059a4 <UART_SetConfig+0x118>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	440a      	add	r2, r1
 8005996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005998:	bf00      	nop
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	40013800 	.word	0x40013800
 80059a4:	51eb851f 	.word	0x51eb851f

080059a8 <__NVIC_SetPriority>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4603      	mov	r3, r0
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	db0a      	blt.n	80059d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	490c      	ldr	r1, [pc, #48]	@ (80059f4 <__NVIC_SetPriority+0x4c>)
 80059c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c6:	0112      	lsls	r2, r2, #4
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	440b      	add	r3, r1
 80059cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80059d0:	e00a      	b.n	80059e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	4908      	ldr	r1, [pc, #32]	@ (80059f8 <__NVIC_SetPriority+0x50>)
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	3b04      	subs	r3, #4
 80059e0:	0112      	lsls	r2, r2, #4
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	440b      	add	r3, r1
 80059e6:	761a      	strb	r2, [r3, #24]
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop
 80059f4:	e000e100 	.word	0xe000e100
 80059f8:	e000ed00 	.word	0xe000ed00

080059fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a00:	2100      	movs	r1, #0
 8005a02:	f06f 0004 	mvn.w	r0, #4
 8005a06:	f7ff ffcf 	bl	80059a8 <__NVIC_SetPriority>
#endif
}
 8005a0a:	bf00      	nop
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a16:	f3ef 8305 	mrs	r3, IPSR
 8005a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8005a1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a22:	f06f 0305 	mvn.w	r3, #5
 8005a26:	607b      	str	r3, [r7, #4]
 8005a28:	e00c      	b.n	8005a44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a2a:	4b09      	ldr	r3, [pc, #36]	@ (8005a50 <osKernelInitialize+0x40>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d105      	bne.n	8005a3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a32:	4b07      	ldr	r3, [pc, #28]	@ (8005a50 <osKernelInitialize+0x40>)
 8005a34:	2201      	movs	r2, #1
 8005a36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	607b      	str	r3, [r7, #4]
 8005a3c:	e002      	b.n	8005a44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a44:	687b      	ldr	r3, [r7, #4]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	200006a0 	.word	0x200006a0

08005a54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a5a:	f3ef 8305 	mrs	r3, IPSR
 8005a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a66:	f06f 0305 	mvn.w	r3, #5
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	e010      	b.n	8005a90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a9c <osKernelStart+0x48>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d109      	bne.n	8005a8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a76:	f7ff ffc1 	bl	80059fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a7a:	4b08      	ldr	r3, [pc, #32]	@ (8005a9c <osKernelStart+0x48>)
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a80:	f001 f872 	bl	8006b68 <vTaskStartScheduler>
      stat = osOK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	e002      	b.n	8005a90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a90:	687b      	ldr	r3, [r7, #4]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200006a0 	.word	0x200006a0

08005aa0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08e      	sub	sp, #56	@ 0x38
 8005aa4:	af04      	add	r7, sp, #16
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ab0:	f3ef 8305 	mrs	r3, IPSR
 8005ab4:	617b      	str	r3, [r7, #20]
  return(result);
 8005ab6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d17e      	bne.n	8005bba <osThreadNew+0x11a>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d07b      	beq.n	8005bba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ac2:	2380      	movs	r3, #128	@ 0x80
 8005ac4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ac6:	2318      	movs	r3, #24
 8005ac8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d045      	beq.n	8005b66 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d002      	beq.n	8005ae8 <osThreadNew+0x48>
        name = attr->name;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <osThreadNew+0x6e>
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b38      	cmp	r3, #56	@ 0x38
 8005b00:	d805      	bhi.n	8005b0e <osThreadNew+0x6e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <osThreadNew+0x72>
        return (NULL);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e054      	b.n	8005bbc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	089b      	lsrs	r3, r3, #2
 8005b20:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00e      	beq.n	8005b48 <osThreadNew+0xa8>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b30:	d90a      	bls.n	8005b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d006      	beq.n	8005b48 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <osThreadNew+0xa8>
        mem = 1;
 8005b42:	2301      	movs	r3, #1
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	e010      	b.n	8005b6a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10c      	bne.n	8005b6a <osThreadNew+0xca>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d108      	bne.n	8005b6a <osThreadNew+0xca>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d104      	bne.n	8005b6a <osThreadNew+0xca>
          mem = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e001      	b.n	8005b6a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b66:	2300      	movs	r3, #0
 8005b68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d110      	bne.n	8005b92 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b78:	9202      	str	r2, [sp, #8]
 8005b7a:	9301      	str	r3, [sp, #4]
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6a3a      	ldr	r2, [r7, #32]
 8005b84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 fe12 	bl	80067b0 <xTaskCreateStatic>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	e013      	b.n	8005bba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d110      	bne.n	8005bba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f107 0310 	add.w	r3, r7, #16
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fe60 	bl	8006870 <xTaskCreate>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d001      	beq.n	8005bba <osThreadNew+0x11a>
            hTask = NULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005bba:	693b      	ldr	r3, [r7, #16]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3728      	adds	r7, #40	@ 0x28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bcc:	f3ef 8305 	mrs	r3, IPSR
 8005bd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <osDelay+0x1c>
    stat = osErrorISR;
 8005bd8:	f06f 0305 	mvn.w	r3, #5
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	e007      	b.n	8005bf0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 ff86 	bl	8006afc <vTaskDelay>
    }
  }

  return (stat);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a06      	ldr	r2, [pc, #24]	@ (8005c24 <vApplicationGetIdleTaskMemory+0x28>)
 8005c0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a05      	ldr	r2, [pc, #20]	@ (8005c28 <vApplicationGetIdleTaskMemory+0x2c>)
 8005c12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2280      	movs	r2, #128	@ 0x80
 8005c18:	601a      	str	r2, [r3, #0]
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr
 8005c24:	200006a4 	.word	0x200006a4
 8005c28:	20000700 	.word	0x20000700

08005c2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a07      	ldr	r2, [pc, #28]	@ (8005c58 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4a06      	ldr	r2, [pc, #24]	@ (8005c5c <vApplicationGetTimerTaskMemory+0x30>)
 8005c42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c4a:	601a      	str	r2, [r3, #0]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000900 	.word	0x20000900
 8005c5c:	2000095c 	.word	0x2000095c

08005c60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f103 0208 	add.w	r2, r3, #8
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f04f 32ff 	mov.w	r2, #4294967295
 8005c78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f103 0208 	add.w	r2, r3, #8
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f103 0208 	add.w	r2, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bc80      	pop	{r7}
 8005c9c:	4770      	bx	lr

08005c9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bc80      	pop	{r7}
 8005cb4:	4770      	bx	lr

08005cb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b085      	sub	sp, #20
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	601a      	str	r2, [r3, #0]
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr

08005cfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d12:	d103      	bne.n	8005d1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	60fb      	str	r3, [r7, #12]
 8005d1a:	e00c      	b.n	8005d36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	e002      	b.n	8005d2a <vListInsert+0x2e>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d2f6      	bcs.n	8005d24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	601a      	str	r2, [r3, #0]
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bc80      	pop	{r7}
 8005d6a:	4770      	bx	lr

08005d6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6852      	ldr	r2, [r2, #4]
 8005d8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d103      	bne.n	8005da0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1e5a      	subs	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bc80      	pop	{r7}
 8005dbc:	4770      	bx	lr
	...

08005dc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10b      	bne.n	8005dec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005de6:	bf00      	nop
 8005de8:	bf00      	nop
 8005dea:	e7fd      	b.n	8005de8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005dec:	f002 f836 	bl	8007e5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dfc:	fb01 f303 	mul.w	r3, r1, r3
 8005e00:	441a      	add	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	441a      	add	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	22ff      	movs	r2, #255	@ 0xff
 8005e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	22ff      	movs	r2, #255	@ 0xff
 8005e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d114      	bne.n	8005e6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d01a      	beq.n	8005e80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3310      	adds	r3, #16
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 f916 	bl	8007080 <xTaskRemoveFromEventList>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d012      	beq.n	8005e80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e90 <xQueueGenericReset+0xd0>)
 8005e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	e009      	b.n	8005e80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	3310      	adds	r3, #16
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fef5 	bl	8005c60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	3324      	adds	r3, #36	@ 0x24
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fef0 	bl	8005c60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e80:	f002 f81c 	bl	8007ebc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e84:	2301      	movs	r3, #1
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b08e      	sub	sp, #56	@ 0x38
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
 8005ea0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10b      	bne.n	8005ec0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	e7fd      	b.n	8005ebc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10b      	bne.n	8005ede <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	e7fd      	b.n	8005eda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <xQueueGenericCreateStatic+0x56>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <xQueueGenericCreateStatic+0x5a>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericCreateStatic+0x5c>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	623b      	str	r3, [r7, #32]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d102      	bne.n	8005f18 <xQueueGenericCreateStatic+0x84>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d101      	bne.n	8005f1c <xQueueGenericCreateStatic+0x88>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <xQueueGenericCreateStatic+0x8a>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10b      	bne.n	8005f3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	61fb      	str	r3, [r7, #28]
}
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	e7fd      	b.n	8005f36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f3a:	2350      	movs	r3, #80	@ 0x50
 8005f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b50      	cmp	r3, #80	@ 0x50
 8005f42:	d00b      	beq.n	8005f5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61bb      	str	r3, [r7, #24]
}
 8005f56:	bf00      	nop
 8005f58:	bf00      	nop
 8005f5a:	e7fd      	b.n	8005f58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00d      	beq.n	8005f84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f805 	bl	8005f8e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3730      	adds	r7, #48	@ 0x30
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
 8005f9a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d103      	bne.n	8005faa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e002      	b.n	8005fb0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	69b8      	ldr	r0, [r7, #24]
 8005fc0:	f7ff fefe 	bl	8005dc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08e      	sub	sp, #56	@ 0x38
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <xQueueGenericSend+0x34>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	e7fd      	b.n	8006004 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <xQueueGenericSend+0x42>
 800600e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <xQueueGenericSend+0x46>
 8006016:	2301      	movs	r3, #1
 8006018:	e000      	b.n	800601c <xQueueGenericSend+0x48>
 800601a:	2300      	movs	r3, #0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10b      	bne.n	8006038 <xQueueGenericSend+0x64>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006032:	bf00      	nop
 8006034:	bf00      	nop
 8006036:	e7fd      	b.n	8006034 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d103      	bne.n	8006046 <xQueueGenericSend+0x72>
 800603e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <xQueueGenericSend+0x76>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <xQueueGenericSend+0x78>
 800604a:	2300      	movs	r3, #0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <xQueueGenericSend+0x94>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	623b      	str	r3, [r7, #32]
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	e7fd      	b.n	8006064 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006068:	f001 f9ca 	bl	8007400 <xTaskGetSchedulerState>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <xQueueGenericSend+0xa4>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <xQueueGenericSend+0xa8>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <xQueueGenericSend+0xaa>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <xQueueGenericSend+0xc6>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	61fb      	str	r3, [r7, #28]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800609a:	f001 fedf 	bl	8007e5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d302      	bcc.n	80060b0 <xQueueGenericSend+0xdc>
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d129      	bne.n	8006104 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	68b9      	ldr	r1, [r7, #8]
 80060b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b6:	f000 fa0f 	bl	80064d8 <prvCopyDataToQueue>
 80060ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c6:	3324      	adds	r3, #36	@ 0x24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 ffd9 	bl	8007080 <xTaskRemoveFromEventList>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d013      	beq.n	80060fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80060d4:	4b3f      	ldr	r3, [pc, #252]	@ (80061d4 <xQueueGenericSend+0x200>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	e00a      	b.n	80060fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80060ec:	4b39      	ldr	r3, [pc, #228]	@ (80061d4 <xQueueGenericSend+0x200>)
 80060ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80060fc:	f001 fede 	bl	8007ebc <vPortExitCritical>
				return pdPASS;
 8006100:	2301      	movs	r3, #1
 8006102:	e063      	b.n	80061cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800610a:	f001 fed7 	bl	8007ebc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800610e:	2300      	movs	r3, #0
 8006110:	e05c      	b.n	80061cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006114:	2b00      	cmp	r3, #0
 8006116:	d106      	bne.n	8006126 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4618      	mov	r0, r3
 800611e:	f001 f813 	bl	8007148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006126:	f001 fec9 	bl	8007ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800612a:	f000 fd85 	bl	8006c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800612e:	f001 fe95 	bl	8007e5c <vPortEnterCritical>
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006138:	b25b      	sxtb	r3, r3
 800613a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800613e:	d103      	bne.n	8006148 <xQueueGenericSend+0x174>
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800614e:	b25b      	sxtb	r3, r3
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006154:	d103      	bne.n	800615e <xQueueGenericSend+0x18a>
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800615e:	f001 fead 	bl	8007ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006162:	1d3a      	adds	r2, r7, #4
 8006164:	f107 0314 	add.w	r3, r7, #20
 8006168:	4611      	mov	r1, r2
 800616a:	4618      	mov	r0, r3
 800616c:	f001 f802 	bl	8007174 <xTaskCheckForTimeOut>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d124      	bne.n	80061c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006176:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006178:	f000 faa6 	bl	80066c8 <prvIsQueueFull>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d018      	beq.n	80061b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	3310      	adds	r3, #16
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f000 ff26 	bl	8006fdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006192:	f000 fa31 	bl	80065f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006196:	f000 fd5d 	bl	8006c54 <xTaskResumeAll>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	f47f af7c 	bne.w	800609a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80061a2:	4b0c      	ldr	r3, [pc, #48]	@ (80061d4 <xQueueGenericSend+0x200>)
 80061a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	f3bf 8f4f 	dsb	sy
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	e772      	b.n	800609a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80061b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061b6:	f000 fa1f 	bl	80065f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061ba:	f000 fd4b 	bl	8006c54 <xTaskResumeAll>
 80061be:	e76c      	b.n	800609a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80061c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061c2:	f000 fa19 	bl	80065f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061c6:	f000 fd45 	bl	8006c54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80061ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3738      	adds	r7, #56	@ 0x38
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	e000ed04 	.word	0xe000ed04

080061d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b090      	sub	sp, #64	@ 0x40
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10b      	bne.n	8006208 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <xQueueGenericSendFromISR+0x3e>
 800620e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <xQueueGenericSendFromISR+0x42>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueGenericSendFromISR+0x44>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006232:	bf00      	nop
 8006234:	bf00      	nop
 8006236:	e7fd      	b.n	8006234 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d103      	bne.n	8006246 <xQueueGenericSendFromISR+0x6e>
 800623e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <xQueueGenericSendFromISR+0x72>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <xQueueGenericSendFromISR+0x74>
 800624a:	2300      	movs	r3, #0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006254:	f383 8811 	msr	BASEPRI, r3
 8006258:	f3bf 8f6f 	isb	sy
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	623b      	str	r3, [r7, #32]
}
 8006262:	bf00      	nop
 8006264:	bf00      	nop
 8006266:	e7fd      	b.n	8006264 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006268:	f001 feba 	bl	8007fe0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800626c:	f3ef 8211 	mrs	r2, BASEPRI
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	61fa      	str	r2, [r7, #28]
 8006282:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006284:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006286:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800628c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006290:	429a      	cmp	r2, r3
 8006292:	d302      	bcc.n	800629a <xQueueGenericSendFromISR+0xc2>
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b02      	cmp	r3, #2
 8006298:	d12f      	bne.n	80062fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800629a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80062b0:	f000 f912 	bl	80064d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80062b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062bc:	d112      	bne.n	80062e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c8:	3324      	adds	r3, #36	@ 0x24
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fed8 	bl	8007080 <xTaskRemoveFromEventList>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00e      	beq.n	80062f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00b      	beq.n	80062f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e007      	b.n	80062f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80062e8:	3301      	adds	r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	b25a      	sxtb	r2, r3
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80062f4:	2301      	movs	r3, #1
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80062f8:	e001      	b.n	80062fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062fa:	2300      	movs	r3, #0
 80062fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006300:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006308:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800630a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800630c:	4618      	mov	r0, r3
 800630e:	3740      	adds	r7, #64	@ 0x40
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08c      	sub	sp, #48	@ 0x30
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006320:	2300      	movs	r3, #0
 8006322:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10b      	bne.n	8006346 <xQueueReceive+0x32>
	__asm volatile
 800632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006332:	f383 8811 	msr	BASEPRI, r3
 8006336:	f3bf 8f6f 	isb	sy
 800633a:	f3bf 8f4f 	dsb	sy
 800633e:	623b      	str	r3, [r7, #32]
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	e7fd      	b.n	8006342 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d103      	bne.n	8006354 <xQueueReceive+0x40>
 800634c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <xQueueReceive+0x44>
 8006354:	2301      	movs	r3, #1
 8006356:	e000      	b.n	800635a <xQueueReceive+0x46>
 8006358:	2300      	movs	r3, #0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <xQueueReceive+0x62>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	61fb      	str	r3, [r7, #28]
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	e7fd      	b.n	8006372 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006376:	f001 f843 	bl	8007400 <xTaskGetSchedulerState>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <xQueueReceive+0x72>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <xQueueReceive+0x76>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <xQueueReceive+0x78>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10b      	bne.n	80063a8 <xQueueReceive+0x94>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	61bb      	str	r3, [r7, #24]
}
 80063a2:	bf00      	nop
 80063a4:	bf00      	nop
 80063a6:	e7fd      	b.n	80063a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063a8:	f001 fd58 	bl	8007e5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80063ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01f      	beq.n	80063f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063bc:	f000 f8f6 	bl	80065ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c2:	1e5a      	subs	r2, r3, #1
 80063c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00f      	beq.n	80063f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	3310      	adds	r3, #16
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 fe53 	bl	8007080 <xTaskRemoveFromEventList>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063e0:	4b3c      	ldr	r3, [pc, #240]	@ (80064d4 <xQueueReceive+0x1c0>)
 80063e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063f0:	f001 fd64 	bl	8007ebc <vPortExitCritical>
				return pdPASS;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e069      	b.n	80064cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d103      	bne.n	8006406 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063fe:	f001 fd5d 	bl	8007ebc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006402:	2300      	movs	r3, #0
 8006404:	e062      	b.n	80064cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d106      	bne.n	800641a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800640c:	f107 0310 	add.w	r3, r7, #16
 8006410:	4618      	mov	r0, r3
 8006412:	f000 fe99 	bl	8007148 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006416:	2301      	movs	r3, #1
 8006418:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800641a:	f001 fd4f 	bl	8007ebc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800641e:	f000 fc0b 	bl	8006c38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006422:	f001 fd1b 	bl	8007e5c <vPortEnterCritical>
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800642c:	b25b      	sxtb	r3, r3
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006432:	d103      	bne.n	800643c <xQueueReceive+0x128>
 8006434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006442:	b25b      	sxtb	r3, r3
 8006444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006448:	d103      	bne.n	8006452 <xQueueReceive+0x13e>
 800644a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006452:	f001 fd33 	bl	8007ebc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006456:	1d3a      	adds	r2, r7, #4
 8006458:	f107 0310 	add.w	r3, r7, #16
 800645c:	4611      	mov	r1, r2
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fe88 	bl	8007174 <xTaskCheckForTimeOut>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d123      	bne.n	80064b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800646a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800646c:	f000 f916 	bl	800669c <prvIsQueueEmpty>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d017      	beq.n	80064a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	3324      	adds	r3, #36	@ 0x24
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4611      	mov	r1, r2
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fdac 	bl	8006fdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006486:	f000 f8b7 	bl	80065f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800648a:	f000 fbe3 	bl	8006c54 <xTaskResumeAll>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d189      	bne.n	80063a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006494:	4b0f      	ldr	r3, [pc, #60]	@ (80064d4 <xQueueReceive+0x1c0>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	e780      	b.n	80063a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80064a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064a8:	f000 f8a6 	bl	80065f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ac:	f000 fbd2 	bl	8006c54 <xTaskResumeAll>
 80064b0:	e77a      	b.n	80063a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80064b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064b4:	f000 f8a0 	bl	80065f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064b8:	f000 fbcc 	bl	8006c54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064be:	f000 f8ed 	bl	800669c <prvIsQueueEmpty>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f43f af6f 	beq.w	80063a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3730      	adds	r7, #48	@ 0x30
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10d      	bne.n	8006512 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d14d      	bne.n	800659a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ff9a 	bl	800743c <xTaskPriorityDisinherit>
 8006508:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	e043      	b.n	800659a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d119      	bne.n	800654c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6858      	ldr	r0, [r3, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	461a      	mov	r2, r3
 8006522:	68b9      	ldr	r1, [r7, #8]
 8006524:	f001 ffba 	bl	800849c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d32b      	bcc.n	800659a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	605a      	str	r2, [r3, #4]
 800654a:	e026      	b.n	800659a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	68d8      	ldr	r0, [r3, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006554:	461a      	mov	r2, r3
 8006556:	68b9      	ldr	r1, [r7, #8]
 8006558:	f001 ffa0 	bl	800849c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006564:	425b      	negs	r3, r3
 8006566:	441a      	add	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d207      	bcs.n	8006588 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689a      	ldr	r2, [r3, #8]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	425b      	negs	r3, r3
 8006582:	441a      	add	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b02      	cmp	r3, #2
 800658c:	d105      	bne.n	800659a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3b01      	subs	r3, #1
 8006598:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d018      	beq.n	80065f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d303      	bcc.n	80065e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68d9      	ldr	r1, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e8:	461a      	mov	r2, r3
 80065ea:	6838      	ldr	r0, [r7, #0]
 80065ec:	f001 ff56 	bl	800849c <memcpy>
	}
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006600:	f001 fc2c 	bl	8007e5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800660a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800660c:	e011      	b.n	8006632 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	2b00      	cmp	r3, #0
 8006614:	d012      	beq.n	800663c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3324      	adds	r3, #36	@ 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fd30 	bl	8007080 <xTaskRemoveFromEventList>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006626:	f000 fe09 	bl	800723c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	3b01      	subs	r3, #1
 800662e:	b2db      	uxtb	r3, r3
 8006630:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dce9      	bgt.n	800660e <prvUnlockQueue+0x16>
 800663a:	e000      	b.n	800663e <prvUnlockQueue+0x46>
					break;
 800663c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	22ff      	movs	r2, #255	@ 0xff
 8006642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006646:	f001 fc39 	bl	8007ebc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800664a:	f001 fc07 	bl	8007e5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006654:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006656:	e011      	b.n	800667c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d012      	beq.n	8006686 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3310      	adds	r3, #16
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fd0b 	bl	8007080 <xTaskRemoveFromEventList>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006670:	f000 fde4 	bl	800723c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	3b01      	subs	r3, #1
 8006678:	b2db      	uxtb	r3, r3
 800667a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800667c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006680:	2b00      	cmp	r3, #0
 8006682:	dce9      	bgt.n	8006658 <prvUnlockQueue+0x60>
 8006684:	e000      	b.n	8006688 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006686:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	22ff      	movs	r2, #255	@ 0xff
 800668c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006690:	f001 fc14 	bl	8007ebc <vPortExitCritical>
}
 8006694:	bf00      	nop
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066a4:	f001 fbda 	bl	8007e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	e001      	b.n	80066ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066ba:	f001 fbff 	bl	8007ebc <vPortExitCritical>

	return xReturn;
 80066be:	68fb      	ldr	r3, [r7, #12]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80066d0:	f001 fbc4 	bl	8007e5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066dc:	429a      	cmp	r2, r3
 80066de:	d102      	bne.n	80066e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80066e0:	2301      	movs	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e001      	b.n	80066ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80066ea:	f001 fbe7 	bl	8007ebc <vPortExitCritical>

	return xReturn;
 80066ee:	68fb      	ldr	r3, [r7, #12]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	e014      	b.n	8006732 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006708:	4a0e      	ldr	r2, [pc, #56]	@ (8006744 <vQueueAddToRegistry+0x4c>)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006714:	490b      	ldr	r1, [pc, #44]	@ (8006744 <vQueueAddToRegistry+0x4c>)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800671e:	4a09      	ldr	r2, [pc, #36]	@ (8006744 <vQueueAddToRegistry+0x4c>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4413      	add	r3, r2
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800672a:	e006      	b.n	800673a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b07      	cmp	r3, #7
 8006736:	d9e7      	bls.n	8006708 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006738:	bf00      	nop
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	bc80      	pop	{r7}
 8006742:	4770      	bx	lr
 8006744:	20000d5c 	.word	0x20000d5c

08006748 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006758:	f001 fb80 	bl	8007e5c <vPortEnterCritical>
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006762:	b25b      	sxtb	r3, r3
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d103      	bne.n	8006772 <vQueueWaitForMessageRestricted+0x2a>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006778:	b25b      	sxtb	r3, r3
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d103      	bne.n	8006788 <vQueueWaitForMessageRestricted+0x40>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006788:	f001 fb98 	bl	8007ebc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3324      	adds	r3, #36	@ 0x24
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68b9      	ldr	r1, [r7, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fc43 	bl	8007028 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80067a2:	6978      	ldr	r0, [r7, #20]
 80067a4:	f7ff ff28 	bl	80065f8 <prvUnlockQueue>
	}
 80067a8:	bf00      	nop
 80067aa:	3718      	adds	r7, #24
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	@ 0x38
 80067b4:	af04      	add	r7, sp, #16
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10b      	bne.n	80067dc <xTaskCreateStatic+0x2c>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	623b      	str	r3, [r7, #32]
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	e7fd      	b.n	80067d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80067dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10b      	bne.n	80067fa <xTaskCreateStatic+0x4a>
	__asm volatile
 80067e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e6:	f383 8811 	msr	BASEPRI, r3
 80067ea:	f3bf 8f6f 	isb	sy
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	61fb      	str	r3, [r7, #28]
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop
 80067f8:	e7fd      	b.n	80067f6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80067fa:	235c      	movs	r3, #92	@ 0x5c
 80067fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	2b5c      	cmp	r3, #92	@ 0x5c
 8006802:	d00b      	beq.n	800681c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	61bb      	str	r3, [r7, #24]
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	e7fd      	b.n	8006818 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800681c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800681e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01e      	beq.n	8006862 <xTaskCreateStatic+0xb2>
 8006824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01b      	beq.n	8006862 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	2202      	movs	r2, #2
 8006838:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800683c:	2300      	movs	r3, #0
 800683e:	9303      	str	r3, [sp, #12]
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	9302      	str	r3, [sp, #8]
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f850 	bl	80068fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800685a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800685c:	f000 f8de 	bl	8006a1c <prvAddNewTaskToReadyList>
 8006860:	e001      	b.n	8006866 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006866:	697b      	ldr	r3, [r7, #20]
	}
 8006868:	4618      	mov	r0, r3
 800686a:	3728      	adds	r7, #40	@ 0x28
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08c      	sub	sp, #48	@ 0x30
 8006874:	af04      	add	r7, sp, #16
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	603b      	str	r3, [r7, #0]
 800687c:	4613      	mov	r3, r2
 800687e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006880:	88fb      	ldrh	r3, [r7, #6]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f001 fbeb 	bl	8008060 <pvPortMalloc>
 800688a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00e      	beq.n	80068b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006892:	205c      	movs	r0, #92	@ 0x5c
 8006894:	f001 fbe4 	bl	8008060 <pvPortMalloc>
 8006898:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80068a6:	e005      	b.n	80068b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068a8:	6978      	ldr	r0, [r7, #20]
 80068aa:	f001 fca7 	bl	80081fc <vPortFree>
 80068ae:	e001      	b.n	80068b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d017      	beq.n	80068ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	2300      	movs	r3, #0
 80068c6:	9303      	str	r3, [sp, #12]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	9302      	str	r3, [sp, #8]
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f80e 	bl	80068fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068de:	69f8      	ldr	r0, [r7, #28]
 80068e0:	f000 f89c 	bl	8006a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80068e4:	2301      	movs	r3, #1
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e002      	b.n	80068f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80068ea:	f04f 33ff 	mov.w	r3, #4294967295
 80068ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80068f0:	69bb      	ldr	r3, [r7, #24]
	}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3720      	adds	r7, #32
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b088      	sub	sp, #32
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	461a      	mov	r2, r3
 8006912:	21a5      	movs	r1, #165	@ 0xa5
 8006914:	f001 fd90 	bl	8008438 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006922:	3b01      	subs	r3, #1
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f023 0307 	bic.w	r3, r3, #7
 8006930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	617b      	str	r3, [r7, #20]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01f      	beq.n	800699a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e012      	b.n	8006986 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	7819      	ldrb	r1, [r3, #0]
 8006968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	4413      	add	r3, r2
 800696e:	3334      	adds	r3, #52	@ 0x34
 8006970:	460a      	mov	r2, r1
 8006972:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b0f      	cmp	r3, #15
 800698a:	d9e9      	bls.n	8006960 <prvInitialiseNewTask+0x66>
 800698c:	e000      	b.n	8006990 <prvInitialiseNewTask+0x96>
			{
				break;
 800698e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006998:	e003      	b.n	80069a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800699a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a4:	2b37      	cmp	r3, #55	@ 0x37
 80069a6:	d901      	bls.n	80069ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069a8:	2337      	movs	r3, #55	@ 0x37
 80069aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80069b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ba:	2200      	movs	r2, #0
 80069bc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	3304      	adds	r3, #4
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff f96b 	bl	8005c9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ca:	3318      	adds	r3, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff f966 	bl	8005c9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80069de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80069e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ea:	2200      	movs	r2, #0
 80069ec:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	69b8      	ldr	r0, [r7, #24]
 80069fc:	f001 f93a 	bl	8007c74 <pxPortInitialiseStack>
 8006a00:	4602      	mov	r2, r0
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a12:	bf00      	nop
 8006a14:	3720      	adds	r7, #32
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a24:	f001 fa1a 	bl	8007e5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a28:	4b2d      	ldr	r3, [pc, #180]	@ (8006ae0 <prvAddNewTaskToReadyList+0xc4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae0 <prvAddNewTaskToReadyList+0xc4>)
 8006a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a32:	4b2c      	ldr	r3, [pc, #176]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d109      	bne.n	8006a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a40:	4b27      	ldr	r3, [pc, #156]	@ (8006ae0 <prvAddNewTaskToReadyList+0xc4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d110      	bne.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a48:	f000 fc1c 	bl	8007284 <prvInitialiseTaskLists>
 8006a4c:	e00d      	b.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a4e:	4b26      	ldr	r3, [pc, #152]	@ (8006ae8 <prvAddNewTaskToReadyList+0xcc>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d109      	bne.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a56:	4b23      	ldr	r3, [pc, #140]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d802      	bhi.n	8006a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a6a:	4b20      	ldr	r3, [pc, #128]	@ (8006aec <prvAddNewTaskToReadyList+0xd0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	4a1e      	ldr	r2, [pc, #120]	@ (8006aec <prvAddNewTaskToReadyList+0xd0>)
 8006a72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006a74:	4b1d      	ldr	r3, [pc, #116]	@ (8006aec <prvAddNewTaskToReadyList+0xd0>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a80:	4b1b      	ldr	r3, [pc, #108]	@ (8006af0 <prvAddNewTaskToReadyList+0xd4>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d903      	bls.n	8006a90 <prvAddNewTaskToReadyList+0x74>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	4a18      	ldr	r2, [pc, #96]	@ (8006af0 <prvAddNewTaskToReadyList+0xd4>)
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4a15      	ldr	r2, [pc, #84]	@ (8006af4 <prvAddNewTaskToReadyList+0xd8>)
 8006a9e:	441a      	add	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7ff f905 	bl	8005cb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006aac:	f001 fa06 	bl	8007ebc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <prvAddNewTaskToReadyList+0xcc>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <prvAddNewTaskToReadyList+0xc8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d207      	bcs.n	8006ad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8006af8 <prvAddNewTaskToReadyList+0xdc>)
 8006ac8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006acc:	601a      	str	r2, [r3, #0]
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20001270 	.word	0x20001270
 8006ae4:	20000d9c 	.word	0x20000d9c
 8006ae8:	2000127c 	.word	0x2000127c
 8006aec:	2000128c 	.word	0x2000128c
 8006af0:	20001278 	.word	0x20001278
 8006af4:	20000da0 	.word	0x20000da0
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d018      	beq.n	8006b40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b0e:	4b14      	ldr	r3, [pc, #80]	@ (8006b60 <vTaskDelay+0x64>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <vTaskDelay+0x32>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60bb      	str	r3, [r7, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006b2e:	f000 f883 	bl	8006c38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b32:	2100      	movs	r1, #0
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fcf1 	bl	800751c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b3a:	f000 f88b 	bl	8006c54 <xTaskResumeAll>
 8006b3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d107      	bne.n	8006b56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006b46:	4b07      	ldr	r3, [pc, #28]	@ (8006b64 <vTaskDelay+0x68>)
 8006b48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b56:	bf00      	nop
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20001298 	.word	0x20001298
 8006b64:	e000ed04 	.word	0xe000ed04

08006b68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08a      	sub	sp, #40	@ 0x28
 8006b6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b76:	463a      	mov	r2, r7
 8006b78:	1d39      	adds	r1, r7, #4
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7ff f83c 	bl	8005bfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68ba      	ldr	r2, [r7, #8]
 8006b8a:	9202      	str	r2, [sp, #8]
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	460a      	mov	r2, r1
 8006b96:	4922      	ldr	r1, [pc, #136]	@ (8006c20 <vTaskStartScheduler+0xb8>)
 8006b98:	4822      	ldr	r0, [pc, #136]	@ (8006c24 <vTaskStartScheduler+0xbc>)
 8006b9a:	f7ff fe09 	bl	80067b0 <xTaskCreateStatic>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <vTaskStartScheduler+0xc0>)
 8006ba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ba4:	4b20      	ldr	r3, [pc, #128]	@ (8006c28 <vTaskStartScheduler+0xc0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d002      	beq.n	8006bb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bac:	2301      	movs	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e001      	b.n	8006bb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d102      	bne.n	8006bc2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bbc:	f000 fd02 	bl	80075c4 <xTimerCreateTimerTask>
 8006bc0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d116      	bne.n	8006bf6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	613b      	str	r3, [r7, #16]
}
 8006bda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bdc:	4b13      	ldr	r3, [pc, #76]	@ (8006c2c <vTaskStartScheduler+0xc4>)
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006be4:	4b12      	ldr	r3, [pc, #72]	@ (8006c30 <vTaskStartScheduler+0xc8>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bea:	4b12      	ldr	r3, [pc, #72]	@ (8006c34 <vTaskStartScheduler+0xcc>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bf0:	f001 f8c2 	bl	8007d78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006bf4:	e00f      	b.n	8006c16 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bfc:	d10b      	bne.n	8006c16 <vTaskStartScheduler+0xae>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	60fb      	str	r3, [r7, #12]
}
 8006c10:	bf00      	nop
 8006c12:	bf00      	nop
 8006c14:	e7fd      	b.n	8006c12 <vTaskStartScheduler+0xaa>
}
 8006c16:	bf00      	nop
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08008e10 	.word	0x08008e10
 8006c24:	08007255 	.word	0x08007255
 8006c28:	20001294 	.word	0x20001294
 8006c2c:	20001290 	.word	0x20001290
 8006c30:	2000127c 	.word	0x2000127c
 8006c34:	20001274 	.word	0x20001274

08006c38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006c3c:	4b04      	ldr	r3, [pc, #16]	@ (8006c50 <vTaskSuspendAll+0x18>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	4a03      	ldr	r2, [pc, #12]	@ (8006c50 <vTaskSuspendAll+0x18>)
 8006c44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006c46:	bf00      	nop
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bc80      	pop	{r7}
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20001298 	.word	0x20001298

08006c54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c62:	4b42      	ldr	r3, [pc, #264]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10b      	bne.n	8006c82 <xTaskResumeAll+0x2e>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	603b      	str	r3, [r7, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	e7fd      	b.n	8006c7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c82:	f001 f8eb 	bl	8007e5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c86:	4b39      	ldr	r3, [pc, #228]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	4a37      	ldr	r2, [pc, #220]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c90:	4b36      	ldr	r3, [pc, #216]	@ (8006d6c <xTaskResumeAll+0x118>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d162      	bne.n	8006d5e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c98:	4b35      	ldr	r3, [pc, #212]	@ (8006d70 <xTaskResumeAll+0x11c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d05e      	beq.n	8006d5e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca0:	e02f      	b.n	8006d02 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca2:	4b34      	ldr	r3, [pc, #208]	@ (8006d74 <xTaskResumeAll+0x120>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3318      	adds	r3, #24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff f85c 	bl	8005d6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff f857 	bl	8005d6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d78 <xTaskResumeAll+0x124>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d903      	bls.n	8006cd2 <xTaskResumeAll+0x7e>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cce:	4a2a      	ldr	r2, [pc, #168]	@ (8006d78 <xTaskResumeAll+0x124>)
 8006cd0:	6013      	str	r3, [r2, #0]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4a27      	ldr	r2, [pc, #156]	@ (8006d7c <xTaskResumeAll+0x128>)
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3304      	adds	r3, #4
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7fe ffe4 	bl	8005cb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf2:	4b23      	ldr	r3, [pc, #140]	@ (8006d80 <xTaskResumeAll+0x12c>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d302      	bcc.n	8006d02 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006cfc:	4b21      	ldr	r3, [pc, #132]	@ (8006d84 <xTaskResumeAll+0x130>)
 8006cfe:	2201      	movs	r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d02:	4b1c      	ldr	r3, [pc, #112]	@ (8006d74 <xTaskResumeAll+0x120>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1cb      	bne.n	8006ca2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d10:	f000 fb56 	bl	80073c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006d14:	4b1c      	ldr	r3, [pc, #112]	@ (8006d88 <xTaskResumeAll+0x134>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d010      	beq.n	8006d42 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d20:	f000 f844 	bl	8006dac <xTaskIncrementTick>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006d2a:	4b16      	ldr	r3, [pc, #88]	@ (8006d84 <xTaskResumeAll+0x130>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3b01      	subs	r3, #1
 8006d34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1f1      	bne.n	8006d20 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006d3c:	4b12      	ldr	r3, [pc, #72]	@ (8006d88 <xTaskResumeAll+0x134>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d42:	4b10      	ldr	r3, [pc, #64]	@ (8006d84 <xTaskResumeAll+0x130>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <xTaskResumeAll+0x138>)
 8006d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d5e:	f001 f8ad 	bl	8007ebc <vPortExitCritical>

	return xAlreadyYielded;
 8006d62:	68bb      	ldr	r3, [r7, #8]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20001298 	.word	0x20001298
 8006d70:	20001270 	.word	0x20001270
 8006d74:	20001230 	.word	0x20001230
 8006d78:	20001278 	.word	0x20001278
 8006d7c:	20000da0 	.word	0x20000da0
 8006d80:	20000d9c 	.word	0x20000d9c
 8006d84:	20001284 	.word	0x20001284
 8006d88:	20001280 	.word	0x20001280
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d96:	4b04      	ldr	r3, [pc, #16]	@ (8006da8 <xTaskGetTickCount+0x18>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d9c:	687b      	ldr	r3, [r7, #4]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr
 8006da8:	20001274 	.word	0x20001274

08006dac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006db2:	2300      	movs	r3, #0
 8006db4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db6:	4b4f      	ldr	r3, [pc, #316]	@ (8006ef4 <xTaskIncrementTick+0x148>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f040 8090 	bne.w	8006ee0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006dc0:	4b4d      	ldr	r3, [pc, #308]	@ (8006ef8 <xTaskIncrementTick+0x14c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8006ef8 <xTaskIncrementTick+0x14c>)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d121      	bne.n	8006e18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dd4:	4b49      	ldr	r3, [pc, #292]	@ (8006efc <xTaskIncrementTick+0x150>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d00b      	beq.n	8006df6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	603b      	str	r3, [r7, #0]
}
 8006df0:	bf00      	nop
 8006df2:	bf00      	nop
 8006df4:	e7fd      	b.n	8006df2 <xTaskIncrementTick+0x46>
 8006df6:	4b41      	ldr	r3, [pc, #260]	@ (8006efc <xTaskIncrementTick+0x150>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60fb      	str	r3, [r7, #12]
 8006dfc:	4b40      	ldr	r3, [pc, #256]	@ (8006f00 <xTaskIncrementTick+0x154>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a3e      	ldr	r2, [pc, #248]	@ (8006efc <xTaskIncrementTick+0x150>)
 8006e02:	6013      	str	r3, [r2, #0]
 8006e04:	4a3e      	ldr	r2, [pc, #248]	@ (8006f00 <xTaskIncrementTick+0x154>)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006f04 <xTaskIncrementTick+0x158>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	4a3c      	ldr	r2, [pc, #240]	@ (8006f04 <xTaskIncrementTick+0x158>)
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	f000 fad4 	bl	80073c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e18:	4b3b      	ldr	r3, [pc, #236]	@ (8006f08 <xTaskIncrementTick+0x15c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d349      	bcc.n	8006eb6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e22:	4b36      	ldr	r3, [pc, #216]	@ (8006efc <xTaskIncrementTick+0x150>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2c:	4b36      	ldr	r3, [pc, #216]	@ (8006f08 <xTaskIncrementTick+0x15c>)
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e32:	601a      	str	r2, [r3, #0]
					break;
 8006e34:	e03f      	b.n	8006eb6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e36:	4b31      	ldr	r3, [pc, #196]	@ (8006efc <xTaskIncrementTick+0x150>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d203      	bcs.n	8006e56 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e4e:	4a2e      	ldr	r2, [pc, #184]	@ (8006f08 <xTaskIncrementTick+0x15c>)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e54:	e02f      	b.n	8006eb6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe ff86 	bl	8005d6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d004      	beq.n	8006e72 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	3318      	adds	r3, #24
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7fe ff7d 	bl	8005d6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e76:	4b25      	ldr	r3, [pc, #148]	@ (8006f0c <xTaskIncrementTick+0x160>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d903      	bls.n	8006e86 <xTaskIncrementTick+0xda>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	4a22      	ldr	r2, [pc, #136]	@ (8006f0c <xTaskIncrementTick+0x160>)
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4a1f      	ldr	r2, [pc, #124]	@ (8006f10 <xTaskIncrementTick+0x164>)
 8006e94:	441a      	add	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	3304      	adds	r3, #4
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	f7fe ff0a 	bl	8005cb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8006f14 <xTaskIncrementTick+0x168>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d3b8      	bcc.n	8006e22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eb4:	e7b5      	b.n	8006e22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006eb6:	4b17      	ldr	r3, [pc, #92]	@ (8006f14 <xTaskIncrementTick+0x168>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	4914      	ldr	r1, [pc, #80]	@ (8006f10 <xTaskIncrementTick+0x164>)
 8006ebe:	4613      	mov	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	440b      	add	r3, r1
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d901      	bls.n	8006ed2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006ed2:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <xTaskIncrementTick+0x16c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006eda:	2301      	movs	r3, #1
 8006edc:	617b      	str	r3, [r7, #20]
 8006ede:	e004      	b.n	8006eea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f1c <xTaskIncrementTick+0x170>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8006f1c <xTaskIncrementTick+0x170>)
 8006ee8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006eea:	697b      	ldr	r3, [r7, #20]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	20001298 	.word	0x20001298
 8006ef8:	20001274 	.word	0x20001274
 8006efc:	20001228 	.word	0x20001228
 8006f00:	2000122c 	.word	0x2000122c
 8006f04:	20001288 	.word	0x20001288
 8006f08:	20001290 	.word	0x20001290
 8006f0c:	20001278 	.word	0x20001278
 8006f10:	20000da0 	.word	0x20000da0
 8006f14:	20000d9c 	.word	0x20000d9c
 8006f18:	20001284 	.word	0x20001284
 8006f1c:	20001280 	.word	0x20001280

08006f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f26:	4b28      	ldr	r3, [pc, #160]	@ (8006fc8 <vTaskSwitchContext+0xa8>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f2e:	4b27      	ldr	r3, [pc, #156]	@ (8006fcc <vTaskSwitchContext+0xac>)
 8006f30:	2201      	movs	r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f34:	e042      	b.n	8006fbc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006f36:	4b25      	ldr	r3, [pc, #148]	@ (8006fcc <vTaskSwitchContext+0xac>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3c:	4b24      	ldr	r3, [pc, #144]	@ (8006fd0 <vTaskSwitchContext+0xb0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e011      	b.n	8006f68 <vTaskSwitchContext+0x48>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <vTaskSwitchContext+0x42>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	607b      	str	r3, [r7, #4]
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <vTaskSwitchContext+0x3e>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	491a      	ldr	r1, [pc, #104]	@ (8006fd4 <vTaskSwitchContext+0xb4>)
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0e3      	beq.n	8006f44 <vTaskSwitchContext+0x24>
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a13      	ldr	r2, [pc, #76]	@ (8006fd4 <vTaskSwitchContext+0xb4>)
 8006f88:	4413      	add	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	605a      	str	r2, [r3, #4]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d104      	bne.n	8006fac <vTaskSwitchContext+0x8c>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	605a      	str	r2, [r3, #4]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	4a09      	ldr	r2, [pc, #36]	@ (8006fd8 <vTaskSwitchContext+0xb8>)
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	4a06      	ldr	r2, [pc, #24]	@ (8006fd0 <vTaskSwitchContext+0xb0>)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6013      	str	r3, [r2, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20001298 	.word	0x20001298
 8006fcc:	20001284 	.word	0x20001284
 8006fd0:	20001278 	.word	0x20001278
 8006fd4:	20000da0 	.word	0x20000da0
 8006fd8:	20000d9c 	.word	0x20000d9c

08006fdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d10b      	bne.n	8007004 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff0:	f383 8811 	msr	BASEPRI, r3
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	f3bf 8f4f 	dsb	sy
 8006ffc:	60fb      	str	r3, [r7, #12]
}
 8006ffe:	bf00      	nop
 8007000:	bf00      	nop
 8007002:	e7fd      	b.n	8007000 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007004:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <vTaskPlaceOnEventList+0x48>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3318      	adds	r3, #24
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f7fe fe75 	bl	8005cfc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007012:	2101      	movs	r1, #1
 8007014:	6838      	ldr	r0, [r7, #0]
 8007016:	f000 fa81 	bl	800751c <prvAddCurrentTaskToDelayedList>
}
 800701a:	bf00      	nop
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000d9c 	.word	0x20000d9c

08007028 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b086      	sub	sp, #24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	617b      	str	r3, [r7, #20]
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007052:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <vTaskPlaceOnEventListRestricted+0x54>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3318      	adds	r3, #24
 8007058:	4619      	mov	r1, r3
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f7fe fe2b 	bl	8005cb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007066:	f04f 33ff 	mov.w	r3, #4294967295
 800706a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	68b8      	ldr	r0, [r7, #8]
 8007070:	f000 fa54 	bl	800751c <prvAddCurrentTaskToDelayedList>
	}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000d9c 	.word	0x20000d9c

08007080 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	60fb      	str	r3, [r7, #12]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3318      	adds	r3, #24
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe fe5a 	bl	8005d6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b8:	4b1d      	ldr	r3, [pc, #116]	@ (8007130 <xTaskRemoveFromEventList+0xb0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d11d      	bne.n	80070fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe fe51 	bl	8005d6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ce:	4b19      	ldr	r3, [pc, #100]	@ (8007134 <xTaskRemoveFromEventList+0xb4>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d903      	bls.n	80070de <xTaskRemoveFromEventList+0x5e>
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	4a16      	ldr	r2, [pc, #88]	@ (8007134 <xTaskRemoveFromEventList+0xb4>)
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4a13      	ldr	r2, [pc, #76]	@ (8007138 <xTaskRemoveFromEventList+0xb8>)
 80070ec:	441a      	add	r2, r3
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fe fdde 	bl	8005cb6 <vListInsertEnd>
 80070fa:	e005      	b.n	8007108 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	3318      	adds	r3, #24
 8007100:	4619      	mov	r1, r3
 8007102:	480e      	ldr	r0, [pc, #56]	@ (800713c <xTaskRemoveFromEventList+0xbc>)
 8007104:	f7fe fdd7 	bl	8005cb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710c:	4b0c      	ldr	r3, [pc, #48]	@ (8007140 <xTaskRemoveFromEventList+0xc0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	429a      	cmp	r2, r3
 8007114:	d905      	bls.n	8007122 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007116:	2301      	movs	r3, #1
 8007118:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800711a:	4b0a      	ldr	r3, [pc, #40]	@ (8007144 <xTaskRemoveFromEventList+0xc4>)
 800711c:	2201      	movs	r2, #1
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e001      	b.n	8007126 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007126:	697b      	ldr	r3, [r7, #20]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	20001298 	.word	0x20001298
 8007134:	20001278 	.word	0x20001278
 8007138:	20000da0 	.word	0x20000da0
 800713c:	20001230 	.word	0x20001230
 8007140:	20000d9c 	.word	0x20000d9c
 8007144:	20001284 	.word	0x20001284

08007148 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007150:	4b06      	ldr	r3, [pc, #24]	@ (800716c <vTaskInternalSetTimeOutState+0x24>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007158:	4b05      	ldr	r3, [pc, #20]	@ (8007170 <vTaskInternalSetTimeOutState+0x28>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	605a      	str	r2, [r3, #4]
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	bc80      	pop	{r7}
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20001288 	.word	0x20001288
 8007170:	20001274 	.word	0x20001274

08007174 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007188:	f383 8811 	msr	BASEPRI, r3
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f3bf 8f4f 	dsb	sy
 8007194:	613b      	str	r3, [r7, #16]
}
 8007196:	bf00      	nop
 8007198:	bf00      	nop
 800719a:	e7fd      	b.n	8007198 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	60fb      	str	r3, [r7, #12]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80071ba:	f000 fe4f 	bl	8007e5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071be:	4b1d      	ldr	r3, [pc, #116]	@ (8007234 <xTaskCheckForTimeOut+0xc0>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d6:	d102      	bne.n	80071de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071d8:	2300      	movs	r3, #0
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	e023      	b.n	8007226 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b15      	ldr	r3, [pc, #84]	@ (8007238 <xTaskCheckForTimeOut+0xc4>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d007      	beq.n	80071fa <xTaskCheckForTimeOut+0x86>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071f4:	2301      	movs	r3, #1
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e015      	b.n	8007226 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	429a      	cmp	r2, r3
 8007202:	d20b      	bcs.n	800721c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	1ad2      	subs	r2, r2, r3
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ff99 	bl	8007148 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	61fb      	str	r3, [r7, #28]
 800721a:	e004      	b.n	8007226 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007222:	2301      	movs	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007226:	f000 fe49 	bl	8007ebc <vPortExitCritical>

	return xReturn;
 800722a:	69fb      	ldr	r3, [r7, #28]
}
 800722c:	4618      	mov	r0, r3
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20001274 	.word	0x20001274
 8007238:	20001288 	.word	0x20001288

0800723c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800723c:	b480      	push	{r7}
 800723e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007240:	4b03      	ldr	r3, [pc, #12]	@ (8007250 <vTaskMissedYield+0x14>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	bc80      	pop	{r7}
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	20001284 	.word	0x20001284

08007254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800725c:	f000 f852 	bl	8007304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007260:	4b06      	ldr	r3, [pc, #24]	@ (800727c <prvIdleTask+0x28>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d9f9      	bls.n	800725c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007268:	4b05      	ldr	r3, [pc, #20]	@ (8007280 <prvIdleTask+0x2c>)
 800726a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007278:	e7f0      	b.n	800725c <prvIdleTask+0x8>
 800727a:	bf00      	nop
 800727c:	20000da0 	.word	0x20000da0
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800728a:	2300      	movs	r3, #0
 800728c:	607b      	str	r3, [r7, #4]
 800728e:	e00c      	b.n	80072aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4a12      	ldr	r2, [pc, #72]	@ (80072e4 <prvInitialiseTaskLists+0x60>)
 800729c:	4413      	add	r3, r2
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fcde 	bl	8005c60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3301      	adds	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b37      	cmp	r3, #55	@ 0x37
 80072ae:	d9ef      	bls.n	8007290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072b0:	480d      	ldr	r0, [pc, #52]	@ (80072e8 <prvInitialiseTaskLists+0x64>)
 80072b2:	f7fe fcd5 	bl	8005c60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072b6:	480d      	ldr	r0, [pc, #52]	@ (80072ec <prvInitialiseTaskLists+0x68>)
 80072b8:	f7fe fcd2 	bl	8005c60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072bc:	480c      	ldr	r0, [pc, #48]	@ (80072f0 <prvInitialiseTaskLists+0x6c>)
 80072be:	f7fe fccf 	bl	8005c60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072c2:	480c      	ldr	r0, [pc, #48]	@ (80072f4 <prvInitialiseTaskLists+0x70>)
 80072c4:	f7fe fccc 	bl	8005c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80072c8:	480b      	ldr	r0, [pc, #44]	@ (80072f8 <prvInitialiseTaskLists+0x74>)
 80072ca:	f7fe fcc9 	bl	8005c60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ce:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <prvInitialiseTaskLists+0x78>)
 80072d0:	4a05      	ldr	r2, [pc, #20]	@ (80072e8 <prvInitialiseTaskLists+0x64>)
 80072d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <prvInitialiseTaskLists+0x7c>)
 80072d6:	4a05      	ldr	r2, [pc, #20]	@ (80072ec <prvInitialiseTaskLists+0x68>)
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20000da0 	.word	0x20000da0
 80072e8:	20001200 	.word	0x20001200
 80072ec:	20001214 	.word	0x20001214
 80072f0:	20001230 	.word	0x20001230
 80072f4:	20001244 	.word	0x20001244
 80072f8:	2000125c 	.word	0x2000125c
 80072fc:	20001228 	.word	0x20001228
 8007300:	2000122c 	.word	0x2000122c

08007304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800730a:	e019      	b.n	8007340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800730c:	f000 fda6 	bl	8007e5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007310:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <prvCheckTasksWaitingTermination+0x50>)
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3304      	adds	r3, #4
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fd25 	bl	8005d6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007322:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <prvCheckTasksWaitingTermination+0x54>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	3b01      	subs	r3, #1
 8007328:	4a0b      	ldr	r2, [pc, #44]	@ (8007358 <prvCheckTasksWaitingTermination+0x54>)
 800732a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3b01      	subs	r3, #1
 8007332:	4a0a      	ldr	r2, [pc, #40]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007336:	f000 fdc1 	bl	8007ebc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f810 	bl	8007360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007340:	4b06      	ldr	r3, [pc, #24]	@ (800735c <prvCheckTasksWaitingTermination+0x58>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e1      	bne.n	800730c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20001244 	.word	0x20001244
 8007358:	20001270 	.word	0x20001270
 800735c:	20001258 	.word	0x20001258

08007360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800736e:	2b00      	cmp	r3, #0
 8007370:	d108      	bne.n	8007384 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007376:	4618      	mov	r0, r3
 8007378:	f000 ff40 	bl	80081fc <vPortFree>
				vPortFree( pxTCB );
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 ff3d 	bl	80081fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007382:	e019      	b.n	80073b8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800738a:	2b01      	cmp	r3, #1
 800738c:	d103      	bne.n	8007396 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 ff34 	bl	80081fc <vPortFree>
	}
 8007394:	e010      	b.n	80073b8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800739c:	2b02      	cmp	r3, #2
 800739e:	d00b      	beq.n	80073b8 <prvDeleteTCB+0x58>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	60fb      	str	r3, [r7, #12]
}
 80073b2:	bf00      	nop
 80073b4:	bf00      	nop
 80073b6:	e7fd      	b.n	80073b4 <prvDeleteTCB+0x54>
	}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073c6:	4b0c      	ldr	r3, [pc, #48]	@ (80073f8 <prvResetNextTaskUnblockTime+0x38>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d104      	bne.n	80073da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073d0:	4b0a      	ldr	r3, [pc, #40]	@ (80073fc <prvResetNextTaskUnblockTime+0x3c>)
 80073d2:	f04f 32ff 	mov.w	r2, #4294967295
 80073d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073d8:	e008      	b.n	80073ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073da:	4b07      	ldr	r3, [pc, #28]	@ (80073f8 <prvResetNextTaskUnblockTime+0x38>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	4a04      	ldr	r2, [pc, #16]	@ (80073fc <prvResetNextTaskUnblockTime+0x3c>)
 80073ea:	6013      	str	r3, [r2, #0]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20001228 	.word	0x20001228
 80073fc:	20001290 	.word	0x20001290

08007400 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007406:	4b0b      	ldr	r3, [pc, #44]	@ (8007434 <xTaskGetSchedulerState+0x34>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800740e:	2301      	movs	r3, #1
 8007410:	607b      	str	r3, [r7, #4]
 8007412:	e008      	b.n	8007426 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007414:	4b08      	ldr	r3, [pc, #32]	@ (8007438 <xTaskGetSchedulerState+0x38>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800741c:	2302      	movs	r3, #2
 800741e:	607b      	str	r3, [r7, #4]
 8007420:	e001      	b.n	8007426 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007422:	2300      	movs	r3, #0
 8007424:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007426:	687b      	ldr	r3, [r7, #4]
	}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	bc80      	pop	{r7}
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2000127c 	.word	0x2000127c
 8007438:	20001298 	.word	0x20001298

0800743c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d058      	beq.n	8007504 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007452:	4b2f      	ldr	r3, [pc, #188]	@ (8007510 <xTaskPriorityDisinherit+0xd4>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	429a      	cmp	r2, r3
 800745a:	d00b      	beq.n	8007474 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10b      	bne.n	8007494 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	60bb      	str	r3, [r7, #8]
}
 800748e:	bf00      	nop
 8007490:	bf00      	nop
 8007492:	e7fd      	b.n	8007490 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007498:	1e5a      	subs	r2, r3, #1
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d02c      	beq.n	8007504 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d128      	bne.n	8007504 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	3304      	adds	r3, #4
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fc58 	bl	8005d6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <xTaskPriorityDisinherit+0xd8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d903      	bls.n	80074e4 <xTaskPriorityDisinherit+0xa8>
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007514 <xTaskPriorityDisinherit+0xd8>)
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4a09      	ldr	r2, [pc, #36]	@ (8007518 <xTaskPriorityDisinherit+0xdc>)
 80074f2:	441a      	add	r2, r3
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	3304      	adds	r3, #4
 80074f8:	4619      	mov	r1, r3
 80074fa:	4610      	mov	r0, r2
 80074fc:	f7fe fbdb 	bl	8005cb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007504:	697b      	ldr	r3, [r7, #20]
	}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000d9c 	.word	0x20000d9c
 8007514:	20001278 	.word	0x20001278
 8007518:	20000da0 	.word	0x20000da0

0800751c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007526:	4b21      	ldr	r3, [pc, #132]	@ (80075ac <prvAddCurrentTaskToDelayedList+0x90>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800752c:	4b20      	ldr	r3, [pc, #128]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3304      	adds	r3, #4
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fc1a 	bl	8005d6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d10a      	bne.n	8007556 <prvAddCurrentTaskToDelayedList+0x3a>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007546:	4b1a      	ldr	r3, [pc, #104]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3304      	adds	r3, #4
 800754c:	4619      	mov	r1, r3
 800754e:	4819      	ldr	r0, [pc, #100]	@ (80075b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007550:	f7fe fbb1 	bl	8005cb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007554:	e026      	b.n	80075a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4413      	add	r3, r2
 800755c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800755e:	4b14      	ldr	r3, [pc, #80]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	429a      	cmp	r2, r3
 800756c:	d209      	bcs.n	8007582 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800756e:	4b12      	ldr	r3, [pc, #72]	@ (80075b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	4b0f      	ldr	r3, [pc, #60]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3304      	adds	r3, #4
 8007578:	4619      	mov	r1, r3
 800757a:	4610      	mov	r0, r2
 800757c:	f7fe fbbe 	bl	8005cfc <vListInsert>
}
 8007580:	e010      	b.n	80075a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007582:	4b0e      	ldr	r3, [pc, #56]	@ (80075bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	4b0a      	ldr	r3, [pc, #40]	@ (80075b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3304      	adds	r3, #4
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7fe fbb4 	bl	8005cfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007594:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	429a      	cmp	r2, r3
 800759c:	d202      	bcs.n	80075a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800759e:	4a08      	ldr	r2, [pc, #32]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	6013      	str	r3, [r2, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20001274 	.word	0x20001274
 80075b0:	20000d9c 	.word	0x20000d9c
 80075b4:	2000125c 	.word	0x2000125c
 80075b8:	2000122c 	.word	0x2000122c
 80075bc:	20001228 	.word	0x20001228
 80075c0:	20001290 	.word	0x20001290

080075c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08a      	sub	sp, #40	@ 0x28
 80075c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075ce:	f000 fb11 	bl	8007bf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007648 <xTimerCreateTimerTask+0x84>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d021      	beq.n	800761e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075de:	2300      	movs	r3, #0
 80075e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075e2:	1d3a      	adds	r2, r7, #4
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	f107 030c 	add.w	r3, r7, #12
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7fe fb1d 	bl	8005c2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	9202      	str	r2, [sp, #8]
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	2302      	movs	r3, #2
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2300      	movs	r3, #0
 8007602:	460a      	mov	r2, r1
 8007604:	4911      	ldr	r1, [pc, #68]	@ (800764c <xTimerCreateTimerTask+0x88>)
 8007606:	4812      	ldr	r0, [pc, #72]	@ (8007650 <xTimerCreateTimerTask+0x8c>)
 8007608:	f7ff f8d2 	bl	80067b0 <xTaskCreateStatic>
 800760c:	4603      	mov	r3, r0
 800760e:	4a11      	ldr	r2, [pc, #68]	@ (8007654 <xTimerCreateTimerTask+0x90>)
 8007610:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007612:	4b10      	ldr	r3, [pc, #64]	@ (8007654 <xTimerCreateTimerTask+0x90>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800761a:	2301      	movs	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10b      	bne.n	800763c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	613b      	str	r3, [r7, #16]
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800763c:	697b      	ldr	r3, [r7, #20]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	200012cc 	.word	0x200012cc
 800764c:	08008e18 	.word	0x08008e18
 8007650:	08007791 	.word	0x08007791
 8007654:	200012d0 	.word	0x200012d0

08007658 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	@ 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
 8007664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007666:	2300      	movs	r3, #0
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <xTimerGenericCommand+0x30>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	623b      	str	r3, [r7, #32]
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007688:	4b19      	ldr	r3, [pc, #100]	@ (80076f0 <xTimerGenericCommand+0x98>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02a      	beq.n	80076e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b05      	cmp	r3, #5
 80076a0:	dc18      	bgt.n	80076d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076a2:	f7ff fead 	bl	8007400 <xTaskGetSchedulerState>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d109      	bne.n	80076c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076ac:	4b10      	ldr	r3, [pc, #64]	@ (80076f0 <xTimerGenericCommand+0x98>)
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	f107 0110 	add.w	r1, r7, #16
 80076b4:	2300      	movs	r3, #0
 80076b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b8:	f7fe fc8c 	bl	8005fd4 <xQueueGenericSend>
 80076bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80076be:	e012      	b.n	80076e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076c0:	4b0b      	ldr	r3, [pc, #44]	@ (80076f0 <xTimerGenericCommand+0x98>)
 80076c2:	6818      	ldr	r0, [r3, #0]
 80076c4:	f107 0110 	add.w	r1, r7, #16
 80076c8:	2300      	movs	r3, #0
 80076ca:	2200      	movs	r2, #0
 80076cc:	f7fe fc82 	bl	8005fd4 <xQueueGenericSend>
 80076d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80076d2:	e008      	b.n	80076e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076d4:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <xTimerGenericCommand+0x98>)
 80076d6:	6818      	ldr	r0, [r3, #0]
 80076d8:	f107 0110 	add.w	r1, r7, #16
 80076dc:	2300      	movs	r3, #0
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	f7fe fd7a 	bl	80061d8 <xQueueGenericSendFromISR>
 80076e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3728      	adds	r7, #40	@ 0x28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	200012cc 	.word	0x200012cc

080076f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af02      	add	r7, sp, #8
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076fe:	4b23      	ldr	r3, [pc, #140]	@ (800778c <prvProcessExpiredTimer+0x98>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	3304      	adds	r3, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f7fe fb2d 	bl	8005d6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d023      	beq.n	8007768 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	18d1      	adds	r1, r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	6978      	ldr	r0, [r7, #20]
 800772e:	f000 f8d3 	bl	80078d8 <prvInsertTimerInActiveList>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d020      	beq.n	800777a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007738:	2300      	movs	r3, #0
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	2100      	movs	r1, #0
 8007742:	6978      	ldr	r0, [r7, #20]
 8007744:	f7ff ff88 	bl	8007658 <xTimerGenericCommand>
 8007748:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d114      	bne.n	800777a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	60fb      	str	r3, [r7, #12]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800776e:	f023 0301 	bic.w	r3, r3, #1
 8007772:	b2da      	uxtb	r2, r3
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	6978      	ldr	r0, [r7, #20]
 8007780:	4798      	blx	r3
}
 8007782:	bf00      	nop
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	200012c4 	.word	0x200012c4

08007790 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007798:	f107 0308 	add.w	r3, r7, #8
 800779c:	4618      	mov	r0, r3
 800779e:	f000 f859 	bl	8007854 <prvGetNextExpireTime>
 80077a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4619      	mov	r1, r3
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 f805 	bl	80077b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077ae:	f000 f8d5 	bl	800795c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077b2:	bf00      	nop
 80077b4:	e7f0      	b.n	8007798 <prvTimerTask+0x8>
	...

080077b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077c2:	f7ff fa39 	bl	8006c38 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077c6:	f107 0308 	add.w	r3, r7, #8
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 f864 	bl	8007898 <prvSampleTimeNow>
 80077d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d130      	bne.n	800783a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d10a      	bne.n	80077f4 <prvProcessTimerOrBlockTask+0x3c>
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d806      	bhi.n	80077f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077e6:	f7ff fa35 	bl	8006c54 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077ea:	68f9      	ldr	r1, [r7, #12]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff ff81 	bl	80076f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80077f2:	e024      	b.n	800783e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80077fa:	4b13      	ldr	r3, [pc, #76]	@ (8007848 <prvProcessTimerOrBlockTask+0x90>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <prvProcessTimerOrBlockTask+0x50>
 8007804:	2301      	movs	r3, #1
 8007806:	e000      	b.n	800780a <prvProcessTimerOrBlockTask+0x52>
 8007808:	2300      	movs	r3, #0
 800780a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800780c:	4b0f      	ldr	r3, [pc, #60]	@ (800784c <prvProcessTimerOrBlockTask+0x94>)
 800780e:	6818      	ldr	r0, [r3, #0]
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	4619      	mov	r1, r3
 800781a:	f7fe ff95 	bl	8006748 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800781e:	f7ff fa19 	bl	8006c54 <xTaskResumeAll>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <prvProcessTimerOrBlockTask+0x98>)
 800782a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	f3bf 8f6f 	isb	sy
}
 8007838:	e001      	b.n	800783e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800783a:	f7ff fa0b 	bl	8006c54 <xTaskResumeAll>
}
 800783e:	bf00      	nop
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200012c8 	.word	0x200012c8
 800784c:	200012cc 	.word	0x200012cc
 8007850:	e000ed04 	.word	0xe000ed04

08007854 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800785c:	4b0d      	ldr	r3, [pc, #52]	@ (8007894 <prvGetNextExpireTime+0x40>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <prvGetNextExpireTime+0x16>
 8007866:	2201      	movs	r2, #1
 8007868:	e000      	b.n	800786c <prvGetNextExpireTime+0x18>
 800786a:	2200      	movs	r2, #0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d105      	bne.n	8007884 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007878:	4b06      	ldr	r3, [pc, #24]	@ (8007894 <prvGetNextExpireTime+0x40>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60fb      	str	r3, [r7, #12]
 8007882:	e001      	b.n	8007888 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007888:	68fb      	ldr	r3, [r7, #12]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr
 8007894:	200012c4 	.word	0x200012c4

08007898 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078a0:	f7ff fa76 	bl	8006d90 <xTaskGetTickCount>
 80078a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078a6:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <prvSampleTimeNow+0x3c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d205      	bcs.n	80078bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078b0:	f000 f93a 	bl	8007b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e002      	b.n	80078c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078c2:	4a04      	ldr	r2, [pc, #16]	@ (80078d4 <prvSampleTimeNow+0x3c>)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078c8:	68fb      	ldr	r3, [r7, #12]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	200012d4 	.word	0x200012d4

080078d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b086      	sub	sp, #24
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80078f6:	68ba      	ldr	r2, [r7, #8]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d812      	bhi.n	8007924 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	1ad2      	subs	r2, r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	429a      	cmp	r2, r3
 800790a:	d302      	bcc.n	8007912 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800790c:	2301      	movs	r3, #1
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	e01b      	b.n	800794a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007912:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <prvInsertTimerInActiveList+0x7c>)
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3304      	adds	r3, #4
 800791a:	4619      	mov	r1, r3
 800791c:	4610      	mov	r0, r2
 800791e:	f7fe f9ed 	bl	8005cfc <vListInsert>
 8007922:	e012      	b.n	800794a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d206      	bcs.n	800793a <prvInsertTimerInActiveList+0x62>
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d302      	bcc.n	800793a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007934:	2301      	movs	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e007      	b.n	800794a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800793a:	4b07      	ldr	r3, [pc, #28]	@ (8007958 <prvInsertTimerInActiveList+0x80>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3304      	adds	r3, #4
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f7fe f9d9 	bl	8005cfc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800794a:	697b      	ldr	r3, [r7, #20]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3718      	adds	r7, #24
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	200012c8 	.word	0x200012c8
 8007958:	200012c4 	.word	0x200012c4

0800795c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08e      	sub	sp, #56	@ 0x38
 8007960:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007962:	e0ce      	b.n	8007b02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	da19      	bge.n	800799e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800796a:	1d3b      	adds	r3, r7, #4
 800796c:	3304      	adds	r3, #4
 800796e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10b      	bne.n	800798e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	61fb      	str	r3, [r7, #28]
}
 8007988:	bf00      	nop
 800798a:	bf00      	nop
 800798c:	e7fd      	b.n	800798a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800798e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007994:	6850      	ldr	r0, [r2, #4]
 8007996:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007998:	6892      	ldr	r2, [r2, #8]
 800799a:	4611      	mov	r1, r2
 800799c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f2c0 80ae 	blt.w	8007b02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d004      	beq.n	80079bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe f9d8 	bl	8005d6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079bc:	463b      	mov	r3, r7
 80079be:	4618      	mov	r0, r3
 80079c0:	f7ff ff6a 	bl	8007898 <prvSampleTimeNow>
 80079c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b09      	cmp	r3, #9
 80079ca:	f200 8097 	bhi.w	8007afc <prvProcessReceivedCommands+0x1a0>
 80079ce:	a201      	add	r2, pc, #4	@ (adr r2, 80079d4 <prvProcessReceivedCommands+0x78>)
 80079d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	080079fd 	.word	0x080079fd
 80079dc:	080079fd 	.word	0x080079fd
 80079e0:	08007a73 	.word	0x08007a73
 80079e4:	08007a87 	.word	0x08007a87
 80079e8:	08007ad3 	.word	0x08007ad3
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	080079fd 	.word	0x080079fd
 80079f4:	08007a73 	.word	0x08007a73
 80079f8:	08007a87 	.word	0x08007a87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	18d1      	adds	r1, r2, r3
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a1c:	f7ff ff5c 	bl	80078d8 <prvInsertTimerInActiveList>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d06c      	beq.n	8007b00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d061      	beq.n	8007b00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	441a      	add	r2, r3
 8007a44:	2300      	movs	r3, #0
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a4e:	f7ff fe03 	bl	8007658 <xTimerGenericCommand>
 8007a52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d152      	bne.n	8007b00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	61bb      	str	r3, [r7, #24]
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	e7fd      	b.n	8007a6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a84:	e03d      	b.n	8007b02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a8c:	f043 0301 	orr.w	r3, r3, #1
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10b      	bne.n	8007abe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	617b      	str	r3, [r7, #20]
}
 8007ab8:	bf00      	nop
 8007aba:	bf00      	nop
 8007abc:	e7fd      	b.n	8007aba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	18d1      	adds	r1, r2, r3
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007acc:	f7ff ff04 	bl	80078d8 <prvInsertTimerInActiveList>
					break;
 8007ad0:	e017      	b.n	8007b02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d103      	bne.n	8007ae8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae2:	f000 fb8b 	bl	80081fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007ae6:	e00c      	b.n	8007b02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aee:	f023 0301 	bic.w	r3, r3, #1
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007afa:	e002      	b.n	8007b02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007afc:	bf00      	nop
 8007afe:	e000      	b.n	8007b02 <prvProcessReceivedCommands+0x1a6>
					break;
 8007b00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b02:	4b08      	ldr	r3, [pc, #32]	@ (8007b24 <prvProcessReceivedCommands+0x1c8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	1d39      	adds	r1, r7, #4
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fc02 	bl	8006314 <xQueueReceive>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f47f af26 	bne.w	8007964 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	3730      	adds	r7, #48	@ 0x30
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	200012cc 	.word	0x200012cc

08007b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b2e:	e049      	b.n	8007bc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b30:	4b2e      	ldr	r3, [pc, #184]	@ (8007bec <prvSwitchTimerLists+0xc4>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007bec <prvSwitchTimerLists+0xc4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe f90f 	bl	8005d6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d02f      	beq.n	8007bc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d90e      	bls.n	8007b94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b82:	4b1a      	ldr	r3, [pc, #104]	@ (8007bec <prvSwitchTimerLists+0xc4>)
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3304      	adds	r3, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4610      	mov	r0, r2
 8007b8e:	f7fe f8b5 	bl	8005cfc <vListInsert>
 8007b92:	e017      	b.n	8007bc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b94:	2300      	movs	r3, #0
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	2300      	movs	r3, #0
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff fd5a 	bl	8007658 <xTimerGenericCommand>
 8007ba4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10b      	bne.n	8007bc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	603b      	str	r3, [r7, #0]
}
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
 8007bc2:	e7fd      	b.n	8007bc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bc4:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <prvSwitchTimerLists+0xc4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1b0      	bne.n	8007b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bce:	4b07      	ldr	r3, [pc, #28]	@ (8007bec <prvSwitchTimerLists+0xc4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bd4:	4b06      	ldr	r3, [pc, #24]	@ (8007bf0 <prvSwitchTimerLists+0xc8>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a04      	ldr	r2, [pc, #16]	@ (8007bec <prvSwitchTimerLists+0xc4>)
 8007bda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bdc:	4a04      	ldr	r2, [pc, #16]	@ (8007bf0 <prvSwitchTimerLists+0xc8>)
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6013      	str	r3, [r2, #0]
}
 8007be2:	bf00      	nop
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200012c4 	.word	0x200012c4
 8007bf0:	200012c8 	.word	0x200012c8

08007bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007bfa:	f000 f92f 	bl	8007e5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007bfe:	4b15      	ldr	r3, [pc, #84]	@ (8007c54 <prvCheckForValidListAndQueue+0x60>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d120      	bne.n	8007c48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c06:	4814      	ldr	r0, [pc, #80]	@ (8007c58 <prvCheckForValidListAndQueue+0x64>)
 8007c08:	f7fe f82a 	bl	8005c60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c0c:	4813      	ldr	r0, [pc, #76]	@ (8007c5c <prvCheckForValidListAndQueue+0x68>)
 8007c0e:	f7fe f827 	bl	8005c60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c12:	4b13      	ldr	r3, [pc, #76]	@ (8007c60 <prvCheckForValidListAndQueue+0x6c>)
 8007c14:	4a10      	ldr	r2, [pc, #64]	@ (8007c58 <prvCheckForValidListAndQueue+0x64>)
 8007c16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c18:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <prvCheckForValidListAndQueue+0x70>)
 8007c1a:	4a10      	ldr	r2, [pc, #64]	@ (8007c5c <prvCheckForValidListAndQueue+0x68>)
 8007c1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c1e:	2300      	movs	r3, #0
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	4b11      	ldr	r3, [pc, #68]	@ (8007c68 <prvCheckForValidListAndQueue+0x74>)
 8007c24:	4a11      	ldr	r2, [pc, #68]	@ (8007c6c <prvCheckForValidListAndQueue+0x78>)
 8007c26:	2110      	movs	r1, #16
 8007c28:	200a      	movs	r0, #10
 8007c2a:	f7fe f933 	bl	8005e94 <xQueueGenericCreateStatic>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4a08      	ldr	r2, [pc, #32]	@ (8007c54 <prvCheckForValidListAndQueue+0x60>)
 8007c32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c34:	4b07      	ldr	r3, [pc, #28]	@ (8007c54 <prvCheckForValidListAndQueue+0x60>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d005      	beq.n	8007c48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <prvCheckForValidListAndQueue+0x60>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	490b      	ldr	r1, [pc, #44]	@ (8007c70 <prvCheckForValidListAndQueue+0x7c>)
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fd58 	bl	80066f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c48:	f000 f938 	bl	8007ebc <vPortExitCritical>
}
 8007c4c:	bf00      	nop
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	200012cc 	.word	0x200012cc
 8007c58:	2000129c 	.word	0x2000129c
 8007c5c:	200012b0 	.word	0x200012b0
 8007c60:	200012c4 	.word	0x200012c4
 8007c64:	200012c8 	.word	0x200012c8
 8007c68:	20001378 	.word	0x20001378
 8007c6c:	200012d8 	.word	0x200012d8
 8007c70:	08008e20 	.word	0x08008e20

08007c74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3b04      	subs	r3, #4
 8007c84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3b04      	subs	r3, #4
 8007c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	f023 0201 	bic.w	r2, r3, #1
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ca4:	4a08      	ldr	r2, [pc, #32]	@ (8007cc8 <pxPortInitialiseStack+0x54>)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3b14      	subs	r3, #20
 8007cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	3b20      	subs	r3, #32
 8007cba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr
 8007cc8:	08007ccd 	.word	0x08007ccd

08007ccc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cd6:	4b12      	ldr	r3, [pc, #72]	@ (8007d20 <prvTaskExitError+0x54>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d00b      	beq.n	8007cf8 <prvTaskExitError+0x2c>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	60fb      	str	r3, [r7, #12]
}
 8007cf2:	bf00      	nop
 8007cf4:	bf00      	nop
 8007cf6:	e7fd      	b.n	8007cf4 <prvTaskExitError+0x28>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60bb      	str	r3, [r7, #8]
}
 8007d0a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d0c:	bf00      	nop
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d0fc      	beq.n	8007d0e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr
 8007d20:	20000010 	.word	0x20000010
	...

08007d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d30:	4b07      	ldr	r3, [pc, #28]	@ (8007d50 <pxCurrentTCBConst2>)
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	6808      	ldr	r0, [r1, #0]
 8007d36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d3a:	f380 8809 	msr	PSP, r0
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f04f 0000 	mov.w	r0, #0
 8007d46:	f380 8811 	msr	BASEPRI, r0
 8007d4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007d4e:	4770      	bx	lr

08007d50 <pxCurrentTCBConst2>:
 8007d50:	20000d9c 	.word	0x20000d9c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007d58:	4806      	ldr	r0, [pc, #24]	@ (8007d74 <prvPortStartFirstTask+0x1c>)
 8007d5a:	6800      	ldr	r0, [r0, #0]
 8007d5c:	6800      	ldr	r0, [r0, #0]
 8007d5e:	f380 8808 	msr	MSP, r0
 8007d62:	b662      	cpsie	i
 8007d64:	b661      	cpsie	f
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	f3bf 8f6f 	isb	sy
 8007d6e:	df00      	svc	0
 8007d70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d72:	bf00      	nop
 8007d74:	e000ed08 	.word	0xe000ed08

08007d78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d7e:	4b32      	ldr	r3, [pc, #200]	@ (8007e48 <xPortStartScheduler+0xd0>)
 8007d80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	22ff      	movs	r2, #255	@ 0xff
 8007d8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e4c <xPortStartScheduler+0xd4>)
 8007da4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007da6:	4b2a      	ldr	r3, [pc, #168]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007da8:	2207      	movs	r2, #7
 8007daa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dac:	e009      	b.n	8007dc2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007dae:	4b28      	ldr	r3, [pc, #160]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	4a26      	ldr	r2, [pc, #152]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007db6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007db8:	78fb      	ldrb	r3, [r7, #3]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	b2db      	uxtb	r3, r3
 8007dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dca:	2b80      	cmp	r3, #128	@ 0x80
 8007dcc:	d0ef      	beq.n	8007dae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dce:	4b20      	ldr	r3, [pc, #128]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f1c3 0307 	rsb	r3, r3, #7
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	d00b      	beq.n	8007df2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	60bb      	str	r3, [r7, #8]
}
 8007dec:	bf00      	nop
 8007dee:	bf00      	nop
 8007df0:	e7fd      	b.n	8007dee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007df2:	4b17      	ldr	r3, [pc, #92]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	021b      	lsls	r3, r3, #8
 8007df8:	4a15      	ldr	r2, [pc, #84]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007dfa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dfc:	4b14      	ldr	r3, [pc, #80]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007e04:	4a12      	ldr	r2, [pc, #72]	@ (8007e50 <xPortStartScheduler+0xd8>)
 8007e06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007e10:	4b10      	ldr	r3, [pc, #64]	@ (8007e54 <xPortStartScheduler+0xdc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a0f      	ldr	r2, [pc, #60]	@ (8007e54 <xPortStartScheduler+0xdc>)
 8007e16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007e1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e54 <xPortStartScheduler+0xdc>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a0c      	ldr	r2, [pc, #48]	@ (8007e54 <xPortStartScheduler+0xdc>)
 8007e22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007e26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e28:	f000 f8b8 	bl	8007f9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <xPortStartScheduler+0xe0>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e32:	f7ff ff91 	bl	8007d58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e36:	f7ff f873 	bl	8006f20 <vTaskSwitchContext>
	prvTaskExitError();
 8007e3a:	f7ff ff47 	bl	8007ccc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	e000e400 	.word	0xe000e400
 8007e4c:	200013c8 	.word	0x200013c8
 8007e50:	200013cc 	.word	0x200013cc
 8007e54:	e000ed20 	.word	0xe000ed20
 8007e58:	20000010 	.word	0x20000010

08007e5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
	__asm volatile
 8007e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	607b      	str	r3, [r7, #4]
}
 8007e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e76:	4b0f      	ldr	r3, [pc, #60]	@ (8007eb4 <vPortEnterCritical+0x58>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8007eb4 <vPortEnterCritical+0x58>)
 8007e7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e80:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb4 <vPortEnterCritical+0x58>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d110      	bne.n	8007eaa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e88:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb8 <vPortEnterCritical+0x5c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00b      	beq.n	8007eaa <vPortEnterCritical+0x4e>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	603b      	str	r3, [r7, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	bf00      	nop
 8007ea8:	e7fd      	b.n	8007ea6 <vPortEnterCritical+0x4a>
	}
}
 8007eaa:	bf00      	nop
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bc80      	pop	{r7}
 8007eb2:	4770      	bx	lr
 8007eb4:	20000010 	.word	0x20000010
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ec2:	4b12      	ldr	r3, [pc, #72]	@ (8007f0c <vPortExitCritical+0x50>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <vPortExitCritical+0x26>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	607b      	str	r3, [r7, #4]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8007f0c <vPortExitCritical+0x50>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3b01      	subs	r3, #1
 8007ee8:	4a08      	ldr	r2, [pc, #32]	@ (8007f0c <vPortExitCritical+0x50>)
 8007eea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007eec:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <vPortExitCritical+0x50>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d105      	bne.n	8007f00 <vPortExitCritical+0x44>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	f383 8811 	msr	BASEPRI, r3
}
 8007efe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	20000010 	.word	0x20000010

08007f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007f10:	f3ef 8009 	mrs	r0, PSP
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	4b0d      	ldr	r3, [pc, #52]	@ (8007f50 <pxCurrentTCBConst>)
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f20:	6010      	str	r0, [r2, #0]
 8007f22:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007f26:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f2a:	f380 8811 	msr	BASEPRI, r0
 8007f2e:	f7fe fff7 	bl	8006f20 <vTaskSwitchContext>
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8811 	msr	BASEPRI, r0
 8007f3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f3e:	6819      	ldr	r1, [r3, #0]
 8007f40:	6808      	ldr	r0, [r1, #0]
 8007f42:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f46:	f380 8809 	msr	PSP, r0
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	4770      	bx	lr

08007f50 <pxCurrentTCBConst>:
 8007f50:	20000d9c 	.word	0x20000d9c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	607b      	str	r3, [r7, #4]
}
 8007f70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f72:	f7fe ff1b 	bl	8006dac <xTaskIncrementTick>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f7c:	4b06      	ldr	r3, [pc, #24]	@ (8007f98 <xPortSysTickHandler+0x40>)
 8007f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	2300      	movs	r3, #0
 8007f86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	f383 8811 	msr	BASEPRI, r3
}
 8007f8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	e000ed04 	.word	0xe000ed04

08007f9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fcc <vPortSetupTimerInterrupt+0x30>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd0 <vPortSetupTimerInterrupt+0x34>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fac:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <vPortSetupTimerInterrupt+0x38>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a09      	ldr	r2, [pc, #36]	@ (8007fd8 <vPortSetupTimerInterrupt+0x3c>)
 8007fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb6:	099b      	lsrs	r3, r3, #6
 8007fb8:	4a08      	ldr	r2, [pc, #32]	@ (8007fdc <vPortSetupTimerInterrupt+0x40>)
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fbe:	4b03      	ldr	r3, [pc, #12]	@ (8007fcc <vPortSetupTimerInterrupt+0x30>)
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	601a      	str	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bc80      	pop	{r7}
 8007fca:	4770      	bx	lr
 8007fcc:	e000e010 	.word	0xe000e010
 8007fd0:	e000e018 	.word	0xe000e018
 8007fd4:	20000004 	.word	0x20000004
 8007fd8:	10624dd3 	.word	0x10624dd3
 8007fdc:	e000e014 	.word	0xe000e014

08007fe0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fe6:	f3ef 8305 	mrs	r3, IPSR
 8007fea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2b0f      	cmp	r3, #15
 8007ff0:	d915      	bls.n	800801e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ff2:	4a17      	ldr	r2, [pc, #92]	@ (8008050 <vPortValidateInterruptPriority+0x70>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ffc:	4b15      	ldr	r3, [pc, #84]	@ (8008054 <vPortValidateInterruptPriority+0x74>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	7afa      	ldrb	r2, [r7, #11]
 8008002:	429a      	cmp	r2, r3
 8008004:	d20b      	bcs.n	800801e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	607b      	str	r3, [r7, #4]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800801e:	4b0e      	ldr	r3, [pc, #56]	@ (8008058 <vPortValidateInterruptPriority+0x78>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008026:	4b0d      	ldr	r3, [pc, #52]	@ (800805c <vPortValidateInterruptPriority+0x7c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	429a      	cmp	r2, r3
 800802c:	d90b      	bls.n	8008046 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800802e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008032:	f383 8811 	msr	BASEPRI, r3
 8008036:	f3bf 8f6f 	isb	sy
 800803a:	f3bf 8f4f 	dsb	sy
 800803e:	603b      	str	r3, [r7, #0]
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	e7fd      	b.n	8008042 <vPortValidateInterruptPriority+0x62>
	}
 8008046:	bf00      	nop
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr
 8008050:	e000e3f0 	.word	0xe000e3f0
 8008054:	200013c8 	.word	0x200013c8
 8008058:	e000ed0c 	.word	0xe000ed0c
 800805c:	200013cc 	.word	0x200013cc

08008060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08a      	sub	sp, #40	@ 0x28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008068:	2300      	movs	r3, #0
 800806a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800806c:	f7fe fde4 	bl	8006c38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008070:	4b5c      	ldr	r3, [pc, #368]	@ (80081e4 <pvPortMalloc+0x184>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008078:	f000 f924 	bl	80082c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800807c:	4b5a      	ldr	r3, [pc, #360]	@ (80081e8 <pvPortMalloc+0x188>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4013      	ands	r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	f040 8095 	bne.w	80081b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01e      	beq.n	80080ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008090:	2208      	movs	r2, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4413      	add	r3, r2
 8008096:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d015      	beq.n	80080ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f023 0307 	bic.w	r3, r3, #7
 80080a8:	3308      	adds	r3, #8
 80080aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00b      	beq.n	80080ce <pvPortMalloc+0x6e>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	617b      	str	r3, [r7, #20]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d06f      	beq.n	80081b4 <pvPortMalloc+0x154>
 80080d4:	4b45      	ldr	r3, [pc, #276]	@ (80081ec <pvPortMalloc+0x18c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d86a      	bhi.n	80081b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080de:	4b44      	ldr	r3, [pc, #272]	@ (80081f0 <pvPortMalloc+0x190>)
 80080e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080e2:	4b43      	ldr	r3, [pc, #268]	@ (80081f0 <pvPortMalloc+0x190>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080e8:	e004      	b.n	80080f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80080ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d903      	bls.n	8008106 <pvPortMalloc+0xa6>
 80080fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f1      	bne.n	80080ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008106:	4b37      	ldr	r3, [pc, #220]	@ (80081e4 <pvPortMalloc+0x184>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800810c:	429a      	cmp	r2, r3
 800810e:	d051      	beq.n	80081b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2208      	movs	r2, #8
 8008116:	4413      	add	r3, r2
 8008118:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	2308      	movs	r3, #8
 800812c:	005b      	lsls	r3, r3, #1
 800812e:	429a      	cmp	r2, r3
 8008130:	d920      	bls.n	8008174 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	f003 0307 	and.w	r3, r3, #7
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00b      	beq.n	800815c <pvPortMalloc+0xfc>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	613b      	str	r3, [r7, #16]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	1ad2      	subs	r2, r2, r3
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800816e:	69b8      	ldr	r0, [r7, #24]
 8008170:	f000 f90a 	bl	8008388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008174:	4b1d      	ldr	r3, [pc, #116]	@ (80081ec <pvPortMalloc+0x18c>)
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	4a1b      	ldr	r2, [pc, #108]	@ (80081ec <pvPortMalloc+0x18c>)
 8008180:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008182:	4b1a      	ldr	r3, [pc, #104]	@ (80081ec <pvPortMalloc+0x18c>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b1b      	ldr	r3, [pc, #108]	@ (80081f4 <pvPortMalloc+0x194>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	429a      	cmp	r2, r3
 800818c:	d203      	bcs.n	8008196 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800818e:	4b17      	ldr	r3, [pc, #92]	@ (80081ec <pvPortMalloc+0x18c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a18      	ldr	r2, [pc, #96]	@ (80081f4 <pvPortMalloc+0x194>)
 8008194:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	4b13      	ldr	r3, [pc, #76]	@ (80081e8 <pvPortMalloc+0x188>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	431a      	orrs	r2, r3
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80081aa:	4b13      	ldr	r3, [pc, #76]	@ (80081f8 <pvPortMalloc+0x198>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3301      	adds	r3, #1
 80081b0:	4a11      	ldr	r2, [pc, #68]	@ (80081f8 <pvPortMalloc+0x198>)
 80081b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081b4:	f7fe fd4e 	bl	8006c54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <pvPortMalloc+0x17a>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60fb      	str	r3, [r7, #12]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <pvPortMalloc+0x176>
	return pvReturn;
 80081da:	69fb      	ldr	r3, [r7, #28]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3728      	adds	r7, #40	@ 0x28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	20001fd8 	.word	0x20001fd8
 80081e8:	20001fec 	.word	0x20001fec
 80081ec:	20001fdc 	.word	0x20001fdc
 80081f0:	20001fd0 	.word	0x20001fd0
 80081f4:	20001fe0 	.word	0x20001fe0
 80081f8:	20001fe4 	.word	0x20001fe4

080081fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d04f      	beq.n	80082ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800820e:	2308      	movs	r3, #8
 8008210:	425b      	negs	r3, r3
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4413      	add	r3, r2
 8008216:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	4b25      	ldr	r3, [pc, #148]	@ (80082b8 <vPortFree+0xbc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4013      	ands	r3, r2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10b      	bne.n	8008242 <vPortFree+0x46>
	__asm volatile
 800822a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	60fb      	str	r3, [r7, #12]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <vPortFree+0x66>
	__asm volatile
 800824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800824e:	f383 8811 	msr	BASEPRI, r3
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	f3bf 8f4f 	dsb	sy
 800825a:	60bb      	str	r3, [r7, #8]
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	e7fd      	b.n	800825e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	4b14      	ldr	r3, [pc, #80]	@ (80082b8 <vPortFree+0xbc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01e      	beq.n	80082ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d11a      	bne.n	80082ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	4b0e      	ldr	r3, [pc, #56]	@ (80082b8 <vPortFree+0xbc>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	43db      	mvns	r3, r3
 8008282:	401a      	ands	r2, r3
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008288:	f7fe fcd6 	bl	8006c38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <vPortFree+0xc0>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4413      	add	r3, r2
 8008296:	4a09      	ldr	r2, [pc, #36]	@ (80082bc <vPortFree+0xc0>)
 8008298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800829a:	6938      	ldr	r0, [r7, #16]
 800829c:	f000 f874 	bl	8008388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082a0:	4b07      	ldr	r3, [pc, #28]	@ (80082c0 <vPortFree+0xc4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	4a06      	ldr	r2, [pc, #24]	@ (80082c0 <vPortFree+0xc4>)
 80082a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80082aa:	f7fe fcd3 	bl	8006c54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082ae:	bf00      	nop
 80082b0:	3718      	adds	r7, #24
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	20001fec 	.word	0x20001fec
 80082bc:	20001fdc 	.word	0x20001fdc
 80082c0:	20001fe8 	.word	0x20001fe8

080082c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80082ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80082ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80082d0:	4b27      	ldr	r3, [pc, #156]	@ (8008370 <prvHeapInit+0xac>)
 80082d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00c      	beq.n	80082f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3307      	adds	r3, #7
 80082e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0307 	bic.w	r3, r3, #7
 80082ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008370 <prvHeapInit+0xac>)
 80082f4:	4413      	add	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008374 <prvHeapInit+0xb0>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008302:	4b1c      	ldr	r3, [pc, #112]	@ (8008374 <prvHeapInit+0xb0>)
 8008304:	2200      	movs	r2, #0
 8008306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	4413      	add	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008310:	2208      	movs	r2, #8
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0307 	bic.w	r3, r3, #7
 800831e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a15      	ldr	r2, [pc, #84]	@ (8008378 <prvHeapInit+0xb4>)
 8008324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008326:	4b14      	ldr	r3, [pc, #80]	@ (8008378 <prvHeapInit+0xb4>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2200      	movs	r2, #0
 800832c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800832e:	4b12      	ldr	r3, [pc, #72]	@ (8008378 <prvHeapInit+0xb4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	1ad2      	subs	r2, r2, r3
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008344:	4b0c      	ldr	r3, [pc, #48]	@ (8008378 <prvHeapInit+0xb4>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4a0a      	ldr	r2, [pc, #40]	@ (800837c <prvHeapInit+0xb8>)
 8008352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	4a09      	ldr	r2, [pc, #36]	@ (8008380 <prvHeapInit+0xbc>)
 800835a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800835c:	4b09      	ldr	r3, [pc, #36]	@ (8008384 <prvHeapInit+0xc0>)
 800835e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008362:	601a      	str	r2, [r3, #0]
}
 8008364:	bf00      	nop
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	bc80      	pop	{r7}
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	200013d0 	.word	0x200013d0
 8008374:	20001fd0 	.word	0x20001fd0
 8008378:	20001fd8 	.word	0x20001fd8
 800837c:	20001fe0 	.word	0x20001fe0
 8008380:	20001fdc 	.word	0x20001fdc
 8008384:	20001fec 	.word	0x20001fec

08008388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008390:	4b27      	ldr	r3, [pc, #156]	@ (8008430 <prvInsertBlockIntoFreeList+0xa8>)
 8008392:	60fb      	str	r3, [r7, #12]
 8008394:	e002      	b.n	800839c <prvInsertBlockIntoFreeList+0x14>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d8f7      	bhi.n	8008396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d108      	bne.n	80083ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	441a      	add	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	441a      	add	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d118      	bne.n	8008410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4b14      	ldr	r3, [pc, #80]	@ (8008434 <prvInsertBlockIntoFreeList+0xac>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d00d      	beq.n	8008406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	441a      	add	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	e008      	b.n	8008418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008406:	4b0b      	ldr	r3, [pc, #44]	@ (8008434 <prvInsertBlockIntoFreeList+0xac>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e003      	b.n	8008418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	429a      	cmp	r2, r3
 800841e:	d002      	beq.n	8008426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008426:	bf00      	nop
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	bc80      	pop	{r7}
 800842e:	4770      	bx	lr
 8008430:	20001fd0 	.word	0x20001fd0
 8008434:	20001fd8 	.word	0x20001fd8

08008438 <memset>:
 8008438:	4603      	mov	r3, r0
 800843a:	4402      	add	r2, r0
 800843c:	4293      	cmp	r3, r2
 800843e:	d100      	bne.n	8008442 <memset+0xa>
 8008440:	4770      	bx	lr
 8008442:	f803 1b01 	strb.w	r1, [r3], #1
 8008446:	e7f9      	b.n	800843c <memset+0x4>

08008448 <__errno>:
 8008448:	4b01      	ldr	r3, [pc, #4]	@ (8008450 <__errno+0x8>)
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	20000014 	.word	0x20000014

08008454 <__libc_init_array>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	2600      	movs	r6, #0
 8008458:	4d0c      	ldr	r5, [pc, #48]	@ (800848c <__libc_init_array+0x38>)
 800845a:	4c0d      	ldr	r4, [pc, #52]	@ (8008490 <__libc_init_array+0x3c>)
 800845c:	1b64      	subs	r4, r4, r5
 800845e:	10a4      	asrs	r4, r4, #2
 8008460:	42a6      	cmp	r6, r4
 8008462:	d109      	bne.n	8008478 <__libc_init_array+0x24>
 8008464:	f000 fcbc 	bl	8008de0 <_init>
 8008468:	2600      	movs	r6, #0
 800846a:	4d0a      	ldr	r5, [pc, #40]	@ (8008494 <__libc_init_array+0x40>)
 800846c:	4c0a      	ldr	r4, [pc, #40]	@ (8008498 <__libc_init_array+0x44>)
 800846e:	1b64      	subs	r4, r4, r5
 8008470:	10a4      	asrs	r4, r4, #2
 8008472:	42a6      	cmp	r6, r4
 8008474:	d105      	bne.n	8008482 <__libc_init_array+0x2e>
 8008476:	bd70      	pop	{r4, r5, r6, pc}
 8008478:	f855 3b04 	ldr.w	r3, [r5], #4
 800847c:	4798      	blx	r3
 800847e:	3601      	adds	r6, #1
 8008480:	e7ee      	b.n	8008460 <__libc_init_array+0xc>
 8008482:	f855 3b04 	ldr.w	r3, [r5], #4
 8008486:	4798      	blx	r3
 8008488:	3601      	adds	r6, #1
 800848a:	e7f2      	b.n	8008472 <__libc_init_array+0x1e>
 800848c:	08008ed0 	.word	0x08008ed0
 8008490:	08008ed0 	.word	0x08008ed0
 8008494:	08008ed0 	.word	0x08008ed0
 8008498:	08008ed4 	.word	0x08008ed4

0800849c <memcpy>:
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a4:	d100      	bne.n	80084a8 <memcpy+0xc>
 80084a6:	4770      	bx	lr
 80084a8:	b510      	push	{r4, lr}
 80084aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ae:	4291      	cmp	r1, r2
 80084b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b4:	d1f9      	bne.n	80084aa <memcpy+0xe>
 80084b6:	bd10      	pop	{r4, pc}

080084b8 <powf>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	460c      	mov	r4, r1
 80084bc:	4606      	mov	r6, r0
 80084be:	f000 f851 	bl	8008564 <__ieee754_powf>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4605      	mov	r5, r0
 80084c6:	4620      	mov	r0, r4
 80084c8:	f7f8 f916 	bl	80006f8 <__aeabi_fcmpun>
 80084cc:	bb68      	cbnz	r0, 800852a <powf+0x72>
 80084ce:	2100      	movs	r1, #0
 80084d0:	4630      	mov	r0, r6
 80084d2:	f7f8 f8df 	bl	8000694 <__aeabi_fcmpeq>
 80084d6:	b190      	cbz	r0, 80084fe <powf+0x46>
 80084d8:	2100      	movs	r1, #0
 80084da:	4620      	mov	r0, r4
 80084dc:	f7f8 f8da 	bl	8000694 <__aeabi_fcmpeq>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d133      	bne.n	800854c <powf+0x94>
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 f834 	bl	8008552 <finitef>
 80084ea:	b1f0      	cbz	r0, 800852a <powf+0x72>
 80084ec:	2100      	movs	r1, #0
 80084ee:	4620      	mov	r0, r4
 80084f0:	f7f8 f8da 	bl	80006a8 <__aeabi_fcmplt>
 80084f4:	b1c8      	cbz	r0, 800852a <powf+0x72>
 80084f6:	f7ff ffa7 	bl	8008448 <__errno>
 80084fa:	2322      	movs	r3, #34	@ 0x22
 80084fc:	e014      	b.n	8008528 <powf+0x70>
 80084fe:	4628      	mov	r0, r5
 8008500:	f000 f827 	bl	8008552 <finitef>
 8008504:	b998      	cbnz	r0, 800852e <powf+0x76>
 8008506:	4630      	mov	r0, r6
 8008508:	f000 f823 	bl	8008552 <finitef>
 800850c:	b178      	cbz	r0, 800852e <powf+0x76>
 800850e:	4620      	mov	r0, r4
 8008510:	f000 f81f 	bl	8008552 <finitef>
 8008514:	b158      	cbz	r0, 800852e <powf+0x76>
 8008516:	4629      	mov	r1, r5
 8008518:	4628      	mov	r0, r5
 800851a:	f7f8 f8ed 	bl	80006f8 <__aeabi_fcmpun>
 800851e:	2800      	cmp	r0, #0
 8008520:	d0e9      	beq.n	80084f6 <powf+0x3e>
 8008522:	f7ff ff91 	bl	8008448 <__errno>
 8008526:	2321      	movs	r3, #33	@ 0x21
 8008528:	6003      	str	r3, [r0, #0]
 800852a:	4628      	mov	r0, r5
 800852c:	bd70      	pop	{r4, r5, r6, pc}
 800852e:	2100      	movs	r1, #0
 8008530:	4628      	mov	r0, r5
 8008532:	f7f8 f8af 	bl	8000694 <__aeabi_fcmpeq>
 8008536:	2800      	cmp	r0, #0
 8008538:	d0f7      	beq.n	800852a <powf+0x72>
 800853a:	4630      	mov	r0, r6
 800853c:	f000 f809 	bl	8008552 <finitef>
 8008540:	2800      	cmp	r0, #0
 8008542:	d0f2      	beq.n	800852a <powf+0x72>
 8008544:	4620      	mov	r0, r4
 8008546:	f000 f804 	bl	8008552 <finitef>
 800854a:	e7d3      	b.n	80084f4 <powf+0x3c>
 800854c:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 8008550:	e7eb      	b.n	800852a <powf+0x72>

08008552 <finitef>:
 8008552:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008556:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800855a:	bfac      	ite	ge
 800855c:	2000      	movge	r0, #0
 800855e:	2001      	movlt	r0, #1
 8008560:	4770      	bx	lr
	...

08008564 <__ieee754_powf>:
 8008564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008568:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 800856c:	4681      	mov	r9, r0
 800856e:	460f      	mov	r7, r1
 8008570:	4606      	mov	r6, r0
 8008572:	460c      	mov	r4, r1
 8008574:	b087      	sub	sp, #28
 8008576:	d10c      	bne.n	8008592 <__ieee754_powf+0x2e>
 8008578:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 800857c:	0076      	lsls	r6, r6, #1
 800857e:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8008582:	f240 8310 	bls.w	8008ba6 <__ieee754_powf+0x642>
 8008586:	4639      	mov	r1, r7
 8008588:	4648      	mov	r0, r9
 800858a:	f7f7 fde7 	bl	800015c <__addsf3>
 800858e:	4601      	mov	r1, r0
 8008590:	e043      	b.n	800861a <__ieee754_powf+0xb6>
 8008592:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8008596:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800859a:	d802      	bhi.n	80085a2 <__ieee754_powf+0x3e>
 800859c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80085a0:	d908      	bls.n	80085b4 <__ieee754_powf+0x50>
 80085a2:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80085a6:	d1ee      	bne.n	8008586 <__ieee754_powf+0x22>
 80085a8:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80085ac:	0064      	lsls	r4, r4, #1
 80085ae:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80085b2:	e7e6      	b.n	8008582 <__ieee754_powf+0x1e>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	da1f      	bge.n	80085f8 <__ieee754_powf+0x94>
 80085b8:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 80085bc:	f080 82f8 	bcs.w	8008bb0 <__ieee754_powf+0x64c>
 80085c0:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80085c4:	d32f      	bcc.n	8008626 <__ieee754_powf+0xc2>
 80085c6:	ea4f 53eb 	mov.w	r3, fp, asr #23
 80085ca:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80085ce:	fa4b f503 	asr.w	r5, fp, r3
 80085d2:	fa05 f303 	lsl.w	r3, r5, r3
 80085d6:	455b      	cmp	r3, fp
 80085d8:	d123      	bne.n	8008622 <__ieee754_powf+0xbe>
 80085da:	f005 0501 	and.w	r5, r5, #1
 80085de:	f1c5 0502 	rsb	r5, r5, #2
 80085e2:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 80085e6:	d11f      	bne.n	8008628 <__ieee754_powf+0xc4>
 80085e8:	2c00      	cmp	r4, #0
 80085ea:	4649      	mov	r1, r9
 80085ec:	da15      	bge.n	800861a <__ieee754_powf+0xb6>
 80085ee:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80085f2:	f7f7 ff6f 	bl	80004d4 <__aeabi_fdiv>
 80085f6:	e7ca      	b.n	800858e <__ieee754_powf+0x2a>
 80085f8:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 80085fc:	d111      	bne.n	8008622 <__ieee754_powf+0xbe>
 80085fe:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8008602:	f000 82d0 	beq.w	8008ba6 <__ieee754_powf+0x642>
 8008606:	d904      	bls.n	8008612 <__ieee754_powf+0xae>
 8008608:	2c00      	cmp	r4, #0
 800860a:	f280 82cf 	bge.w	8008bac <__ieee754_powf+0x648>
 800860e:	2100      	movs	r1, #0
 8008610:	e003      	b.n	800861a <__ieee754_powf+0xb6>
 8008612:	2c00      	cmp	r4, #0
 8008614:	dafb      	bge.n	800860e <__ieee754_powf+0xaa>
 8008616:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800861a:	4608      	mov	r0, r1
 800861c:	b007      	add	sp, #28
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	2500      	movs	r5, #0
 8008624:	e7dd      	b.n	80085e2 <__ieee754_powf+0x7e>
 8008626:	2500      	movs	r5, #0
 8008628:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800862c:	d104      	bne.n	8008638 <__ieee754_powf+0xd4>
 800862e:	4649      	mov	r1, r9
 8008630:	4648      	mov	r0, r9
 8008632:	f7f7 fe9b 	bl	800036c <__aeabi_fmul>
 8008636:	e7aa      	b.n	800858e <__ieee754_powf+0x2a>
 8008638:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800863c:	f040 82bd 	bne.w	8008bba <__ieee754_powf+0x656>
 8008640:	2e00      	cmp	r6, #0
 8008642:	f2c0 82ba 	blt.w	8008bba <__ieee754_powf+0x656>
 8008646:	4648      	mov	r0, r9
 8008648:	b007      	add	sp, #28
 800864a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864e:	f000 bb57 	b.w	8008d00 <__ieee754_sqrtf>
 8008652:	2d01      	cmp	r5, #1
 8008654:	d1e1      	bne.n	800861a <__ieee754_powf+0xb6>
 8008656:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800865a:	e798      	b.n	800858e <__ieee754_powf+0x2a>
 800865c:	0ff3      	lsrs	r3, r6, #31
 800865e:	3b01      	subs	r3, #1
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	432b      	orrs	r3, r5
 8008664:	d101      	bne.n	800866a <__ieee754_powf+0x106>
 8008666:	4649      	mov	r1, r9
 8008668:	e2c5      	b.n	8008bf6 <__ieee754_powf+0x692>
 800866a:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 800866e:	f240 809b 	bls.w	80087a8 <__ieee754_powf+0x244>
 8008672:	4b46      	ldr	r3, [pc, #280]	@ (800878c <__ieee754_powf+0x228>)
 8008674:	4598      	cmp	r8, r3
 8008676:	d807      	bhi.n	8008688 <__ieee754_powf+0x124>
 8008678:	2c00      	cmp	r4, #0
 800867a:	da0a      	bge.n	8008692 <__ieee754_powf+0x12e>
 800867c:	2000      	movs	r0, #0
 800867e:	b007      	add	sp, #28
 8008680:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008684:	f000 bb37 	b.w	8008cf6 <__math_oflowf>
 8008688:	4b41      	ldr	r3, [pc, #260]	@ (8008790 <__ieee754_powf+0x22c>)
 800868a:	4598      	cmp	r8, r3
 800868c:	d907      	bls.n	800869e <__ieee754_powf+0x13a>
 800868e:	2c00      	cmp	r4, #0
 8008690:	dcf4      	bgt.n	800867c <__ieee754_powf+0x118>
 8008692:	2000      	movs	r0, #0
 8008694:	b007      	add	sp, #28
 8008696:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	f000 bb28 	b.w	8008cee <__math_uflowf>
 800869e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80086a2:	f7f7 fd59 	bl	8000158 <__aeabi_fsub>
 80086a6:	493b      	ldr	r1, [pc, #236]	@ (8008794 <__ieee754_powf+0x230>)
 80086a8:	4606      	mov	r6, r0
 80086aa:	f7f7 fe5f 	bl	800036c <__aeabi_fmul>
 80086ae:	493a      	ldr	r1, [pc, #232]	@ (8008798 <__ieee754_powf+0x234>)
 80086b0:	4680      	mov	r8, r0
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7f7 fe5a 	bl	800036c <__aeabi_fmul>
 80086b8:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 80086bc:	4681      	mov	r9, r0
 80086be:	4630      	mov	r0, r6
 80086c0:	f7f7 fe54 	bl	800036c <__aeabi_fmul>
 80086c4:	4601      	mov	r1, r0
 80086c6:	4835      	ldr	r0, [pc, #212]	@ (800879c <__ieee754_powf+0x238>)
 80086c8:	f7f7 fd46 	bl	8000158 <__aeabi_fsub>
 80086cc:	4631      	mov	r1, r6
 80086ce:	f7f7 fe4d 	bl	800036c <__aeabi_fmul>
 80086d2:	4601      	mov	r1, r0
 80086d4:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80086d8:	f7f7 fd3e 	bl	8000158 <__aeabi_fsub>
 80086dc:	4631      	mov	r1, r6
 80086de:	4682      	mov	sl, r0
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7f7 fe43 	bl	800036c <__aeabi_fmul>
 80086e6:	4601      	mov	r1, r0
 80086e8:	4650      	mov	r0, sl
 80086ea:	f7f7 fe3f 	bl	800036c <__aeabi_fmul>
 80086ee:	492c      	ldr	r1, [pc, #176]	@ (80087a0 <__ieee754_powf+0x23c>)
 80086f0:	f7f7 fe3c 	bl	800036c <__aeabi_fmul>
 80086f4:	4601      	mov	r1, r0
 80086f6:	4648      	mov	r0, r9
 80086f8:	f7f7 fd2e 	bl	8000158 <__aeabi_fsub>
 80086fc:	4601      	mov	r1, r0
 80086fe:	4606      	mov	r6, r0
 8008700:	4640      	mov	r0, r8
 8008702:	f7f7 fd2b 	bl	800015c <__addsf3>
 8008706:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800870a:	f02b 0b0f 	bic.w	fp, fp, #15
 800870e:	4641      	mov	r1, r8
 8008710:	4658      	mov	r0, fp
 8008712:	f7f7 fd21 	bl	8000158 <__aeabi_fsub>
 8008716:	4601      	mov	r1, r0
 8008718:	4630      	mov	r0, r6
 800871a:	f7f7 fd1d 	bl	8000158 <__aeabi_fsub>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	3d01      	subs	r5, #1
 8008722:	f36f 040b 	bfc	r4, #0, #12
 8008726:	431d      	orrs	r5, r3
 8008728:	4606      	mov	r6, r0
 800872a:	4621      	mov	r1, r4
 800872c:	4638      	mov	r0, r7
 800872e:	bf14      	ite	ne
 8008730:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 8008734:	4d1b      	ldreq	r5, [pc, #108]	@ (80087a4 <__ieee754_powf+0x240>)
 8008736:	f7f7 fd0f 	bl	8000158 <__aeabi_fsub>
 800873a:	4659      	mov	r1, fp
 800873c:	f7f7 fe16 	bl	800036c <__aeabi_fmul>
 8008740:	4639      	mov	r1, r7
 8008742:	4680      	mov	r8, r0
 8008744:	4630      	mov	r0, r6
 8008746:	f7f7 fe11 	bl	800036c <__aeabi_fmul>
 800874a:	4601      	mov	r1, r0
 800874c:	4640      	mov	r0, r8
 800874e:	f7f7 fd05 	bl	800015c <__addsf3>
 8008752:	4621      	mov	r1, r4
 8008754:	4606      	mov	r6, r0
 8008756:	4658      	mov	r0, fp
 8008758:	f7f7 fe08 	bl	800036c <__aeabi_fmul>
 800875c:	4601      	mov	r1, r0
 800875e:	4607      	mov	r7, r0
 8008760:	4630      	mov	r0, r6
 8008762:	f7f7 fcfb 	bl	800015c <__addsf3>
 8008766:	2800      	cmp	r0, #0
 8008768:	4604      	mov	r4, r0
 800876a:	4680      	mov	r8, r0
 800876c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008770:	f340 813f 	ble.w	80089f2 <__ieee754_powf+0x48e>
 8008774:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8008778:	f240 8128 	bls.w	80089cc <__ieee754_powf+0x468>
 800877c:	2100      	movs	r1, #0
 800877e:	4628      	mov	r0, r5
 8008780:	f7f7 ff92 	bl	80006a8 <__aeabi_fcmplt>
 8008784:	3800      	subs	r0, #0
 8008786:	bf18      	it	ne
 8008788:	2001      	movne	r0, #1
 800878a:	e778      	b.n	800867e <__ieee754_powf+0x11a>
 800878c:	3f7ffff3 	.word	0x3f7ffff3
 8008790:	3f800007 	.word	0x3f800007
 8008794:	3fb8aa00 	.word	0x3fb8aa00
 8008798:	36eca570 	.word	0x36eca570
 800879c:	3eaaaaab 	.word	0x3eaaaaab
 80087a0:	3fb8aa3b 	.word	0x3fb8aa3b
 80087a4:	bf800000 	.word	0xbf800000
 80087a8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80087ac:	f040 810a 	bne.w	80089c4 <__ieee754_powf+0x460>
 80087b0:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 80087b4:	f7f7 fdda 	bl	800036c <__aeabi_fmul>
 80087b8:	f06f 0217 	mvn.w	r2, #23
 80087bc:	4682      	mov	sl, r0
 80087be:	ea4f 53ea 	mov.w	r3, sl, asr #23
 80087c2:	3b7f      	subs	r3, #127	@ 0x7f
 80087c4:	441a      	add	r2, r3
 80087c6:	4b95      	ldr	r3, [pc, #596]	@ (8008a1c <__ieee754_powf+0x4b8>)
 80087c8:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 80087cc:	459a      	cmp	sl, r3
 80087ce:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 80087d2:	dd06      	ble.n	80087e2 <__ieee754_powf+0x27e>
 80087d4:	4b92      	ldr	r3, [pc, #584]	@ (8008a20 <__ieee754_powf+0x4bc>)
 80087d6:	459a      	cmp	sl, r3
 80087d8:	f340 80f6 	ble.w	80089c8 <__ieee754_powf+0x464>
 80087dc:	3201      	adds	r2, #1
 80087de:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 80087e2:	2300      	movs	r3, #0
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	9205      	str	r2, [sp, #20]
 80087e8:	4b8e      	ldr	r3, [pc, #568]	@ (8008a24 <__ieee754_powf+0x4c0>)
 80087ea:	9a01      	ldr	r2, [sp, #4]
 80087ec:	4630      	mov	r0, r6
 80087ee:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 80087f2:	46b2      	mov	sl, r6
 80087f4:	4659      	mov	r1, fp
 80087f6:	f7f7 fcaf 	bl	8000158 <__aeabi_fsub>
 80087fa:	4631      	mov	r1, r6
 80087fc:	4681      	mov	r9, r0
 80087fe:	4658      	mov	r0, fp
 8008800:	f7f7 fcac 	bl	800015c <__addsf3>
 8008804:	4601      	mov	r1, r0
 8008806:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800880a:	f7f7 fe63 	bl	80004d4 <__aeabi_fdiv>
 800880e:	4601      	mov	r1, r0
 8008810:	9004      	str	r0, [sp, #16]
 8008812:	4648      	mov	r0, r9
 8008814:	f7f7 fdaa 	bl	800036c <__aeabi_fmul>
 8008818:	9002      	str	r0, [sp, #8]
 800881a:	9b02      	ldr	r3, [sp, #8]
 800881c:	1076      	asrs	r6, r6, #1
 800881e:	f36f 030b 	bfc	r3, #0, #12
 8008822:	4698      	mov	r8, r3
 8008824:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 800882e:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 8008832:	4631      	mov	r1, r6
 8008834:	4640      	mov	r0, r8
 8008836:	f7f7 fd99 	bl	800036c <__aeabi_fmul>
 800883a:	4601      	mov	r1, r0
 800883c:	4648      	mov	r0, r9
 800883e:	f7f7 fc8b 	bl	8000158 <__aeabi_fsub>
 8008842:	4659      	mov	r1, fp
 8008844:	4681      	mov	r9, r0
 8008846:	4630      	mov	r0, r6
 8008848:	f7f7 fc86 	bl	8000158 <__aeabi_fsub>
 800884c:	4601      	mov	r1, r0
 800884e:	4650      	mov	r0, sl
 8008850:	f7f7 fc82 	bl	8000158 <__aeabi_fsub>
 8008854:	4641      	mov	r1, r8
 8008856:	f7f7 fd89 	bl	800036c <__aeabi_fmul>
 800885a:	4601      	mov	r1, r0
 800885c:	4648      	mov	r0, r9
 800885e:	f7f7 fc7b 	bl	8000158 <__aeabi_fsub>
 8008862:	9b04      	ldr	r3, [sp, #16]
 8008864:	4619      	mov	r1, r3
 8008866:	f7f7 fd81 	bl	800036c <__aeabi_fmul>
 800886a:	9902      	ldr	r1, [sp, #8]
 800886c:	4683      	mov	fp, r0
 800886e:	4608      	mov	r0, r1
 8008870:	f7f7 fd7c 	bl	800036c <__aeabi_fmul>
 8008874:	4606      	mov	r6, r0
 8008876:	496c      	ldr	r1, [pc, #432]	@ (8008a28 <__ieee754_powf+0x4c4>)
 8008878:	f7f7 fd78 	bl	800036c <__aeabi_fmul>
 800887c:	496b      	ldr	r1, [pc, #428]	@ (8008a2c <__ieee754_powf+0x4c8>)
 800887e:	f7f7 fc6d 	bl	800015c <__addsf3>
 8008882:	4631      	mov	r1, r6
 8008884:	f7f7 fd72 	bl	800036c <__aeabi_fmul>
 8008888:	4969      	ldr	r1, [pc, #420]	@ (8008a30 <__ieee754_powf+0x4cc>)
 800888a:	f7f7 fc67 	bl	800015c <__addsf3>
 800888e:	4631      	mov	r1, r6
 8008890:	f7f7 fd6c 	bl	800036c <__aeabi_fmul>
 8008894:	4967      	ldr	r1, [pc, #412]	@ (8008a34 <__ieee754_powf+0x4d0>)
 8008896:	f7f7 fc61 	bl	800015c <__addsf3>
 800889a:	4631      	mov	r1, r6
 800889c:	f7f7 fd66 	bl	800036c <__aeabi_fmul>
 80088a0:	4965      	ldr	r1, [pc, #404]	@ (8008a38 <__ieee754_powf+0x4d4>)
 80088a2:	f7f7 fc5b 	bl	800015c <__addsf3>
 80088a6:	4631      	mov	r1, r6
 80088a8:	f7f7 fd60 	bl	800036c <__aeabi_fmul>
 80088ac:	4963      	ldr	r1, [pc, #396]	@ (8008a3c <__ieee754_powf+0x4d8>)
 80088ae:	f7f7 fc55 	bl	800015c <__addsf3>
 80088b2:	4631      	mov	r1, r6
 80088b4:	4681      	mov	r9, r0
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7f7 fd58 	bl	800036c <__aeabi_fmul>
 80088bc:	4601      	mov	r1, r0
 80088be:	4648      	mov	r0, r9
 80088c0:	f7f7 fd54 	bl	800036c <__aeabi_fmul>
 80088c4:	4606      	mov	r6, r0
 80088c6:	4641      	mov	r1, r8
 80088c8:	9802      	ldr	r0, [sp, #8]
 80088ca:	f7f7 fc47 	bl	800015c <__addsf3>
 80088ce:	4659      	mov	r1, fp
 80088d0:	f7f7 fd4c 	bl	800036c <__aeabi_fmul>
 80088d4:	4631      	mov	r1, r6
 80088d6:	f7f7 fc41 	bl	800015c <__addsf3>
 80088da:	4641      	mov	r1, r8
 80088dc:	4681      	mov	r9, r0
 80088de:	4640      	mov	r0, r8
 80088e0:	f7f7 fd44 	bl	800036c <__aeabi_fmul>
 80088e4:	4956      	ldr	r1, [pc, #344]	@ (8008a40 <__ieee754_powf+0x4dc>)
 80088e6:	4682      	mov	sl, r0
 80088e8:	f7f7 fc38 	bl	800015c <__addsf3>
 80088ec:	4649      	mov	r1, r9
 80088ee:	f7f7 fc35 	bl	800015c <__addsf3>
 80088f2:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80088f6:	f026 060f 	bic.w	r6, r6, #15
 80088fa:	4631      	mov	r1, r6
 80088fc:	4640      	mov	r0, r8
 80088fe:	f7f7 fd35 	bl	800036c <__aeabi_fmul>
 8008902:	494f      	ldr	r1, [pc, #316]	@ (8008a40 <__ieee754_powf+0x4dc>)
 8008904:	4680      	mov	r8, r0
 8008906:	4630      	mov	r0, r6
 8008908:	f7f7 fc26 	bl	8000158 <__aeabi_fsub>
 800890c:	4651      	mov	r1, sl
 800890e:	f7f7 fc23 	bl	8000158 <__aeabi_fsub>
 8008912:	4601      	mov	r1, r0
 8008914:	4648      	mov	r0, r9
 8008916:	f7f7 fc1f 	bl	8000158 <__aeabi_fsub>
 800891a:	9902      	ldr	r1, [sp, #8]
 800891c:	f7f7 fd26 	bl	800036c <__aeabi_fmul>
 8008920:	4631      	mov	r1, r6
 8008922:	4681      	mov	r9, r0
 8008924:	4658      	mov	r0, fp
 8008926:	f7f7 fd21 	bl	800036c <__aeabi_fmul>
 800892a:	4601      	mov	r1, r0
 800892c:	4648      	mov	r0, r9
 800892e:	f7f7 fc15 	bl	800015c <__addsf3>
 8008932:	4682      	mov	sl, r0
 8008934:	4601      	mov	r1, r0
 8008936:	4640      	mov	r0, r8
 8008938:	f7f7 fc10 	bl	800015c <__addsf3>
 800893c:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 8008940:	f026 060f 	bic.w	r6, r6, #15
 8008944:	4630      	mov	r0, r6
 8008946:	493f      	ldr	r1, [pc, #252]	@ (8008a44 <__ieee754_powf+0x4e0>)
 8008948:	f7f7 fd10 	bl	800036c <__aeabi_fmul>
 800894c:	4641      	mov	r1, r8
 800894e:	4681      	mov	r9, r0
 8008950:	4630      	mov	r0, r6
 8008952:	f7f7 fc01 	bl	8000158 <__aeabi_fsub>
 8008956:	4601      	mov	r1, r0
 8008958:	4650      	mov	r0, sl
 800895a:	f7f7 fbfd 	bl	8000158 <__aeabi_fsub>
 800895e:	493a      	ldr	r1, [pc, #232]	@ (8008a48 <__ieee754_powf+0x4e4>)
 8008960:	f7f7 fd04 	bl	800036c <__aeabi_fmul>
 8008964:	4939      	ldr	r1, [pc, #228]	@ (8008a4c <__ieee754_powf+0x4e8>)
 8008966:	4680      	mov	r8, r0
 8008968:	4630      	mov	r0, r6
 800896a:	f7f7 fcff 	bl	800036c <__aeabi_fmul>
 800896e:	4601      	mov	r1, r0
 8008970:	4640      	mov	r0, r8
 8008972:	f7f7 fbf3 	bl	800015c <__addsf3>
 8008976:	4b36      	ldr	r3, [pc, #216]	@ (8008a50 <__ieee754_powf+0x4ec>)
 8008978:	9a01      	ldr	r2, [sp, #4]
 800897a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800897e:	f7f7 fbed 	bl	800015c <__addsf3>
 8008982:	9a05      	ldr	r2, [sp, #20]
 8008984:	4606      	mov	r6, r0
 8008986:	4610      	mov	r0, r2
 8008988:	f7f7 fc9c 	bl	80002c4 <__aeabi_i2f>
 800898c:	4680      	mov	r8, r0
 800898e:	4b31      	ldr	r3, [pc, #196]	@ (8008a54 <__ieee754_powf+0x4f0>)
 8008990:	9a01      	ldr	r2, [sp, #4]
 8008992:	4631      	mov	r1, r6
 8008994:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 8008998:	4648      	mov	r0, r9
 800899a:	f7f7 fbdf 	bl	800015c <__addsf3>
 800899e:	4651      	mov	r1, sl
 80089a0:	f7f7 fbdc 	bl	800015c <__addsf3>
 80089a4:	4641      	mov	r1, r8
 80089a6:	f7f7 fbd9 	bl	800015c <__addsf3>
 80089aa:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 80089ae:	f02b 0b0f 	bic.w	fp, fp, #15
 80089b2:	4641      	mov	r1, r8
 80089b4:	4658      	mov	r0, fp
 80089b6:	f7f7 fbcf 	bl	8000158 <__aeabi_fsub>
 80089ba:	4651      	mov	r1, sl
 80089bc:	f7f7 fbcc 	bl	8000158 <__aeabi_fsub>
 80089c0:	4649      	mov	r1, r9
 80089c2:	e6a6      	b.n	8008712 <__ieee754_powf+0x1ae>
 80089c4:	2200      	movs	r2, #0
 80089c6:	e6fa      	b.n	80087be <__ieee754_powf+0x25a>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e70b      	b.n	80087e4 <__ieee754_powf+0x280>
 80089cc:	d148      	bne.n	8008a60 <__ieee754_powf+0x4fc>
 80089ce:	4922      	ldr	r1, [pc, #136]	@ (8008a58 <__ieee754_powf+0x4f4>)
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7f7 fbc3 	bl	800015c <__addsf3>
 80089d6:	4639      	mov	r1, r7
 80089d8:	4681      	mov	r9, r0
 80089da:	4620      	mov	r0, r4
 80089dc:	f7f7 fbbc 	bl	8000158 <__aeabi_fsub>
 80089e0:	4601      	mov	r1, r0
 80089e2:	4648      	mov	r0, r9
 80089e4:	f7f7 fe7e 	bl	80006e4 <__aeabi_fcmpgt>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f47f aec7 	bne.w	800877c <__ieee754_powf+0x218>
 80089ee:	2386      	movs	r3, #134	@ 0x86
 80089f0:	e03b      	b.n	8008a6a <__ieee754_powf+0x506>
 80089f2:	4a1a      	ldr	r2, [pc, #104]	@ (8008a5c <__ieee754_powf+0x4f8>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d907      	bls.n	8008a08 <__ieee754_powf+0x4a4>
 80089f8:	2100      	movs	r1, #0
 80089fa:	4628      	mov	r0, r5
 80089fc:	f7f7 fe54 	bl	80006a8 <__aeabi_fcmplt>
 8008a00:	3800      	subs	r0, #0
 8008a02:	bf18      	it	ne
 8008a04:	2001      	movne	r0, #1
 8008a06:	e645      	b.n	8008694 <__ieee754_powf+0x130>
 8008a08:	d12a      	bne.n	8008a60 <__ieee754_powf+0x4fc>
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	f7f7 fba4 	bl	8000158 <__aeabi_fsub>
 8008a10:	4631      	mov	r1, r6
 8008a12:	f7f7 fe5d 	bl	80006d0 <__aeabi_fcmpge>
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0e9      	beq.n	80089ee <__ieee754_powf+0x48a>
 8008a1a:	e7ed      	b.n	80089f8 <__ieee754_powf+0x494>
 8008a1c:	001cc471 	.word	0x001cc471
 8008a20:	005db3d6 	.word	0x005db3d6
 8008a24:	08008ec0 	.word	0x08008ec0
 8008a28:	3e53f142 	.word	0x3e53f142
 8008a2c:	3e6c3255 	.word	0x3e6c3255
 8008a30:	3e8ba305 	.word	0x3e8ba305
 8008a34:	3eaaaaab 	.word	0x3eaaaaab
 8008a38:	3edb6db7 	.word	0x3edb6db7
 8008a3c:	3f19999a 	.word	0x3f19999a
 8008a40:	40400000 	.word	0x40400000
 8008a44:	3f763800 	.word	0x3f763800
 8008a48:	3f76384f 	.word	0x3f76384f
 8008a4c:	369dc3a0 	.word	0x369dc3a0
 8008a50:	08008eb0 	.word	0x08008eb0
 8008a54:	08008eb8 	.word	0x08008eb8
 8008a58:	3338aa3c 	.word	0x3338aa3c
 8008a5c:	43160000 	.word	0x43160000
 8008a60:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8008a64:	f240 809b 	bls.w	8008b9e <__ieee754_powf+0x63a>
 8008a68:	15db      	asrs	r3, r3, #23
 8008a6a:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8008a6e:	3b7e      	subs	r3, #126	@ 0x7e
 8008a70:	411c      	asrs	r4, r3
 8008a72:	4444      	add	r4, r8
 8008a74:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 8008a78:	4961      	ldr	r1, [pc, #388]	@ (8008c00 <__ieee754_powf+0x69c>)
 8008a7a:	3b7f      	subs	r3, #127	@ 0x7f
 8008a7c:	4119      	asrs	r1, r3
 8008a7e:	4021      	ands	r1, r4
 8008a80:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008a84:	f1c3 0317 	rsb	r3, r3, #23
 8008a88:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8008a8c:	4638      	mov	r0, r7
 8008a8e:	411c      	asrs	r4, r3
 8008a90:	f1b8 0f00 	cmp.w	r8, #0
 8008a94:	bfb8      	it	lt
 8008a96:	4264      	neglt	r4, r4
 8008a98:	f7f7 fb5e 	bl	8000158 <__aeabi_fsub>
 8008a9c:	4607      	mov	r7, r0
 8008a9e:	4631      	mov	r1, r6
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7f7 fb5b 	bl	800015c <__addsf3>
 8008aa6:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 8008aaa:	f028 080f 	bic.w	r8, r8, #15
 8008aae:	4640      	mov	r0, r8
 8008ab0:	4954      	ldr	r1, [pc, #336]	@ (8008c04 <__ieee754_powf+0x6a0>)
 8008ab2:	f7f7 fc5b 	bl	800036c <__aeabi_fmul>
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	4681      	mov	r9, r0
 8008aba:	4640      	mov	r0, r8
 8008abc:	f7f7 fb4c 	bl	8000158 <__aeabi_fsub>
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7f7 fb48 	bl	8000158 <__aeabi_fsub>
 8008ac8:	494f      	ldr	r1, [pc, #316]	@ (8008c08 <__ieee754_powf+0x6a4>)
 8008aca:	f7f7 fc4f 	bl	800036c <__aeabi_fmul>
 8008ace:	494f      	ldr	r1, [pc, #316]	@ (8008c0c <__ieee754_powf+0x6a8>)
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	4640      	mov	r0, r8
 8008ad4:	f7f7 fc4a 	bl	800036c <__aeabi_fmul>
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7f7 fb3e 	bl	800015c <__addsf3>
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	4601      	mov	r1, r0
 8008ae4:	4648      	mov	r0, r9
 8008ae6:	f7f7 fb39 	bl	800015c <__addsf3>
 8008aea:	4649      	mov	r1, r9
 8008aec:	4606      	mov	r6, r0
 8008aee:	f7f7 fb33 	bl	8000158 <__aeabi_fsub>
 8008af2:	4601      	mov	r1, r0
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7f7 fb2f 	bl	8000158 <__aeabi_fsub>
 8008afa:	4631      	mov	r1, r6
 8008afc:	4680      	mov	r8, r0
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7f7 fc34 	bl	800036c <__aeabi_fmul>
 8008b04:	4607      	mov	r7, r0
 8008b06:	4942      	ldr	r1, [pc, #264]	@ (8008c10 <__ieee754_powf+0x6ac>)
 8008b08:	f7f7 fc30 	bl	800036c <__aeabi_fmul>
 8008b0c:	4941      	ldr	r1, [pc, #260]	@ (8008c14 <__ieee754_powf+0x6b0>)
 8008b0e:	f7f7 fb23 	bl	8000158 <__aeabi_fsub>
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f7 fc2a 	bl	800036c <__aeabi_fmul>
 8008b18:	493f      	ldr	r1, [pc, #252]	@ (8008c18 <__ieee754_powf+0x6b4>)
 8008b1a:	f7f7 fb1f 	bl	800015c <__addsf3>
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f7 fc24 	bl	800036c <__aeabi_fmul>
 8008b24:	493d      	ldr	r1, [pc, #244]	@ (8008c1c <__ieee754_powf+0x6b8>)
 8008b26:	f7f7 fb17 	bl	8000158 <__aeabi_fsub>
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	f7f7 fc1e 	bl	800036c <__aeabi_fmul>
 8008b30:	493b      	ldr	r1, [pc, #236]	@ (8008c20 <__ieee754_powf+0x6bc>)
 8008b32:	f7f7 fb13 	bl	800015c <__addsf3>
 8008b36:	4639      	mov	r1, r7
 8008b38:	f7f7 fc18 	bl	800036c <__aeabi_fmul>
 8008b3c:	4601      	mov	r1, r0
 8008b3e:	4630      	mov	r0, r6
 8008b40:	f7f7 fb0a 	bl	8000158 <__aeabi_fsub>
 8008b44:	4607      	mov	r7, r0
 8008b46:	4601      	mov	r1, r0
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7f7 fc0f 	bl	800036c <__aeabi_fmul>
 8008b4e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008b52:	4681      	mov	r9, r0
 8008b54:	4638      	mov	r0, r7
 8008b56:	f7f7 faff 	bl	8000158 <__aeabi_fsub>
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4648      	mov	r0, r9
 8008b5e:	f7f7 fcb9 	bl	80004d4 <__aeabi_fdiv>
 8008b62:	4641      	mov	r1, r8
 8008b64:	4607      	mov	r7, r0
 8008b66:	4630      	mov	r0, r6
 8008b68:	f7f7 fc00 	bl	800036c <__aeabi_fmul>
 8008b6c:	4641      	mov	r1, r8
 8008b6e:	f7f7 faf5 	bl	800015c <__addsf3>
 8008b72:	4601      	mov	r1, r0
 8008b74:	4638      	mov	r0, r7
 8008b76:	f7f7 faef 	bl	8000158 <__aeabi_fsub>
 8008b7a:	4631      	mov	r1, r6
 8008b7c:	f7f7 faec 	bl	8000158 <__aeabi_fsub>
 8008b80:	4601      	mov	r1, r0
 8008b82:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008b86:	f7f7 fae7 	bl	8000158 <__aeabi_fsub>
 8008b8a:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008b8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b92:	da06      	bge.n	8008ba2 <__ieee754_powf+0x63e>
 8008b94:	4621      	mov	r1, r4
 8008b96:	f000 f849 	bl	8008c2c <scalbnf>
 8008b9a:	4629      	mov	r1, r5
 8008b9c:	e549      	b.n	8008632 <__ieee754_powf+0xce>
 8008b9e:	2400      	movs	r4, #0
 8008ba0:	e77d      	b.n	8008a9e <__ieee754_powf+0x53a>
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	e7f9      	b.n	8008b9a <__ieee754_powf+0x636>
 8008ba6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008baa:	e536      	b.n	800861a <__ieee754_powf+0xb6>
 8008bac:	4639      	mov	r1, r7
 8008bae:	e534      	b.n	800861a <__ieee754_powf+0xb6>
 8008bb0:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008bb4:	f43f ad23 	beq.w	80085fe <__ieee754_powf+0x9a>
 8008bb8:	2502      	movs	r5, #2
 8008bba:	4648      	mov	r0, r9
 8008bbc:	f000 f832 	bl	8008c24 <fabsf>
 8008bc0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008bc4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008bc8:	46c2      	mov	sl, r8
 8008bca:	4601      	mov	r1, r0
 8008bcc:	d003      	beq.n	8008bd6 <__ieee754_powf+0x672>
 8008bce:	f1b8 0f00 	cmp.w	r8, #0
 8008bd2:	f47f ad43 	bne.w	800865c <__ieee754_powf+0xf8>
 8008bd6:	2c00      	cmp	r4, #0
 8008bd8:	da04      	bge.n	8008be4 <__ieee754_powf+0x680>
 8008bda:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008bde:	f7f7 fc79 	bl	80004d4 <__aeabi_fdiv>
 8008be2:	4601      	mov	r1, r0
 8008be4:	2e00      	cmp	r6, #0
 8008be6:	f6bf ad18 	bge.w	800861a <__ieee754_powf+0xb6>
 8008bea:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008bee:	ea58 0805 	orrs.w	r8, r8, r5
 8008bf2:	f47f ad2e 	bne.w	8008652 <__ieee754_powf+0xee>
 8008bf6:	4608      	mov	r0, r1
 8008bf8:	f7f7 faae 	bl	8000158 <__aeabi_fsub>
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	e4f8      	b.n	80085f2 <__ieee754_powf+0x8e>
 8008c00:	ff800000 	.word	0xff800000
 8008c04:	3f317200 	.word	0x3f317200
 8008c08:	3f317218 	.word	0x3f317218
 8008c0c:	35bfbe8c 	.word	0x35bfbe8c
 8008c10:	3331bb4c 	.word	0x3331bb4c
 8008c14:	35ddea0e 	.word	0x35ddea0e
 8008c18:	388ab355 	.word	0x388ab355
 8008c1c:	3b360b61 	.word	0x3b360b61
 8008c20:	3e2aaaab 	.word	0x3e2aaaab

08008c24 <fabsf>:
 8008c24:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008c28:	4770      	bx	lr
	...

08008c2c <scalbnf>:
 8008c2c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8008c30:	b538      	push	{r3, r4, r5, lr}
 8008c32:	4603      	mov	r3, r0
 8008c34:	460d      	mov	r5, r1
 8008c36:	4604      	mov	r4, r0
 8008c38:	d02e      	beq.n	8008c98 <scalbnf+0x6c>
 8008c3a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008c3e:	d304      	bcc.n	8008c4a <scalbnf+0x1e>
 8008c40:	4601      	mov	r1, r0
 8008c42:	f7f7 fa8b 	bl	800015c <__addsf3>
 8008c46:	4603      	mov	r3, r0
 8008c48:	e026      	b.n	8008c98 <scalbnf+0x6c>
 8008c4a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8008c4e:	d118      	bne.n	8008c82 <scalbnf+0x56>
 8008c50:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8008c54:	f7f7 fb8a 	bl	800036c <__aeabi_fmul>
 8008c58:	4a17      	ldr	r2, [pc, #92]	@ (8008cb8 <scalbnf+0x8c>)
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4295      	cmp	r5, r2
 8008c5e:	db0c      	blt.n	8008c7a <scalbnf+0x4e>
 8008c60:	4604      	mov	r4, r0
 8008c62:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008c66:	3a19      	subs	r2, #25
 8008c68:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008c6c:	428d      	cmp	r5, r1
 8008c6e:	dd0a      	ble.n	8008c86 <scalbnf+0x5a>
 8008c70:	4912      	ldr	r1, [pc, #72]	@ (8008cbc <scalbnf+0x90>)
 8008c72:	4618      	mov	r0, r3
 8008c74:	f361 001e 	bfi	r0, r1, #0, #31
 8008c78:	e000      	b.n	8008c7c <scalbnf+0x50>
 8008c7a:	4911      	ldr	r1, [pc, #68]	@ (8008cc0 <scalbnf+0x94>)
 8008c7c:	f7f7 fb76 	bl	800036c <__aeabi_fmul>
 8008c80:	e7e1      	b.n	8008c46 <scalbnf+0x1a>
 8008c82:	0dd2      	lsrs	r2, r2, #23
 8008c84:	e7f0      	b.n	8008c68 <scalbnf+0x3c>
 8008c86:	1951      	adds	r1, r2, r5
 8008c88:	29fe      	cmp	r1, #254	@ 0xfe
 8008c8a:	dcf1      	bgt.n	8008c70 <scalbnf+0x44>
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	dd05      	ble.n	8008c9c <scalbnf+0x70>
 8008c90:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008c94:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8008c98:	4618      	mov	r0, r3
 8008c9a:	bd38      	pop	{r3, r4, r5, pc}
 8008c9c:	f111 0f16 	cmn.w	r1, #22
 8008ca0:	da01      	bge.n	8008ca6 <scalbnf+0x7a>
 8008ca2:	4907      	ldr	r1, [pc, #28]	@ (8008cc0 <scalbnf+0x94>)
 8008ca4:	e7e5      	b.n	8008c72 <scalbnf+0x46>
 8008ca6:	f101 0019 	add.w	r0, r1, #25
 8008caa:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008cae:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8008cb2:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8008cb6:	e7e1      	b.n	8008c7c <scalbnf+0x50>
 8008cb8:	ffff3cb0 	.word	0xffff3cb0
 8008cbc:	7149f2ca 	.word	0x7149f2ca
 8008cc0:	0da24260 	.word	0x0da24260

08008cc4 <with_errnof>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4604      	mov	r4, r0
 8008cc8:	460d      	mov	r5, r1
 8008cca:	f7ff fbbd 	bl	8008448 <__errno>
 8008cce:	6005      	str	r5, [r0, #0]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}

08008cd4 <xflowf>:
 8008cd4:	b508      	push	{r3, lr}
 8008cd6:	b140      	cbz	r0, 8008cea <xflowf+0x16>
 8008cd8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8008cdc:	f7f7 fb46 	bl	800036c <__aeabi_fmul>
 8008ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ce4:	2122      	movs	r1, #34	@ 0x22
 8008ce6:	f7ff bfed 	b.w	8008cc4 <with_errnof>
 8008cea:	4608      	mov	r0, r1
 8008cec:	e7f6      	b.n	8008cdc <xflowf+0x8>

08008cee <__math_uflowf>:
 8008cee:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8008cf2:	f7ff bfef 	b.w	8008cd4 <xflowf>

08008cf6 <__math_oflowf>:
 8008cf6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8008cfa:	f7ff bfeb 	b.w	8008cd4 <xflowf>
	...

08008d00 <__ieee754_sqrtf>:
 8008d00:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008d04:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	4604      	mov	r4, r0
 8008d10:	d30a      	bcc.n	8008d28 <__ieee754_sqrtf+0x28>
 8008d12:	4601      	mov	r1, r0
 8008d14:	f7f7 fb2a 	bl	800036c <__aeabi_fmul>
 8008d18:	4601      	mov	r1, r0
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f7f7 fa1e 	bl	800015c <__addsf3>
 8008d20:	4604      	mov	r4, r0
 8008d22:	4620      	mov	r0, r4
 8008d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	d0fa      	beq.n	8008d22 <__ieee754_sqrtf+0x22>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	da06      	bge.n	8008d3e <__ieee754_sqrtf+0x3e>
 8008d30:	4601      	mov	r1, r0
 8008d32:	f7f7 fa11 	bl	8000158 <__aeabi_fsub>
 8008d36:	4601      	mov	r1, r0
 8008d38:	f7f7 fbcc 	bl	80004d4 <__aeabi_fdiv>
 8008d3c:	e7f0      	b.n	8008d20 <__ieee754_sqrtf+0x20>
 8008d3e:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8008d42:	d03c      	beq.n	8008dbe <__ieee754_sqrtf+0xbe>
 8008d44:	15c2      	asrs	r2, r0, #23
 8008d46:	2400      	movs	r4, #0
 8008d48:	2019      	movs	r0, #25
 8008d4a:	4626      	mov	r6, r4
 8008d4c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008d50:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008d54:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8008d58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008d5c:	07d2      	lsls	r2, r2, #31
 8008d5e:	bf58      	it	pl
 8008d60:	005b      	lslpl	r3, r3, #1
 8008d62:	106d      	asrs	r5, r5, #1
 8008d64:	005b      	lsls	r3, r3, #1
 8008d66:	1872      	adds	r2, r6, r1
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	bfcf      	iteee	gt
 8008d6c:	461a      	movgt	r2, r3
 8008d6e:	1856      	addle	r6, r2, r1
 8008d70:	1864      	addle	r4, r4, r1
 8008d72:	1a9a      	suble	r2, r3, r2
 8008d74:	3801      	subs	r0, #1
 8008d76:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008d7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008d7e:	d1f2      	bne.n	8008d66 <__ieee754_sqrtf+0x66>
 8008d80:	b1ba      	cbz	r2, 8008db2 <__ieee754_sqrtf+0xb2>
 8008d82:	4e15      	ldr	r6, [pc, #84]	@ (8008dd8 <__ieee754_sqrtf+0xd8>)
 8008d84:	4f15      	ldr	r7, [pc, #84]	@ (8008ddc <__ieee754_sqrtf+0xdc>)
 8008d86:	6830      	ldr	r0, [r6, #0]
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	f7f7 f9e5 	bl	8000158 <__aeabi_fsub>
 8008d8e:	f8d6 8000 	ldr.w	r8, [r6]
 8008d92:	4601      	mov	r1, r0
 8008d94:	4640      	mov	r0, r8
 8008d96:	f7f7 fc91 	bl	80006bc <__aeabi_fcmple>
 8008d9a:	b150      	cbz	r0, 8008db2 <__ieee754_sqrtf+0xb2>
 8008d9c:	6830      	ldr	r0, [r6, #0]
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	f7f7 f9dc 	bl	800015c <__addsf3>
 8008da4:	6836      	ldr	r6, [r6, #0]
 8008da6:	4601      	mov	r1, r0
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7f7 fc7d 	bl	80006a8 <__aeabi_fcmplt>
 8008dae:	b170      	cbz	r0, 8008dce <__ieee754_sqrtf+0xce>
 8008db0:	3402      	adds	r4, #2
 8008db2:	1064      	asrs	r4, r4, #1
 8008db4:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008db8:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008dbc:	e7b1      	b.n	8008d22 <__ieee754_sqrtf+0x22>
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	0218      	lsls	r0, r3, #8
 8008dc2:	460a      	mov	r2, r1
 8008dc4:	f101 0101 	add.w	r1, r1, #1
 8008dc8:	d5f9      	bpl.n	8008dbe <__ieee754_sqrtf+0xbe>
 8008dca:	4252      	negs	r2, r2
 8008dcc:	e7bb      	b.n	8008d46 <__ieee754_sqrtf+0x46>
 8008dce:	3401      	adds	r4, #1
 8008dd0:	f024 0401 	bic.w	r4, r4, #1
 8008dd4:	e7ed      	b.n	8008db2 <__ieee754_sqrtf+0xb2>
 8008dd6:	bf00      	nop
 8008dd8:	08008ecc 	.word	0x08008ecc
 8008ddc:	08008ec8 	.word	0x08008ec8

08008de0 <_init>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr

08008dec <_fini>:
 8008dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dee:	bf00      	nop
 8008df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008df2:	bc08      	pop	{r3}
 8008df4:	469e      	mov	lr, r3
 8008df6:	4770      	bx	lr
